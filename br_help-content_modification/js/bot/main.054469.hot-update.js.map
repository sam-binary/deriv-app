{"version":3,"sources":["webpack://deriv-bot/../components/lib/button.css?8ab2","webpack://deriv-bot/../components/lib/form.css?74c0","webpack://deriv-bot/../components/lib/input.css?5c52","webpack://deriv-bot/./node_modules/blockly/generators/javascript.js","webpack://deriv-bot/./node_modules/scratch-blocks/shim/blockly_compressed_vertical.Blockly.js?5e08","webpack://deriv-bot/./node_modules/scratch-blocks/shim/blockly_compressed_vertical.goog.js?d2bd","webpack://deriv-bot/./src/assets/sass/bot.scss?c14e","webpack://deriv-bot/./src/assets/sass/scratch/flyout.scss?cf05","webpack://deriv-bot/./src/assets/sass/scratch/panel.scss?418c","webpack://deriv-bot/./src/assets/sass/scratch/toolbar.scss?b663","webpack://deriv-bot/./src/assets/sass/scratch/toolbox.scss?9787","webpack://deriv-bot/./src/assets/sass/scratch/workspace.scss?4372","webpack://deriv-bot/./src/components/flyout-block.jsx","webpack://deriv-bot/./src/components/flyout.jsx","webpack://deriv-bot/./src/components/toolbar.jsx","webpack://deriv-bot/./src/scratch/blocks/Advanced/Functions/procedures_callnoreturn.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Functions/procedures_callreturn.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Functions/procedures_defnoreturn.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Functions/procedures_defreturn.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Functions/procedures_ifreturn.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/List/lists_create_with.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/List/lists_getIndex.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/List/lists_getSublist.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/List/lists_indexOf.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/List/lists_isEmpty.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/List/lists_length.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/List/lists_repeat.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/List/lists_setIndex.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/List/lists_sort.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/List/lists_split.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/List/lists_statement.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Loops/controls_flow_statements.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Loops/controls_for.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Loops/controls_forEach.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Loops/controls_repeat.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Loops/controls_repeat_ext.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Loops/controls_whileUntil.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Variable/variables_get.js","webpack://deriv-bot/./src/scratch/blocks/Advanced/Variable/variables_set.js","webpack://deriv-bot/./src/scratch/blocks/Binary/After Purchase/after_purchase.js","webpack://deriv-bot/./src/scratch/blocks/Binary/After Purchase/check_result.js","webpack://deriv-bot/./src/scratch/blocks/Binary/After Purchase/read_details.js","webpack://deriv-bot/./src/scratch/blocks/Binary/After Purchase/trade_again.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Before Purchase/ask_price.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Before Purchase/before_purchase.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Before Purchase/payout.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Before Purchase/purchase.js","webpack://deriv-bot/./src/scratch/blocks/Binary/During Purchase/check_sell.js","webpack://deriv-bot/./src/scratch/blocks/Binary/During Purchase/during_purchase.js","webpack://deriv-bot/./src/scratch/blocks/Binary/During Purchase/sell_at_market.js","webpack://deriv-bot/./src/scratch/blocks/Binary/During Purchase/sell_price.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/Parts/fast_ema_period.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/Parts/input_list.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/Parts/period.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/Parts/signal_ema_period.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/Parts/slow_ema_period.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/Parts/std_dev_multiplier_down.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/Parts/std_dev_multiplier_up.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/bb_statement.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/bba_statement.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/ema_statement.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/emaa_statement.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/macda_statement.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/rsi_statement.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/rsia_statement.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/sma_statement.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Indicators/smaa_statement.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tick Analysis/check_direction.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tick Analysis/get_ohlc.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tick Analysis/lastDigitList.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tick Analysis/last_digit.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tick Analysis/ohlc.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tick Analysis/ohlc_values.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tick Analysis/readOhlc.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tick Analysis/tick.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tick Analysis/tick_analysis.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tick Analysis/ticks.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tools/Candle/is_candle_black.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tools/Candle/ohlc_values_in_list.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tools/Candle/read_ohlc_obj.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tools/Misc./balance.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tools/Misc./block_holder.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tools/Misc./loader.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tools/Misc./notify.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tools/Misc./total_profit.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tools/Misc./total_runs.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tools/Time/epoch.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Tools/Time/timeout.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Trade Definition/trade_definition.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Trade Definition/trade_definition_candleinterval.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Trade Definition/trade_definition_contracttype.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Trade Definition/trade_definition_market.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Trade Definition/trade_definition_restartbuysell.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Trade Definition/trade_definition_restartonerror.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Trade Definition/trade_definition_tradeoptions.js","webpack://deriv-bot/./src/scratch/blocks/Binary/Trade Definition/trade_definition_tradetype.js","webpack://deriv-bot/./src/scratch/blocks/Logic/controls_if.js","webpack://deriv-bot/./src/scratch/blocks/Logic/logic_boolean.js","webpack://deriv-bot/./src/scratch/blocks/Logic/logic_compare.js","webpack://deriv-bot/./src/scratch/blocks/Logic/logic_negate.js","webpack://deriv-bot/./src/scratch/blocks/Logic/logic_null.js","webpack://deriv-bot/./src/scratch/blocks/Logic/logic_operation.js","webpack://deriv-bot/./src/scratch/blocks/Logic/logic_ternary.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_arithmetic.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_change.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_constant.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_constrain.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_modulo.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_number.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_number_positive.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_number_property.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_on_list.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_random_float.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_random_int.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_round.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_single.js","webpack://deriv-bot/./src/scratch/blocks/Math/math_trig.js","webpack://deriv-bot/./src/scratch/blocks/Text/text.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_append.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_changeCase.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_charAt.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_getSubstring.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_indexOf.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_isEmpty.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_join.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_length.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_print.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_prompt_ext.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_statement.js","webpack://deriv-bot/./src/scratch/blocks/Text/text_trim.js","webpack://deriv-bot/./src/scratch/hooks/block.js","webpack://deriv-bot/./src/scratch/hooks/block_svg.js","webpack://deriv-bot/./src/scratch/hooks/colours.js","webpack://deriv-bot/./src/scratch/hooks/constant.js","webpack://deriv-bot/./src/scratch/hooks/data_category.js","webpack://deriv-bot/./src/scratch/hooks/field_dropdown.js","webpack://deriv-bot/./src/scratch/hooks/field_image.js","webpack://deriv-bot/./src/scratch/hooks/flyout_base.js","webpack://deriv-bot/./src/scratch/hooks/gesture.js","webpack://deriv-bot/./src/scratch/hooks/icon.js","webpack://deriv-bot/./src/scratch/hooks/procedures.js","webpack://deriv-bot/./src/scratch/hooks/toolbox.js","webpack://deriv-bot/./src/scratch/hooks/variables.js","webpack://deriv-bot/./src/scratch/hooks/workspace_audio.js","webpack://deriv-bot/./src/scratch/hooks/workspace_svg.js","webpack://deriv-bot/./src/scratch/hooks/xml.js","webpack://deriv-bot/./src/scratch/index.js","webpack://deriv-bot/./src/scratch/shared.js","webpack://deriv-bot/./src/scratch/utils.js","webpack://deriv-bot/./src/stores/flyout-store.js","webpack://deriv-bot/./src/stores/toolbar-store.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA,OAAO,IAAU;AACjB;AACA,sBAAsB,mBAAO,CAAC,4HAAgE,EAAE,QAAS,GAAG,YAAY,SAAS,EAAE;AACnI;AACA;AACA;;;;;;;;;;;;ACNA;AACA,OAAO,IAAU;AACjB;AACA,sBAAsB,mBAAO,CAAC,4HAAgE,EAAE,QAAS,GAAG,YAAY,SAAS,EAAE;AACnI;AACA;AACA;;;;;;;;;;;;ACNA;AACA,OAAO,IAAU;AACjB;AACA,sBAAsB,mBAAO,CAAC,4HAAgE,EAAE,QAAS,GAAG,YAAY,SAAS,EAAE;AACnI;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACa;;AAEb;;AAEA;;;AAGA;AACA;AACA,UAAU;AACV;AACA,yCAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAkB,kBAAkB;AACpC,yCAAkB,iBAAiB;AACnC,yCAAkB,oBAAoB;AACtC,yCAAkB,yBAAyB;AAC3C,yCAAkB,qBAAqB;AACvC,yCAAkB,qBAAqB;AACvC,yCAAkB,yBAAyB;AAC3C,yCAAkB,wBAAwB;AAC1C,yCAAkB,4BAA4B;AAC9C,yCAAkB,yBAAyB;AAC3C,yCAAkB,oBAAoB;AACtC,yCAAkB,kBAAkB;AACpC,yCAAkB,oBAAoB;AACtC,yCAAkB,mBAAmB;AACrC,yCAAkB,4BAA4B;AAC9C,yCAAkB,4BAA4B;AAC9C,yCAAkB,sBAAsB;AACxC,yCAAkB,qBAAqB;AACvC,yCAAkB,yBAAyB;AAC3C,yCAAkB,sBAAsB;AACxC,yCAAkB,yBAAyB;AAC3C,yCAAkB,sBAAsB;AACxC,yCAAkB,cAAc;AAChC,yCAAkB,sBAAsB;AACxC,yCAAkB,oBAAoB;AACtC,yCAAkB,wBAAwB;AAC1C,yCAAkB,wBAAwB;AAC1C,yCAAkB,uBAAuB;AACzC,yCAAkB,wBAAwB;AAC1C,yCAAkB,uBAAuB;AACzC,yCAAkB,wBAAwB;AAC1C,yCAAkB,uBAAuB;AACzC,yCAAkB,kBAAkB;AACpC,yCAAkB,kBAAkB;AACpC,yCAAkB,iBAAiB;;AAEnC;AACA;AACA,UAAU;AACV;AACA,yCAAkB;AAClB;AACA;AACA,GAAG,yCAAkB,sBAAsB,yCAAkB;AAC7D;AACA,GAAG,yCAAkB,sBAAsB,yCAAkB;AAC7D;AACA;AACA;AACA;AACA,GAAG,yCAAkB,eAAe,yCAAkB;AACtD;AACA;AACA,GAAG,yCAAkB,eAAe,yCAAkB;;AAEtD;AACA,GAAG,yCAAkB,oBAAoB,yCAAkB;AAC3D;AACA,GAAG,yCAAkB,uBAAuB,yCAAkB;AAC9D;AACA,GAAG,yCAAkB,iBAAiB,yCAAkB;AACxD;AACA,GAAG,yCAAkB,oBAAoB,yCAAkB;AAC3D;AACA,GAAG,yCAAkB,mBAAmB,yCAAkB;AAC1D;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B;AACA,yCAAkB;AAClB;AACA,EAAE,yCAAkB;AACpB;AACA;AACA,EAAE,yCAAkB;;AAEpB,OAAO,yCAAkB;AACzB,IAAI,yCAAkB;AACtB,0BAA0B,yCAAkB;AAC5C,GAAG;AACH,IAAI,yCAAkB;AACtB;;AAEA,EAAE,yCAAkB;;AAEpB;AACA;AACA;AACA,iBAAiB,uBAAuB;AACxC,iBAAiB,yCAAkB;AACnC;AACA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC,iBAAiB,yCAAkB;AACnC;AACA;;AAEA;AACA;AACA,IAAI,yCAAkB;AACtB,wCAAwC;AACxC;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA,yCAAkB;AAClB;AACA;AACA,mBAAmB,yCAAkB;AACrC,qBAAqB,yCAAkB;AACvC;AACA;AACA,SAAS,yCAAkB;AAC3B,SAAS,yCAAkB;AAC3B,EAAE,yCAAkB;AACpB;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA,yCAAkB;AAClB,kBAAkB;AAClB;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA,yCAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,OAAO;AACnB;AACA;AACA,yCAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,0CAA0C,yCAAkB;AAC5D;AACA;AACA;AACA;AACA,uBAAuB,yCAAkB;AACzC;AACA,OAAO;AACP,uBAAuB,yCAAkB;AACzC;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA,wBAAwB,yCAAkB;AAC1C;AACA,2BAA2B,yCAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,yCAAkB;AACvD;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA,yCAAkB;AAClB;AACA;AACA,2BAA2B,yCAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA,aAAa,yCAAkB;AAC/B,QAAQ,yCAAkB;AAC1B,GAAG;AACH,aAAa,yCAAkB;AAC/B,QAAQ,yCAAkB;AAC1B,GAAG;AACH,aAAa,yCAAkB;AAC/B,QAAQ,yCAAkB;AAC1B,GAAG;AACH,aAAa,yCAAkB;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,uBAAuB,yCAAkB;AACzC,KAAK;AACL;AACA,uBAAuB,yCAAkB;AACzC;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,uBAAuB,yCAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5UA,mFAAqC,mBAAO,CAAC,6HAA4C,E;;;;;;;;;;;;;;;ACAzF,gFAAkC,mBAAO,CAAC,uHAAyC,E;;;;;;;;;;;;;;;ACAnF;AACA,OAAO,IAAU;AACjB;AACA,sBAAsB,mBAAO,CAAC,2HAA+D,EAAE,QAAS,GAAG,YAAY,SAAS,EAAE;AAClI;AACA;AACA;;;;;;;;;;;;ACNA;AACA,OAAO,IAAU;AACjB;AACA,sBAAsB,mBAAO,CAAC,8HAAkE,EAAE,QAAS,GAAG,YAAY,SAAS,EAAE;AACrI;AACA;AACA;;;;;;;;;;;;ACNA;AACA,OAAO,IAAU;AACjB;AACA,sBAAsB,mBAAO,CAAC,8HAAkE,EAAE,QAAS,GAAG,YAAY,SAAS,EAAE;AACrI;AACA;AACA;;;;;;;;;;;;ACNA;AACA,OAAO,IAAU;AACjB;AACA,sBAAsB,mBAAO,CAAC,8HAAkE,EAAE,QAAS,GAAG,YAAY,SAAS,EAAE;AACrI;AACA;AACA;;;;;;;;;;;;ACNA;AACA,OAAO,IAAU;AACjB;AACA,sBAAsB,mBAAO,CAAC,8HAAkE,EAAE,QAAS,GAAG,YAAY,SAAS,EAAE;AACrI;AACA;AACA;;;;;;;;;;;;ACNA;AACA,OAAO,IAAU;AACjB;AACA,sBAAsB,mBAAO,CAAC,8HAAkE,EAAE,QAAS,GAAG,YAAY,SAAS,EAAE;AACrI;AACA;AACA;;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAA+C,0DAA0D,2CAA2C,iCAAiC;;AAE3J;AACa;AACI;AACC;AACG;;AAE/C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,4CAAK;AAChB;AACA,KAAK,EAAE,4CAAK;AACZ;AACA,KAAK,EAAE,4CAAK;AACZ;AACA,KAAK,oCAAoC,4CAAK;AAC9C;AACA,KAAK,iBAAiB,4CAAK;AAC3B;AACA;AACA,KAAK,EAAE,4CAAK,eAAe,uDAAY;AACvC;AACA,KAAK,IAAI,4CAAK;AACd;AACA;AACA;AACA;AACA,KAAK,EAAE,kEAAS,YAAY,4CAAK;AACjC;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC,CAAC,4CAAK;;AAEP;AACA,cAAc,oDAAS;AACvB,sBAAsB,oDAAS;AAC/B,eAAe,oDAAS;AACxB;AACe,8HAAO;AACtB;AACA;AACA;AACA;AACA,CAAC,cAAc,E;;;;;;;;;;;;;ACvEf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACS;AACU;AACD;AACA;;AAE5C;AACA;AACA;AACA;AACA,SAAS,4CAAK;AACd;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,eAAe,4CAAK,eAAe,yDAAW;AAC9C;AACA;AACA;AACA,SAAS;;AAET;AACA,eAAe,4CAAK;AACpB;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;;AAEA,iBAAiB,4CAAK;AACtB;AACA;AACA;AACA,yCAAyC;AACzC;;AAEA,sEAAsE;;AAEtE;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA,kBAAkB,iDAAS;AAC3B,gBAAgB,iDAAS;AACzB,cAAc,iDAAS;AACvB;AACe,8HAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,SAAS,E;;;;;;;;;;;;;AC1EV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACU;;AAEa;AACR;;;AAGM;AACP;;;AAGK;AACN;;AAEA;AACK;AACD;;AAE3C;AACA,wCAAwC;AACxC,UAAU,mEAAmE;AAC7E;AACA;AACA,kBAAkB,0DAA0D;AAC5E,kBAAkB,wDAAwD;AAC1E,kBAAkB,oDAAoD;AACtE,kBAAkB,sEAAsE;AACxF,kBAAkB,kBAAkB;AACpC,kBAAkB,gDAAgD;AAClE,kBAAkB,gDAAgD;AAClE,kBAAkB,kBAAkB;AACpC,kBAAkB,uDAAuD;AACzE,kBAAkB,0DAA0D;AAC5E,kBAAkB,gDAAgD;AAClE;AACA,UAAU;AACV;;AAEA,SAAS,4CAAK;AACd;AACA;AACA,GAAG,EAAE,4CAAK,eAAe,kEAAM;AAC/B;AACA,eAAe,iDAAU;AACzB;AACA;AACA,GAAG,EAAE,4CAAK,eAAe,mDAAQ;AACjC;AACA,GAAG,GAAG,4CAAK;AACX;AACA,GAAG,EAAE,+DAAS,aAAa,4CAAK,eAAe,gEAAI;AACnD;AACA;AACA,KAAK;AACL;AACA,0BAA0B;AAC1B;AACA,GAAG;AACH;AACA,WAAW,4CAAK,4BAA4B,4CAAK,eAAe,iEAAK;AACrE;AACA;AACA;AACA;AACA,aAAa,+DAAS;AACtB,mBAAmB,+DAAS;AAC5B;AACA,KAAK;AACL,GAAG;AACH;;AAEe,8HAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,UAAU,E;;;;;;;;;;;;ACvFX;AAAA;AAAA;AAAA;AAAA;AAAwC;AACW;AACK;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,yBAAyB;AACtC;AACA;AACA;AACA,IAAI,gEAAiB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kDAAkD;;AAElD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C;;AAE3C;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA,KAAK,EAAE;;AAEP;;AAEA;AACA;AACA;AACA,KAAK;;;AAGL;;AAEA;AACA;AACA;AACA,6BAA6B,kEAAS;AACtC;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA,cAAc,gCAAgC;AAC9C;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kEAAS;;AAE3B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;;AAEA,yCAAkB;AAClB;AACA,qBAAqB,yCAAkB;AACvC;AACA,WAAW,yCAAkB,+BAA+B,yCAAkB;AAC9E,GAAG;AACH,uDAAuD;AACvD;AACA,E;;;;;;;;;;;;;AC9WA;AAAA;AAAwD;AACxD;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,qBAAqB,yCAAkB;AACvC;AACA,WAAW,yCAAkB,+BAA+B,yCAAkB;AAC9E,GAAG;AACH;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACD;AACC;AACC;AACA;AACM;AACK;AACxD;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;;AAErC;AACA,sDAAsD;;AAEtD,4CAA4C,qDAAa;AACzD;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,yBAAyB;AACtC;AACA;AACA;AACA,IAAI,gEAAiB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA,0BAA0B,kEAAS;AACnC;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,+BAA+B,kEAAS;;AAExC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,OAAO;AACP,KAAK;AACL,GAAG;;AAEH;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,kEAAS;AAC7B,KAAK;AACL;;;AAGA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,SAAS;AACtB;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK,EAAE;;AAEP;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB;;AAExB;AACA,GAAG;;AAEH;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,uBAAuB;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,gCAAgC;AAC9C;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;;AAEA,yCAAkB;AAClB;AACA,qBAAqB,yCAAkB;AACvC,eAAe,yCAAkB;;AAEjC,MAAM,yCAAkB;AACxB,6CAA6C;;AAE7C,aAAa,yCAAkB,aAAa,yCAAkB,kDAAkD,yCAAkB;AAClI;;AAEA,MAAM,yCAAkB;AACxB,aAAa,yCAAkB;AAC/B;;AAEA,oBAAoB,yCAAkB,8BAA8B,yCAAkB;;AAEtF;AACA,kBAAkB,yCAAkB,sCAAsC;AAC1E;;AAEA;AACA,WAAW,yCAAkB;AAC7B,GAAG;AACH,IAAI;;AAEJ,aAAa,yCAAkB,8EAA8E,4DAA4D,KAAK;AAC9K;;AAEA,EAAE,yCAAkB;AACpB;AACA,E;;;;;;;;;;;;;AC5VA;AAAA;AAAA;AAA4C;AACY;AACxD;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;;AAErC;AACA,sDAAsD;;AAEtD,4CAA4C,oDAAY;AACxD;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAkB,wBAAwB,yCAAkB,wB;;;;;;;;;;;;;AClF5D;AAAA;AAAA;AAAA;AAAA;AAAgD;AACG;AACK;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;;AAEH;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,kEAAS;AAC1D;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,aAAa,yBAAyB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,gEAAiB;;AAErB;AACA,aAAa;AACb;;AAEA,sBAAsB;;AAEtB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA,QAAQ;;;AAGR;AACA;AACA,mDAAmD,kEAAS;AAC5D;AACA;AACA,OAAO;AACP;AACA,mDAAmD,kEAAS;AAC5D;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,kBAAkB,yCAAkB,iCAAiC,yCAAkB;AACvF;;AAEA;AACA,gBAAgB,yCAAkB,6BAA6B,yCAAkB;AACjF,mCAAmC;AACnC,GAAG;AACH,qBAAqB;AACrB;;AAEA,4CAA4C,+BAA+B;AAC3E;AACA,E;;;;;;;;;;;;;AClJA;AAAA;AAAA;AAA4C;AACY;AACxD;AACA;AACA;;AAEA,qCAAqC;;AAErC,4CAA4C,oDAAY;AACxD;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,kBAAkB,kEAAS;AAC3B,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,iDAAiD;;AAEjD,gBAAgB,yCAAkB;AAClC;AACA;;AAEA;AACA,gBAAgB,yCAAkB;;AAElC;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA,yDAAyD;AACzD;AACA,E;;;;;;;;;;;;;AChGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACC;AACW;AACxD;AACA;AACA;;AAEA,0BAA0B,kEAAS,kBAAkB,kEAAS,oCAAoC,kEAAS;AAC3G,gDAAgD,kEAAS,8BAA8B,kEAAS,sBAAsB,kEAAS,oBAAoB,kEAAS;AAC5J;AACA;;AAEA;AACA,KAAK;AACL,iEAAiE,kEAAS;AAC1E;AACA,gCAAgC;;AAEhC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA,uCAAuC,yCAAkB,eAAe,yCAAkB;AAC1F,aAAa,yCAAkB;AAC/B;;AAEA;AACA;AACA;AACA,cAAc,yCAAkB;AAChC,KAAK;AACL;AACA,cAAc,yCAAkB;AAChC,KAAK;AACL,8BAA8B;AAC9B;AACA,GAAG;AACH;AACA;AACA,cAAc,yCAAkB;AAChC,KAAK;AACL;AACA,cAAc,yCAAkB;AAChC,KAAK;AACL,4BAA4B;AAC5B;AACA,GAAG;AACH,aAAa,yCAAkB;;AAE/B;AACA;AACA,cAAc,yCAAkB;AAChC,KAAK;AACL;AACA,cAAc,yCAAkB;AAChC,KAAK;AACL,4CAA4C;AAC5C;AACA,GAAG;AACH,cAAc,yCAAkB;;AAEhC;AACA;AACA,cAAc,yCAAkB;AAChC,KAAK;AACL;AACA,cAAc,yCAAkB;AAChC,KAAK;AACL,6CAA6C;AAC7C;AACA,GAAG;AACH;AACA,uBAAuB,yCAAkB;AACzC,kBAAkB,yCAAkB,+CAA+C,kEAAkE,+BAA+B,kDAAkD,mBAAmB,OAAO,qCAAqC,mBAAmB,eAAe;AACvU;;AAEA;AACA,cAAc,yCAAkB;AAChC,KAAK;AACL,sBAAsB;AACtB;AACA;;AAEA;AACA,E;;;;;;;;;;;;;ACtJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACE;AACC;AACW;AACxD;AACA;AACA,6BAA6B,kEAAS,yCAAyC,kEAAS,gDAAgD,kEAAS;AACjJ,6BAA6B,kEAAS,uBAAuB,kEAAS,8BAA8B,kEAAS;AAC7G,8CAA8C,kEAAS;AACvD;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,aAAa,yCAAkB,4BAA4B,yCAAkB;AAC7E;AACA;AACA;;AAEA;AACA;AACA,YAAY,yCAAkB;AAC9B,KAAK;AACL,YAAY,yCAAkB,qCAAqC,yCAAkB;AACrF;AACA;;AAEA;AACA,YAAY,yCAAkB;AAC9B,KAAK;AACL,YAAY,yCAAkB,qCAAqC,yCAAkB;AACrF;AACA;;AAEA;AACA,GAAG;AACH,UAAU,yCAAkB;AAC5B,UAAU,yCAAkB;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM;;;AAGN,uBAAuB,yCAAkB;AACzC,kBAAkB,yCAAkB,qDAAqD,0EAA0E,wEAAwE,oDAAoD,eAAe;AAC9S;AACA;;AAEA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACnHA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,mBAAmB,kEAAS,sBAAsB,kEAAS;AAC3D,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,aAAa,yCAAkB,4BAA4B,yCAAkB;AAC7E,aAAa,yCAAkB,6BAA6B,yCAAkB;AAC9E;;AAEA;AACA,2BAA2B,yCAAkB;AAC7C;;AAEA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACG;AACU;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,aAAa,yCAAkB,6BAA6B,yCAAkB;AAC9E;AACA;AACA,GAAG;AACH;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACvCA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,aAAa,yCAAkB,6BAA6B,yCAAkB;AAC9E;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACjCA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,kBAAkB,kEAAS;AAC3B,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB,mFAAmF;;AAErH,qBAAqB,yCAAkB;AACvC,gBAAgB,yCAAkB,2CAA2C,6BAA6B,6BAA6B,OAAO,OAAO,mCAAmC,eAAe,2BAA2B,WAAW;AAC7O,gBAAgB,yCAAkB,4BAA4B,yCAAkB;AAChF,oBAAoB,yCAAkB,2BAA2B,yCAAkB;AACnF,sFAAsF;AACtF;AACA,E;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACE;AACC;AACW;AACxD;AACA;AACA,0BAA0B,kEAAS,kBAAkB,kEAAS;AAC9D,2BAA2B,kEAAS,uBAAuB,kEAAS,8BAA8B,kEAAS,sBAAsB,kEAAS,oBAAoB,kEAAS;AACvK,gEAAgE,kEAAS;AACzE;AACA;AACA,4CAA4C,kEAAS,QAAQ;;AAE7D;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA,cAAc,yCAAkB,0BAA0B,yCAAkB;AAC5E,aAAa,yCAAkB,4BAA4B,yCAAkB;;AAE7E;AACA;AACA;AACA,KAAK;;;AAGL,kBAAkB,yCAAkB;AACpC,mDAAmD;AACnD;AACA;AACA;;AAEA;;AAEA;AACA;AACA,yCAAyC;AACzC,KAAK;AACL,6CAA6C;AAC7C;AACA,GAAG;AACH;AACA;AACA,gEAAgE;AAChE,KAAK;AACL,0CAA0C;AAC1C;AACA,GAAG;AACH,aAAa,yCAAkB;;AAE/B;AACA,kDAAkD;AAClD,KAAK;AACL,2DAA2D;AAC3D;AACA,GAAG;AACH,cAAc,yCAAkB,oCAAoC,yCAAkB;;AAEtF;;AAEA;AACA,yEAAyE;AACzE,KAAK;AACL,kFAAkF;AAClF;AACA,GAAG;AACH,uBAAuB;;AAEvB,eAAe,yCAAkB;AACjC,gFAAgF;;AAEhF;AACA,qDAAqD;AACrD,KAAK;AACL,8DAA8D;AAC9D;AACA;;AAEA;AACA,E;;;;;;;;;;;;;ACnIA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,mBAAmB,kEAAS,0BAA0B,kEAAS;AAC/D,OAAO;AACP;AACA;AACA,mBAAmB,kEAAS,sBAAsB,kEAAS;AAC3D,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,aAAa,yCAAkB,4BAA4B,yCAAkB;AAC7E;AACA,yCAAyC;;AAEzC,+BAA+B,yCAAkB;AACjD,gBAAgB,yCAAkB,kDAAkD,kCAAkC,2CAA2C,2DAA2D,mBAAmB,yCAAyC,8FAA8F,mBAAmB,gBAAgB,uCAAuC,8DAA8D,gBAAgB,WAAW;AACzhB;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC9CA;AAAA;AAAwD;AACxD;AACA;AACA;;AAEA,+CAA+C,kEAAS,oCAAoC,kEAAS;AACrG;AACA,KAAK;AACL;AACA,4FAA4F,kEAAS;AACrG;AACA;AACA,oDAAoD;;AAEpD;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,gDAAgD;;AAEhD;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,cAAc,yCAAkB,6BAA6B,yCAAkB;AAC/E,kBAAkB,yCAAkB,6BAA6B,yCAAkB;AACnF;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACK;AACW;AACxD;AACA;AACA;;AAEA;AACA,qCAAqC;;AAErC,4CAA4C,qDAAa;AACzD;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,aAAa,yCAAkB;AAC/B,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AChFA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,mBAAmB,kEAAS,0BAA0B,kEAAS;AAC/D,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,qBAAqB;AACrB,E;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAA0C;AACc;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,kBAAkB,yCAAkB;AACpC,kBAAkB,yCAAkB,4BAA4B,yCAAkB;AAClF,kBAAkB,yCAAkB,0BAA0B,yCAAkB;AAChF,kBAAkB,yCAAkB,0BAA0B,yCAAkB;AAChF,eAAe,yCAAkB;AACjC,WAAW,yCAAkB;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,mBAAmB,qBAAqB,uCAAuC;AAC7H,GAAG;AACH;AACA;;AAEA;AACA;AACA,iBAAiB,yCAAkB;AACnC,uDAAuD;AACvD;;AAEA;;AAEA;AACA;AACA,eAAe,yCAAkB;AACjC,sDAAsD;AACtD,KAAK;AACL;;;AAGA,iBAAiB,yCAAkB;AACnC;AACA,2DAA2D,kDAAkD,+CAA+C,WAAW,iEAAiE,8GAA8G,6DAA6D,6BAA6B,WAAW;AAC3b;;AAEA;AACA,E;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAA0C;AACc;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,kBAAkB,yCAAkB;AACpC,kBAAkB,yCAAkB,4BAA4B,yCAAkB;AAClF,eAAe,yCAAkB;AACjC,WAAW,yCAAkB;AAC7B,gBAAgB;;AAEhB;;AAEA;AACA;AACA,cAAc,yCAAkB;AAChC,oDAAoD;AACpD,GAAG;;;AAGH,iBAAiB,yCAAkB;AACnC,gEAAgE,gEAAgE,+BAA+B;AAC/J;AACA,E;;;;;;;;;;;;;AC5DA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;AACA,yCAAkB,mBAAmB,yCAAkB,qB;;;;;;;;;;;;;ACrCvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACM;AACQ;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;;AAEA;AACA;AACA,GAAG;AACH,cAAc,yCAAkB;AAChC;;AAEA,eAAe,yCAAkB;AACjC,gBAAgB;;AAEhB,gBAAgB,yCAAkB;AAClC;;AAEA;AACA;AACA,aAAa,yCAAkB;AAC/B,kDAAkD;AAClD;;AAEA,8CAA8C,kCAAkC,qBAAqB,+BAA+B;AACpI;AACA,E;;;;;;;;;;;;;AC5DA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,mBAAmB,kEAAS,sBAAsB,kEAAS;AAC3D,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,eAAe,yCAAkB;AACjC;AACA,sBAAsB,yCAAkB,qBAAqB,yCAAkB;AAC/E,kBAAkB,yCAAkB;;AAEpC;AACA;AACA,GAAG;;;AAGH,mBAAmB,yCAAkB,sEAAsE;;AAE3G,uBAAuB,yCAAkB;AACzC,mDAAmD,yCAAyC,uCAAuC,gEAAgE,wCAAwC,kEAAS,kCAAkC,eAAe,OAAO,2CAA2C,eAAe,qDAAqD;AAC3Z,E;;;;;;;;;;;;;ACtDA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kEAAS;AAC3B,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,aAAa,yCAAkB;AAC/B,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACnCA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,kBAAkB,kEAAS;AAC3B,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,kBAAkB,yCAAkB,6BAA6B,yCAAkB,0BAA0B;;AAE7G,gBAAgB,yCAAkB;AAClC,6CAA6C;AAC7C;AACA,E;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACC;AACH;AACS;AACK;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,aAAa,kDAAU;AACvB;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;;AAEA,IAAI,gEAAiB;;AAErB;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,cAAc,yCAAkB;AAChC,8FAA8F,8CAA8C,QAAQ;AACpJ,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAiD;AACO;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAiD;AACO;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACjDA;AAAA;AAAwD;AACxD;AACA;AACA,qCAAqC;;AAErC;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,sBAAsB;AACtB,E;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAqD;AACG;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,0DAAkB;AACnC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACC;AACL;AACW;AACK;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,aAAa,gDAAQ;AACrB;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;;AAEA,IAAI,gEAAiB;;AAErB;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,cAAc,yCAAkB;AAChC,0FAA0F,+BAA+B;AACzH;AACA,E;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAqD;AACG;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,0DAAkB;AACnC,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACoC;AACpB;AACxD;AACA;AACA,qCAAqC;;AAErC;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,0DAAkB;AACnC,OAAO;AACP;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,qEAAqB;AAC7B;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,mDAAmD;AACnD;AACA,E;;;;;;;;;;;;;AC3EA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACC;AACD;AACO;AACK;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,aAAa,oDAAY;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;;AAEA,IAAI,gEAAiB;;AAErB;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,cAAc,yCAAkB;AAChC,0FAA0F,+BAA+B;AACzH;AACA,E;;;;;;;;;;;;;AClEA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,6BAA6B;AAC7B,E;;;;;;;;;;;;;AC1CA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC3CA;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB,kC;;;;;;;;;;;;;ACvBlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACI;AACC;AACc;AAC3D;AACA;AACA;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,yCAAkB,6B;;;;;;;;;;;;;ACxDlB;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB,yB;;;;;;;;;;;;;ACvBlB;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB,oC;;;;;;;;;;;;;ACvBlB;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB,kC;;;;;;;;;;;;;ACvBlB;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB,0C;;;;;;;;;;;;;ACrBlB;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB,wC;;;;;;;;;;;;;ACvBlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACC;AACC;AACG;AACO;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,sBAAsB,kEAAS;AAC/B;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC;AACA,cAAc,2DAAW;AACzB;AACA;AACA;AACA,kDAAkD,sFAAsF,oBAAoB;AAC5J;AACA,E;;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAA8C;AACG;AACO;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC;AACA,cAAc,2DAAW;AACzB;AACA;AACA;AACA,mDAAmD,sFAAsF,oBAAoB;AAC7J;AACA,E;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAA8C;AACU;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC,cAAc,2DAAW;AACzB;AACA,kEAAkE;AAClE;AACA,E;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAA8C;AACU;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC,cAAc,2DAAW;AACzB;AACA,mEAAmE;AACnE;AACA,E;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAA8C;AACG;AACO;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,oBAAoB,kEAAS;AAC7B;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC;AACA,cAAc,2DAAW;AACzB;AACA;AACA;AACA,qDAAqD,yJAAyJ,qBAAqB;AACnO;AACA,E;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAA8C;AACU;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC,cAAc,2DAAW;AACzB;AACA,kEAAkE;AAClE;AACA,E;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAA8C;AACU;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC,cAAc,2DAAW;AACzB;AACA,mEAAmE;AACnE;AACA,E;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAA8C;AACU;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC,cAAc,2DAAW;AACzB;AACA,kEAAkE;AAClE;AACA,E;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAA8C;AACU;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC,cAAc,2DAAW;AACzB;AACA,mEAAmE;AACnE;AACA,E;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAiD;AACO;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAiD;AACO;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA,cAAc,yCAAkB,mCAAmC,yCAAkB;AACrF,kCAAkC,yDAAyD;AAC3F,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC3CA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,oCAAoC,yCAAkB;AACtD,E;;;;;;;;;;;;;AC3BA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,gCAAgC,yCAAkB;AAClD,E;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAiD;AACO;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA,2BAA2B,mCAAmC;AAC9D,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAiD;AACO;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA;AACA,2BAA2B,+DAA+D;AAC1F,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAiD;AACO;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA;AACA,cAAc,yCAAkB,mCAAmC,yCAAkB;AACrF,kCAAkC,qFAAqF;AACvH,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AChDA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,+BAA+B,yCAAkB;AACjD,E;;;;;;;;;;;;;AC3BA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,cAAc,yCAAkB;AAChC,mGAAmG,8BAA8B,EAAE;AACnI,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AClCA;AAAA;AAAwD;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,4BAA4B,yCAAkB;AAC9C,E;;;;;;;;;;;;;AC3BA;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,gBAAgB,yCAAkB,qCAAqC;AACvE;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAoD;AACO;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,iBAAiB,yCAAkB;AACnC;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAoD;AACO;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB,qCAAqC;AACvE;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAoD;AACO;AAC3D;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACvDA;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,E;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AACA;AACF;AACC;AACE;AACY;AACgB;AAC3E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,yDAAU;AACd;AACA,MAAM,wDAAc,wBAAwB,kEAAS;AACrD,KAAK;AACL;AACA,MAAM,wDAAc;AACpB,KAAK;AACL;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA;AACA,aAAa,yCAAkB;AAC/B,KAAK;AACL;;AAEA;AACA,E;;;;;;;;;;;;;AC/FA;AAAA;AAAA;AAAoD;AACO;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA,gBAAgB,yCAAkB,yCAAyC,kEAAS;AACpF,0BAA0B,yFAAyF,EAAE;AACrH;AACA,E;;;;;;;;;;;;;AC7CA;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,kCAAkC,yCAAkB;AACpD,E;;;;;;;;;;;;;AC3BA;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,gCAAgC,yCAAkB;AAClD,E;;;;;;;;;;;;;AC3BA;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,2BAA2B,yCAAkB;AAC7C,E;;;;;;;;;;;;;AC3BA;AAAA;AAA2D;AAC3D;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,cAAc,yCAAkB;AAChC,gBAAgB,yCAAkB,+BAA+B,yCAAkB;AACnF,qCAAqC;AACrC;AACA,E;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AACC;AACM;AACX;AACE;AACE;AACL;AACG;AACC;;AAE7C,qCAAqC,wEAAwE,0CAA0C,8CAA8C,MAAM,wEAAwE,GAAG,aAAa,EAAE,YAAY,cAAc,EAAE;;AAEjU,0CAA0C,kCAAkC,gCAAgC,EAAE,OAAO,wDAAwD,gBAAgB,uBAAuB,kDAAkD,kCAAkC,uDAAuD,iBAAiB,GAAG,EAAE,0CAA0C;;AAE/Z,gCAAgC,4EAA4E,iBAAiB,UAAU,GAAG,8BAA8B;;AAE1H;AACK;AACF;AACO;AACxD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,mEAAS;AACzB;AACA,gBAAgB,mEAAS;AACzB;AACA,gBAAgB,mEAAS;AACzB;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,eAAe,mEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,mEAAS;AAC/B,qBAAqB,mEAAS;AAC9B;AACA,GAAG;AACH;AACA;;AAEA,IAAI,iEAAiB;;AAErB;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA,yCAAkB;AAClB;;AAEA;AACA;AACA;;AAEA;AACA,iGAAiG;;AAEjG;AACA;AACA;AACA,2DAA2D,yDAAM;AACjE;AACA,GAAG;AACH;AACA;AACA;AACA,uBAAuB,yCAAkB;AACzC,8BAA8B,yCAAkB;AAChD,4EAA4E,uCAAuC,wSAAwS,EAAE,+CAA+C,kEAAkE,wDAAwD;AACtkB;AACA,E;;;;;;;;;;;;;ACjJA;AAAA;AAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAM;AACvB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,yCAAkB,kD;;;;;;;;;;;;;AC/BlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACC;AACC;AACQ;AACJ;AACO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,kEAAS,0BAA0B,kEAAmB,CAAC,wDAAM;AAC9E;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,yCAAkB;AAClB;AACA,E;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACG;AACC;AACC;AACW;AACgB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6DAAqB;AACtC,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,IAAI,wDAAc;AAClB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB,6DAAqB;;AAE7C;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yCAAkB,0C;;;;;;;;;;;;;ACrGlB;AAAA;AAAA;AAAA;AAAA;AAA4C;AACC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,yCAAkB,kD;;;;;;;;;;;;;AClClB;AAAA;AAAA;AAAA;AAAA;AAA4C;AACC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,yCAAkB,kD;;;;;;;;;;;;;AClClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AACN;AACE;AACE;AACE;AACH;AACC;AACC;AACyD;AACrD;AACO;AACxD;AACA;AACA,qCAAqC;;AAErC;AACA,GAAG;AACH;AACA;AACA,gBAAgB,mEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,mEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,mEAAS;AAC/B,qBAAqB,mEAAS;AAC9B;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,gEAAgB;AACxB,0BAA0B,wEAAwB;;AAElD;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,UAAU,gEAAgB;AAC1B;AACA,WAAW;AACX,SAAS;AACT;AACA,UAAU,gEAAgB;AAC1B;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA,QAAQ,gEAAgB;AACxB,0BAA0B,wEAAwB;;AAElD;AACA,SAAS;AACT;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA,0DAA0D,mEAAS;AACnE,8DAA8D;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,mEAAS,kBAAkB,mEAAS;;AAE3D,4BAA4B,4BAA4B;AACxD;AACA;AACA;;AAEA,iDAAiD,mEAAS;AAC1D,mEAAmE,mEAAS,yEAAyE,wDAAM;AAC3J;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,0EAA0E,wDAAM,qEAAqE,wDAAM;AAC3J,mBAAmB,uEAAuB;AAC1C;;AAEA,mBAAmB,4BAA4B;AAC/C;;AAEA;AACA;AACA;AACA,6BAA6B,mEAAS;;AAEtC;AACA;AACA,SAAS;AACT,kDAAkD,wDAAM;AACxD,SAAS;AACT,wCAAwC,wDAAM;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,UAAU,wDAAM;AAChB;AACA,OAAO;AACP,yBAAyB,wDAAM;AAC/B;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA,yCAAkB;AAClB,sBAAsB,yCAAkB;AACxC;AACA;AACA,eAAe,yCAAkB;AACjC;;AAEA;AACA,sBAAsB,yCAAkB;AACxC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gBAAgB,yCAAkB;AAClC;AACA;;AAEA;AACA;;AAEA,iBAAiB,yCAAkB;;AAEnC;AACA;;AAEA,mCAAmC,kYAAkY,EAAE;AACva;AACA,E;;;;;;;;;;;;;AClSA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACE;AACE;AACE;AACH;AACC;AACC;AAC2G;AACvG;AACO;AACxD;AACA;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,8BAA8B,6DAAqB;;AAEnD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,2BAA2B,6DAAqB;;AAEhD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP,QAAQ,gEAAgB;AACxB;;AAEA;;AAEA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA,QAAQ,gEAAgB;AACxB;AACA,SAAS;AACT;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2BAA2B,kEAAS,kBAAkB,kEAAS;AAC/D;AACA;AACA,oFAAoF,wDAAM;AAC1F,2FAA2F,wDAAM;AACjG;AACA,qBAAqB,uEAAuB;;AAE5C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,8DAA8D;;AAE9D;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,kEAAS;;AAE1C;AACA;AACA,aAAa;AACb,+CAA+C,wDAAM;AACrD,aAAa;AACb,qCAAqC,wDAAM;AAC3C;;AAEA;AACA,4CAA4C,kEAAS;AACrD,aAAa;AACb;AACA;AACA,WAAW,EAAE;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,0BAA0B,yEAAyB;AACnD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;;AAEA,8BAA8B;AAC9B,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,oBAAoB,wEAAwB;AAC5C;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA,yCAAkB;AAClB;AACA,E;;;;;;;;;;;;;ACtOA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACa;AACH;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL,mBAAmB,uBAAuB;AAC1C,wDAAwD,kEAAS;AACjE;AACA,0DAA0D,kEAAS;AACnE;AACA;AACA;;AAEA;AACA,sDAAsD,kEAAS;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,yDAAyD,kEAAS;;AAElE;;AAEA;;AAEA;AACA,OAAO;AACP;AACA,qEAAqE,kEAAS;;AAE9E;;AAEA,uEAAuE,kEAAS;;AAEhF;;AAEA;;AAEA;AACA,OAAO;;;AAGP;AACA;;AAEA;;AAEA;AACA,OAAO;;;AAGP;;AAEA;;AAEA;AACA;;AAEA,4CAA4C,oDAAY;AACxD;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA,qDAAqD;;;AAGrD;AACA,oBAAoB;;AAEpB;;AAEA;AACA;AACA,oDAAoD;;AAEpD;AACA,6BAA6B,iCAAiC;AAC9D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,4CAA4C,qDAAa;AACzD;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA;;AAEA;AACA,oBAAoB,yCAAkB,8BAA8B,yCAAkB,wBAAwB,qBAAqB;;AAEnI;AACA,4DAA4D,kBAAkB,yCAAkB,gDAAgD;AAChJ;AACA,GAAG;;AAEH;AACA,6BAA6B,kBAAkB,yCAAkB,8CAA8C;AAC/G;;AAEA;AACA,E;;;;;;;;;;;;;AC/OA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAS,oBAAoB,kEAAS;AACzD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACC;AACQ;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,yCAAkB,kBAAkB,yCAAkB;AACtG,kBAAkB,yCAAkB;AACpC,kBAAkB,yCAAkB;AACpC;AACA;AACA,E;;;;;;;;;;;;;ACrDA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,cAAc,yCAAkB;AAChC,kBAAkB,yCAAkB;AACpC;AACA;AACA,E;;;;;;;;;;;;;AClCA;AAAA;AAAiD;AACjD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,8DAAS;AAC/B,qBAAqB,8DAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,kBAAkB,yCAAkB;AACpC,E;;;;;;;;;;;;;AC3BA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,mBAAmB,kEAAS,kBAAkB,kEAAS;AACvD,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;;AAEA;AACA;AACA,YAAY,yCAAkB;AAC9B,GAAG;AACH;AACA,YAAY,yCAAkB;AAC9B;;AAEA,kBAAkB,yCAAkB;AACpC,kBAAkB,yCAAkB;AACpC;AACA;AACA,E;;;;;;;;;;;;;ACpDA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB,gBAAgB,kEAAS;AACzB,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,gBAAgB,yCAAkB,0BAA0B,yCAAkB;AAC9E,kBAAkB,yCAAkB,4BAA4B,yCAAkB;AAClF,kBAAkB,yCAAkB,4BAA4B,yCAAkB;AAClF;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC9CA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,eAAe,yCAAkB;AACjC,iBAAiB,yCAAkB;AACnC,oBAAoB,yCAAkB;AACtC,kBAAkB,yCAAkB;AACpC,kBAAkB,yCAAkB;;AAEpC;AACA;AACA;AACA;AACA,kBAAkB,yCAAkB;AACpC,kBAAkB,yCAAkB;AACpC,WAAW;;AAEX;AACA;AACA,kBAAkB,yCAAkB;AACpC;;AAEA;AACA;AACA,E;;;;;;;;;;;;;AC7DA;AAAA;AAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,kBAAkB,kEAAS;AAC3B,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,4CAA4C;;AAE5C,kBAAkB,yCAAkB;AACpC,kBAAkB,yCAAkB,6BAA6B,yCAAkB;AACnF,+DAA+D,gCAAgC,QAAQ,6CAA6C;AACpJ;AACA,E;;;;;;;;;;;;;AC3DA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;;AAEA;AACA;AACA,YAAY,yCAAkB;AAC9B,GAAG;AACH;AACA,YAAY,yCAAkB;AAC9B,GAAG;AACH;AACA,YAAY,yCAAkB;AAC9B,GAAG;AACH;AACA,YAAY,yCAAkB;AAC9B,GAAG;AACH;AACA,YAAY,yCAAkB;AAC9B,GAAG;AACH;AACA,YAAY,yCAAkB;AAC9B;;AAEA;AACA,E;;;;;;;;;;;;;ACvDA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,kBAAkB,yCAAkB,6BAA6B,yCAAkB;AACnF,kBAAkB,yCAAkB,2BAA2B,yCAAkB;AACjF,kBAAkB,yCAAkB,4BAA4B,yCAAkB;AAClF;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC5CA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,kBAAkB,yCAAkB,gCAAgC,yCAAkB;AACtF,kBAAkB,yCAAkB,+BAA+B,yCAAkB;AACrF;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACvCA;AAAA;AAAqD;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC9CA;AAAA;AAAqD;AACrD;AACA;AACA;AACA;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yCAAkB,wBAAwB,yCAAkB,a;;;;;;;;;;;;;AClB5D;AAAA;AAAA;AAAA;AAA2C;AACU;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,mBAAmB,kEAAS,oBAAoB,kEAAS,kBAAkB,kEAAS,sBAAsB,kEAAS,sBAAsB,kEAAS,4BAA4B,kEAAS,4BAA4B,kEAAS;AAC5N,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,cAAc,kEAAS;AACvB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,kBAAkB,yCAAkB,uCAAuC,yCAAkB;AAC7F;AACA;;AAEA;AACA;AACA,uBAAuB,yCAAkB;AACzC,kBAAkB,yCAAkB,oCAAoC,wHAAwH,kCAAkC,mBAAmB,uNAAuN,mCAAmC,mBAAmB,+GAA+G,uBAAuB,UAAU,iEAAiE,uCAAuC,uBAAuB,mBAAmB,8BAA8B,eAAe;AACj1B;AACA,kBAAkB,yCAAkB;AACpC,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH,kBAAkB,yCAAkB,+BAA+B,yCAAkB;AACrF;AACA;;AAEA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC7FA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,mBAAmB,kEAAS,kBAAkB,kEAAS,kBAAkB,kEAAS,kBAAkB,kEAAS,0BAA0B,kEAAS,wBAAwB,kEAAS,qBAAqB,kEAAS,qCAAqC,kEAAS;AAC7P,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;;AAEA;AACA,WAAW,yCAAkB,4BAA4B,yCAAkB;AAC3E,2CAA2C,cAAc,EAAE;AAC3D,GAAG;AACH,WAAW,yCAAkB,4BAA4B,yCAAkB;AAC3E;AACA,GAAG;AACH,WAAW,yCAAkB,4BAA4B,yCAAkB;AAC3E;AACA,GAAG;AACH,uBAAuB,yCAAkB,6CAA6C,yCAAkB,yCAAyC,uDAAuD,oCAAoC,oBAAoB,kBAAkB,eAAe;AACjS,WAAW,yCAAkB,4BAA4B,yCAAkB;AAC3E;AACA,GAAG;AACH,wBAAwB,yCAAkB,+CAA+C,yCAAkB,yCAAyC,6DAA6D,mDAAmD,oBAAoB,EAAE,0CAA0C,kCAAkC,mBAAmB,iDAAiD,oCAAoC,oBAAoB,EAAE,kDAAkD,yGAAyG,mBAAmB,OAAO,mEAAmE,mBAAmB,eAAe;;AAE9vB,WAAW,yCAAkB,4BAA4B,yCAAkB;AAC3E;AACA,GAAG;AACH,yBAAyB,yCAAkB,8CAA8C,yCAAkB,yCAAyC,iCAAiC,kCAAkC,mCAAmC,mCAAmC,mBAAmB,OAAO,4CAA4C,wCAAwC,oCAAoC,uCAAuC,mBAAmB,OAAO,uDAAuD,yDAAyD,2CAA2C,oCAAoC,2BAA2B,uBAAuB,qCAAqC,kDAAkD,wCAAwC,uBAAuB,+DAA+D,mBAAmB,mDAAmD,mBAAmB,OAAO,qDAAqD,mDAAmD,uBAAuB,mBAAmB,iCAAiC,eAAe;;AAExtC,WAAW,yCAAkB,4BAA4B,yCAAkB;AAC3E;AACA,GAAG;AACH,yBAAyB,yCAAkB,0DAA0D,yCAAkB,0CAA0C,yCAAyC,2BAA2B,kCAAkC,mBAAmB,8DAA8D,mCAAmC,mBAAmB,MAAM,qCAAqC,iCAAiC,OAAO,OAAO,iEAAiE,mBAAmB,0CAA0C,6CAA6C,eAAe;;AAElqB,WAAW,yCAAkB,4BAA4B,yCAAkB;AAC3E;AACA,GAAG;AACH,yBAAyB,yCAAkB,mDAAmD,yCAAkB,uCAAuC,kEAAkE,iCAAiC,eAAe;;AAEzQ,WAAW,yCAAkB,4BAA4B,yCAAkB;AAC3E;AACA;;AAEA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC1EA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,2BAA2B,yCAAkB;AAC7C,E;;;;;;;;;;;;;AC3BA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,kBAAkB,yCAAkB,4BAA4B,yCAAkB;AAClF,kBAAkB,yCAAkB,0BAA0B,yCAAkB,qBAAqB;;AAErG,qBAAqB,yCAAkB;AACvC,gBAAgB,yCAAkB,uCAAuC,0BAA0B,qFAAqF,wBAAwB,wBAAwB,eAAe,iEAAiE,WAAW;AACnU;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC1CA;AAAA;AAAqD;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,kBAAkB,yCAAkB;AACpC;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACrDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACC;AACQ;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,mBAAmB,kEAAS,2BAA2B,kEAAS;AAChE,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;;AAEA;AACA;AACA,UAAU,yCAAkB,2BAA2B,yCAAkB;;AAEzE;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,yCAAkB;AACpC;;AAEA;AACA,UAAU,yCAAkB,2BAA2B,yCAAkB;AACzE,GAAG;AACH,UAAU,yCAAkB,2BAA2B,yCAAkB;AACzE,GAAG;AACH;;;AAGA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA,kBAAkB,yCAAkB;AACpC,GAAG;AACH;;;AAGA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACrGA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;AACA,yCAAkB,aAAa,yCAAkB,a;;;;;;;;;;;;;ACjCjD;AAAA;AAAiD;AACjD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,8DAAS;AAC/B,qBAAqB,8DAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,aAAa,yCAAkB;AAC/B,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACjCA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,kBAAkB,kEAAS;AAC3B,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA,IAAI;;;AAGJ,gBAAgB,yCAAkB;AAClC,cAAc,yCAAkB,4BAA4B,yCAAkB;AAC9E,uDAAuD;AACvD;AACA,E;;;;;;;;;;;;;ACjDA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,mBAAmB,kEAAS,+BAA+B,kEAAS,+BAA+B,kEAAS;AAC5G,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yCAAkB,gBAAgB,yCAAkB;AACjF,aAAa,yCAAkB;AAC/B;;AAEA;AACA;AACA,GAAG;AACH;AACA,uBAAuB,yCAAkB;AACzC,kBAAkB,yCAAkB,sCAAsC,0EAA0E,0EAA0E,mBAAmB,YAAY,eAAe;AAC5Q;AACA;;AAEA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACC;AACQ;AACrD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,mBAAmB,kEAAS,8BAA8B,kEAAS,qCAAqC,kEAAS,6BAA6B,kEAAS,2BAA2B,kEAAS;AAC3L,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,uCAAuC,yCAAkB,cAAc,yCAAkB;AACzF,aAAa,yCAAkB;AAC/B;;AAEA;AACA,aAAa,yCAAkB,0BAA0B;;AAEzD;AACA,GAAG;AACH,cAAc,yCAAkB;;AAEhC;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,uBAAuB,yCAAkB;AACzC,kBAAkB,yCAAkB,uCAAuC,kEAAkE,iCAAiC,eAAe;AAC7L;AACA;;AAEA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AClGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACE;AACC;AACQ;AACrD;AACA;AACA,6BAA6B,kEAAS,iCAAiC,kEAAS,2CAA2C,kEAAS;AACpI,6BAA6B,kEAAS,iCAAiC,kEAAS,2CAA2C,kEAAS;AACpI;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,aAAa,yCAAkB,8BAA8B,yCAAkB;AAC/E;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,YAAY,yCAAkB;AAC9B,KAAK;AACL,YAAY,yCAAkB,qCAAqC,yCAAkB;AACrF;AACA,KAAK;AACL;AACA;;AAEA;AACA,YAAY,yCAAkB;AAC9B,KAAK;AACL,YAAY,yCAAkB,qCAAqC,yCAAkB;AACrF;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH,UAAU,yCAAkB;AAC5B,UAAU,yCAAkB,2BAA2B;;AAEvD;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;;AAEN,uBAAuB,yCAAkB;AACzC,kBAAkB,yCAAkB,iRAAiR,8EAA8E,4EAA4E,wDAAwD,mBAAmB;AAC1hB;AACA;;AAEA;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACzJA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;;AAEA,OAAO;AACP;AACA;AACA,mBAAmB,kEAAS,sBAAsB,kEAAS;AAC3D,OAAO;AACP;AACA;;AAEA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,kBAAkB,yCAAkB,4BAA4B,yCAAkB;AAClF,aAAa,yCAAkB,6BAA6B,yCAAkB;AAC9E;;AAEA;AACA,2BAA2B,yCAAkB;AAC7C;;AAEA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACG;AACO;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,aAAa,yCAAkB,6BAA6B,yCAAkB;AAC9E;AACA;AACA,GAAG;AACH;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAyC;AACY;AACrD;AACA;AACA;AACA,4CAA4C,oDAAY;AACxD;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA;AACA,kBAAkB,kEAAS;AAC3B,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA,gBAAgB,yCAAkB;AAClC;AACA;;AAEA;AACA,gBAAgB,yCAAkB;;AAElC;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,4BAA4B;AAC5B,GAAG;AACH,sDAAsD;AACtD;;AAEA;AACA,E;;;;;;;;;;;;;ACtHA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,aAAa,yCAAkB,6BAA6B,yCAAkB;AAC9E;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACjCA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB,YAAY,yCAAkB,4BAA4B,yCAAkB;AAC5E,wCAAwC;AACxC;AACA,E;;;;;;;;;;;;;ACjCA;AAAA;AAAqD;AACrD;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,mBAAmB,kEAAS,sBAAsB,kEAAS;AAC3D,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,oBAAoB,kEAAS;AAC7B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;;AAEA;AACA;AACA;AACA,UAAU,yCAAkB;AAC5B,GAAG;AACH;AACA,UAAU,yCAAkB,4BAA4B,yCAAkB;AAC1E;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACE;AACO;AACjD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,qDAAa;AACzD;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,8DAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,8DAAS;AAC/B,qBAAqB,8DAAS;AAC9B;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,yCAAkB;AAClB,aAAa,yCAAkB;AAC/B,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC/EA;AAAA;AAAqD;AACrD;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,gBAAgB,kEAAS;AACzB;AACA;AACA;AACA,mBAAmB,kEAAS,0BAA0B,kEAAS,yBAAyB,kEAAS;AACjG,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAS;AACxB;AACA;AACA,GAAG;AACH;AACA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B;AACA;AACA;;AAEA,yCAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yCAAkB,4BAA4B,yCAAkB;AAC7E;AACA,gBAAgB,yCAAkB;AAClC,E;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,yCAAkB,qCAAqC,yCAAkB;AAChG;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,qBAAuB;AAClC,GAAG;AACH;AACA;AACA,yCAAyC;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;;ACnIA;AAAA;AAAkD;AAClD;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,eAAe,SAAS;AACxB;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,eAAe,SAAS;AACxB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;;;AAGA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAS;;AAEnC;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA,4BAA4B,kEAAS;;AAErC;AACA;AACA;;AAEA;AACA;AACA,GAAG;;;AAGH;AACA;AACA,4BAA4B,kEAAS,mBAAmB,kEAAS;AACjE;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,oCAAoC;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA,E;;;;;;;;;;;;ACtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;;ACxBA;AAAA;AAAkD;AAClD;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,kEAAS;AAC/B,qBAAqB,kEAAS;AAC9B,qBAAqB,kEAAS;AAC9B,oBAAoB,kEAAS;AAC7B,kBAAkB,kEAAS;AAC3B,WAAW,kEAAS;AACpB,UAAU,kEAAS;AACnB,eAAe,kEAAS;AACxB,eAAe,kEAAS;AACxB,UAAU,kEAAS;AACnB,gBAAgB,kEAAS;AACzB,UAAU,kEAAS;AACnB,mBAAmB,kEAAS;AAC5B,YAAY,kEAAS;AACrB,mBAAmB,kEAAS;AAC5B,UAAU,kEAAS;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+B;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACG;AACA;AACO;AAClD;;AAEA;AACA;AACA,WAAW,mBAAmB;AAC9B,YAAY,kBAAkB;AAC9B;;AAEA;AACA;AACA,mBAAmB;;AAEnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;;AAE7C;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;;AAEA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,kBAAkB;AAC7B;AACA;;;AAGA;AACA,+CAA+C;;AAE/C,YAAY,kEAAS;AACrB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACG;;AAE9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAgD;;AAEhD;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB;AACA,WAAW,SAAS;AACpB,aAAa;AACb;AACA;AACA;AACA,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA,YAAY,oBAAoB;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH,aAAa,WAAW;;;AAGxB,2DAA2D;;AAE3D;AACA;AACA;AACA,aAAa,WAAW;;;AAGxB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,mHAAmH;;AAEnH;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;;;AAGA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,oDAAoD;AACpD;AACA;AACA;AACA;;;AAGA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;;;AAGA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,0D;;;;;;;;;;;;ACnOA;;AAEA;AACA;AACA,WAAW,kBAAkB;AAC7B,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yDAAyD;;AAEzD;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA,6DAA6D;;AAE7D,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,YAAY,eAAe;AAC3B;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;;AAGH,6CAA6C;AAC7C;;AAEA,2CAA2C;AAC3C;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;;AAGA,mEAAmE;AACnE;;AAEA,qEAAqE;AACrE;;AAEA,2FAA2F;AAC3F;;AAEA,6FAA6F;AAC7F;;AAEA,kGAAkG;;AAElG;AACA;AACA;AACA,E;;;;;;;;;;;;AC5FA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8DAA8D;AAC9D;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;;AAEA;AACA,E;;;;;;;;;;;;AClCA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,E;;;;;;;;;;;;;AChCA;AAAA;AAAA;AACkD;AAClD;AACA;AACA,WAAW,mBAAmB;AAC9B,YAAY,kBAAkB;AAC9B;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;AACA;AACA,kDAAkD,kEAAS;AAC3D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,mDAAmD,kEAAS;;AAE5D;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,mBAAmB,0BAA0B;AAC7C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,mBAAmB;AAC9B,YAAY,cAAc;AAC1B;;;AAGA;AACA;AACA;;AAEA,iBAAiB,mBAAmB;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;AACF;;;AAGA;AACA,6CAA6C;;AAE7C;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA,WAAW,sBAAsB;AACjC;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,gFAAgF;;AAEhF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;;AC7KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACG;AACL;AACG;AACA;AACH;AACI;AACC;AACH;AACE;AACE;AACL;AACC;AAChB;AACO;AACsB;AACjB;AACY;AAClD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA,kEAAkE;;AAElE;AACA;AACA,iCAAiC,mEAAS;AAC1C;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,MAAM,+CAAM;AACZ;AACA,KAAK;AACL,GAAG;AACH,iDAAiD;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,yCAAyC;AACzC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,MAAM,+CAAM;AACZ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;;AAEA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL,qDAAqD;;AAErD;AACA;AACA;AACA;AACA;;AAEA,EAAE,+CAAM;AACR;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,OAAO;AACnB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,yBAAyB;AACpC;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C;;AAE1C;AACA;;AAEA,UAAU,+CAAM;AAChB,QAAQ,+CAAM;AACd;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI,+CAAM;AACV,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,gCAAgC;AACvD;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU,+CAAM;AAChB;AACA,SAAS;AACT;AACA,UAAU,+CAAM;AAChB;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,MAAM,+CAAM;AACZ;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,iDAAQ,QAAQ,6CAAK,eAAe,gEAAS;AACjD;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI,iDAAQ,QAAQ,6CAAK,eAAe,gEAAS;AACjD;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK,EAAE;;AAEP,oDAAoD,qBAAuB;AAC3E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,oCAAoC,EAAE;AACtC;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,yBAAyB;AAC7B,WAAW,KAAK;AAChB;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,EAAE;;AAET;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA,OAAO;;AAEP;AACA;AACA,GAAG;AACH;AACA,E;;;;;;;;;;;;;ACnkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACE;AACE;AACL;;AAEzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,YAAY,gCAAgC;AAC5C;AACA;AACA;AACA,yCAAyC;;AAEzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG,EAAE;;AAEL;AACA;AACA;AACA,GAAG;AACH;AACA,E;;;;;;;;;;;;ACvCA,yG;;;;;;;;;;;;ACAA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;;;AAGH,0CAA0C;;AAE1C,2CAA2C;;AAE3C,mDAAmD;;AAEnD;AACA,+DAA+D;;AAE/D,yBAAyB;AACzB;;AAEA;AACA;AACA,kCAAkC;AAClC;;AAEA;AACA,mDAAmD;;AAEnD;AACA,8CAA8C;;AAE9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,E;;;;;;;;;;;;AC9EA;AACA;AACA;AACA,mC;;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACF;AACE;AACH;AACJ;AACS;AACD;AACL;AACH;;AAErC,4EAA4E,MAAM,0BAA0B,wBAAwB,EAAE,gBAAgB,eAAe,QAAQ,EAAE,iBAAiB,gBAAgB,EAAE,OAAO,4CAA4C,EAAE;;AAEvQ,gCAAgC,qBAAqB,mCAAmC,gDAAgD,gCAAgC,wBAAwB,wEAAwE,EAAE,uBAAuB,uEAAuE,EAAE,kBAAkB,EAAE,EAAE,GAAG;;AAEjX;AACD;AAC6O;AAC3L;AACC;AACrC;AACU;AAC2B;AACnB;AACc;AACxD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;;AAEtE;AACA,yBAAyB,qBAAuB;AAChD;AACA,aAAa;;AAEb;AACA;AACA;AACA,yBAAyB,qBAAuB;AAChD;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,qBAAqB,qBAAuB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,+DAA+D;;AAE/D;AACA;AACA;AACA,iEAAiE;AACjE;AACA,aAAa,EAAE;;AAEf;AACA;;AAEA;AACA;AACA,sEAAsE;;AAEtE;AACA;AACA;AACA;AACA,2CAA2C;;AAE3C,oDAAoD;;AAEpD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,2DAAW;AACpB,MAAM,uDAAO,QAAQ,mEAAS;AAC9B;AACA,GAAG;AACH;;AAEA;AACA;AACA,YAAY,wEAAwB;AACpC,GAAG;AACH;AACA;AACA;;AAEA,IAAI,uFAAU;AACd,aAAa,mEAAS;AACtB,aAAa,mEAAS;AACtB;AACA,cAAc,mEAAS;AACvB;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK,qBAAqB,sBAAsB;AAChD;AACA;;AAEA;AACA;;AAEO;AACP,OAAO,iFAAiC;AACxC;AACA;AACA;AACA;AACA,IAAI,qEAAqB;AACzB,GAAG;AACH,EAAE,oEAAoB;AACtB;AACA,EAAE,+DAAe;AACjB,IAAI,kEAAkB;AACtB;AACA,IAAI,yDAAc,wBAAwB,mEAAS;AACnD,GAAG;AACH;AACA;AACA,GAAG;AACH;AACO;AACP;AACA;AACA;;AAEA,OAAO,iFAAiC;AACxC;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE,+DAAe;AACjB;AACA,aAAa,6DAAa;AAC1B,KAAK;AACL;AACA,KAAK;AACL,IAAI,6DAAa;AACjB,IAAI,kEAAkB;AACtB,IAAI,yDAAc,wBAAwB,mEAAS;AACnD,GAAG;AACH;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB,GAAG;AACH,aAAa,qEAAW;;AAExB;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG,iBAAiB;;;AAGpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,mEAAS;AACzB;AACA;AACA;AACA;;AAEA,YAAY,oDAAK;AACjB;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B,+DAA+D;;AAE/D;AACA;AACA;AACA,4BAA4B,6DAAY;AACxC;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,mDAAG;AACnB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,cAAc,mDAAG;AACjB;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,mCAAmC;;AAEnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL,YAAY,6DAAW,aAAa,mEAAS;AAC7C;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,YAAY,6DAAW,aAAa,mEAAS;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAiB;;AAErB,IAAI,oDAAK;AACT;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+JAA+J,8EAA8E,wCAAwC,wBAAwB,gBAAgB,GAAG,2CAA2C,8GAA8G,eAAe,mFAAmF,6DAA6D,uBAAuB,8EAA8E,IAAI,GAAG,wEAAwE,MAAM,yCAAkB,uFAAuF,eAAe,kCAAkC,wEAAwE,oCAAoC,yDAAyD,IAAI,2BAA2B,oCAAoC,yDAAyD,IAAI,kCAAkC,4DAA4D,WAAW,IAAI,GAAG;AACj2C;;AAEA;AACA;AACA,+BAA+B,gFAAW;AAC1C;AACA,UAAU,yDAAc;;AAExB;AACA,SAAS;AACT;AACA,KAAK;AACL,MAAM,yDAAc;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;;;;;;;;;;;;;;ACxhBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiE;AAC7B;AACM;AACI;AACE;AACL;AACN;AACA;AACG;AACM;AACF;AACJ;AACI;AACC;AACF;AACD;AACE;AACE;AACL;;AAEzC,4EAA4E,MAAM,0BAA0B,wBAAwB,EAAE,gBAAgB,eAAe,QAAQ,EAAE,iBAAiB,gBAAgB,EAAE,OAAO,4CAA4C,EAAE;;AAEvQ,gCAAgC,qBAAqB,mCAAmC,gDAAgD,gCAAgC,wBAAwB,wEAAwE,EAAE,uBAAuB,uEAAuE,EAAE,kBAAkB,EAAE,EAAE,GAAG;;AAEnY,0CAA0C,gCAAgC,oCAAoC,oDAAoD,8DAA8D,gEAAgE,EAAE,EAAE,gCAAgC,EAAE,aAAa;;AAEnV,gCAAgC,gBAAgB,sBAAsB,OAAO,uDAAuD,aAAa,+CAA+C,2CAA2C,EAAE,EAAE,EAAE,6CAA6C,2EAA2E,EAAE,OAAO,yCAAyC,kFAAkF,EAAE,EAAE,EAAE,EAAE,eAAe;;AAEpgB,2CAA2C,kBAAkB,kCAAkC,qEAAqE,EAAE,EAAE,OAAO,kBAAkB,EAAE,YAAY;;AAE5K;AACW;AACN;AACwB;AACb;AACJ;AACgB;AACM;AACrE,wBAAwB,mEAAS;AAC1B;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE,kDAAS;AACX;AACO;AACP;AACA;;AAEA;AACA,mBAAmB,yDAAM;AACzB;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,SAAS,mEAAmB;AAC5B;;AAEO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACO;AACP,cAAc,yCAAkB,2BAA2B,yCAAkB;;AAE7E;AACA,gBAAgB,mEAAS;AACzB;;AAEA;AACA;AACO;;AAEP;AACA;AACA;;AAEA,WAAW,+DAAS,uDAAuD,2BAA2B,+EAA+E;AACrL,GAAG,IAAI;AACP;;AAEA;AACA;AACA;;AAEA,iGAAiG,2BAA2B,wFAAwF;AACpN,GAAG,IAAI;AACP;;AAEA;AACA;AACA;;AAEA,gGAAgG,2BAA2B,+EAA+E;AAC1M,GAAG,IAAI;AACP;AACA;;;AAGA;AACA;AACA,gCAAgC,+DAAS;AACzC;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,kCAAkC,+DAAS;AAC3C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,+DAAS;AAC3C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,4BAA4B,+DAAS;AACrC,uBAAuB,yDAAM;AAC7B;AACA,KAAK;AACL,cAAc,yDAAM;AACpB,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAW,yDAAM;AACjB,cAAc,yDAAM;AACpB;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,yDAAM;AAC3B,0BAA0B,yDAAM;AAChC,GAAG;AACH;;AAEA;AACA;AACA,cAAc,yDAAM;AACpB,QAAQ,yDAAM;AACd;AACA;;AAEA;AACA,GAAG,EAAE;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEO;AACP,2BAA2B,mEAAS,kBAAkB,mEAAS,oBAAoB,mEAAS,oBAAoB,mEAAS,kBAAkB,mEAAS;AACpJ;AACA,WAAW,mEAAS;AACpB;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL,GAAG,EAAE;;AAEL;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACO;AACP;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,kBAAkB,wEAAY;;AAE9B;AACA;AACA;;AAEA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;;AAEA;AACA;;AAEA,SAAS,yDAAc;AACvB,MAAM,yDAAc;AACpB;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA,CAAC;AACM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oFAAuB;AACzC,wBAAwB,wEAAY;;AAEpC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,2EAAe;AAC3B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA,iBAAiB;AACjB,eAAe;;;AAGf;AACA;AACA,eAAe;AACf;AACA;AACA,iBAAiB;AACjB,eAAe;AACf;AACA;AACA,cAAc,yDAAc;AAC5B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA,CAAC;AACM;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,4DAA4D;AAC5D;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA,SAAS;AACT,OAAO;;;AAGP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,yCAAyC;AACzC,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;;AAEA;AACA;AACA;;AAEA,WAAW,yDAAc;AACzB,QAAQ,yDAAc,+BAA+B;AACrD;AACA,UAAU,yDAAc,sBAAsB;;AAE9C;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH,E;;;;;;;;;;;;;ACpnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACL;AACO;AACD;AACF;AACD;AACI;AACC;AACA;AACL;AACE;AACE;AACE;AACF;;AAE5C,+CAA+C,0DAA0D,2CAA2C,iCAAiC;;AAE5H;AACjB;AACO;AACgB;AACxD;AACP,SAAS,yDAAM;AACf;AACO;AACP;AACA;AACA,GAAG;AACH;AACO;AACP;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACO;AACP;AACA,4DAA4D,8DAAqB;AACjF;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,EAAE;AACF;;AAEO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,yDAAM;AACpD,mBAAmB,yDAAM;AACzB,WAAW,EAAE;;AAEb;AACA;AACA,WAAW,EAAE;;AAEb;AACA;AACA,0DAA0D;AAC1D;AACA,wCAAwC,8DAAqB;AAC7D;AACA;AACA;AACA;AACA,mBAAmB;AACnB,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA,GAAG;;AAEH;AACA,uBAAuB,mEAAS;AAChC,IAAI,yDAAc;;AAElB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEO;AACP;AACA;AACA;AACA,GAAG;AACH;AACO;AACP,4BAA4B;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,EAAE;;AAEL;AACA;AACO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACO;AACP;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA,GAAG;AACH;AACO;AACP;AACA;AACA,GAAG;AACH;AACO;AACP;AACA;AACA,GAAG;AACH;AACO;AACP,SAAS,yDAAM;AACf;AACA,GAAG;AACH;AACA,GAAG;AACH;AACO;AACP,gBAAgB;;AAEhB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mBAAmB;;AAEnB;AACA;;AAEA;AACA;AACO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAE,uDAAM;AACR;AACA,oBAAoB;AACpB;AACA,GAAG;AACH;AACO;AACP;AACA;AACA,MAAM,yDAAc;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;;AAEA;AACA;AACA,EAAE;;;AAGF;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;;AAED,2CAA2C;;AAE3C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;;AAED;AACO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACO;AACP;AACA;AACA,GAAG;AACH;AACO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA,qBAAqB,cAAc;AACnC;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA,EAAE;;AAEK;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,+CAA+C;;AAE/C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,GAAG;AACH;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL,aAAa,mEAAS;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,eAAe,mEAAS;AACxB;AACA,KAAK;AACL,aAAa,mEAAS;AACtB;AACA,GAAG;AACH;;AAEO;AACP;AACA;;AAEA;AACA;AACA;;AAEA,oCAAoC,EAAE;AACtC,aAAa,mEAAS;AACtB,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,eAAe,mEAAS;AACxB,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA,yBAAyB,mEAAS;AAClC,WAAW;AACX,yBAAyB,mEAAS;AAClC;;AAEA;AACA,SAAS;AACT;AACA;AACA,+BAA+B;;AAE/B;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,GAAG;AACH;AACO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,E;;;;;;;;;;;;;ACpmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACE;AACE;AACL;AACO;AACF;;AAE9C;;AAEA,4EAA4E,yBAAyB,0CAA0C,yLAAyL,EAAE;;AAE1U,uFAAuF,eAAe,iDAAiD,6BAA6B,EAAE,EAAE,qCAAqC,yCAAyC,2CAA2C,sBAAsB,EAAE,wEAAwE,kDAAkD,EAAE,QAAQ,8CAA8C,yEAAyE,8BAA8B,EAAE,mCAAmC,+CAA+C,aAAa,EAAE,aAAa;;AAEltB,yDAAyD,iRAAiR;;AAE1U;AAC0C;AACK;AAC/C,0BAA0B,2CAAM,gBAAgB,2CAAM,gBAAgB,2CAAM,gBAAgB,2CAAM;AAClG;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,kEAAS;AAC5C;AACA,OAAO;AACP;;AAEA,oCAAoC,kEAAS;;AAE7C;AACA;;AAEA;AACA;;AAEA,0BAA0B,uDAAU;;AAEpC;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B,uDAAU;AACtC;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,qBAAuB;AACpC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA,yGAAyG;;AAEzG;AACA,mEAAmE;;AAEnE;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,CAAC,0FAA0F,+CAAU;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,+EAA+E,+CAAU;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,6EAA6E,+CAAU;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;ACvLD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACM;AACD;AACL;AACK;AACE;AACE;AACL;AACG;AACC;AACA;AACL;;AAExC;;AAEA,4EAA4E,MAAM,0BAA0B,wBAAwB,EAAE,gBAAgB,eAAe,QAAQ,EAAE,iBAAiB,gBAAgB,EAAE,OAAO,4CAA4C,EAAE;;AAEvQ,gCAAgC,qBAAqB,mCAAmC,gDAAgD,gCAAgC,wBAAwB,wEAAwE,EAAE,uBAAuB,uEAAuE,EAAE,kBAAkB,EAAE,EAAE,GAAG;;AAEnY,4EAA4E,yBAAyB,0CAA0C,yLAAyL,EAAE;;AAE1U,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE;;AAE3T,6DAA6D,sEAAsE,8DAA8D,oBAAoB;;AAErN,uFAAuF,eAAe,iDAAiD,6BAA6B,EAAE,EAAE,qCAAqC,yCAAyC,2CAA2C,sBAAsB,EAAE,wEAAwE,kDAAkD,EAAE,QAAQ,8CAA8C,yEAAyE,8BAA8B,EAAE,mCAAmC,+CAA+C,aAAa,EAAE,aAAa;;AAEltB,yDAAyD,iRAAiR;;AAEvS;AACiB;AACA;AACW;AACmK;AACvL;AAC3C,2BAA2B,4CAAM,gBAAgB,4CAAM,gBAAgB,4CAAM,gBAAgB,4CAAM,gBAAgB,4CAAM,gBAAgB,4CAAM,gBAAgB,4CAAM,gBAAgB,4CAAM,gBAAgB,4CAAM,iBAAiB,4CAAM,iBAAiB,4CAAM,iBAAiB,4CAAM,iBAAiB,4CAAM,iBAAiB,4CAAM,iBAAiB,4CAAM,iBAAiB,4CAAM;AAClX;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,WAAW,yFAAiC;AAC5C;AACA;;AAEA;AACA;AACA;;AAEA;AACA,MAAM,uEAAe;AACrB;AACA,iBAAiB,qEAAa;AAC9B,SAAS;AACT;AACA,SAAS;AACT,QAAQ,qEAAa;AACrB,QAAQ,0EAAkB;AAC1B,QAAQ,yDAAc,wBAAwB,+DAAS;AACvD,OAAO;AACP;AACA,OAAO;AACP;;AAEA;AACA,WAAW,yFAAiC;AAC5C;AACA;AACA;AACA;AACA,QAAQ,6EAAqB;AAC7B,OAAO;AACP,MAAM,4EAAoB;AAC1B;AACA,MAAM,uEAAe;AACrB,QAAQ,0EAAkB;AAC1B;AACA,QAAQ,yDAAc,wBAAwB,+DAAS;AACvD,OAAO;AACP;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA,gBAAgB,gFAAwB;AACxC,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,+DAAS;AACtB;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,YAAY,wEAAkB;AAC9B;;AAEA;;AAEA;AACA;AACA,KAAK;AACL,YAAY,wEAAkB;AAC9B;;AAEA;;AAEA;AACA,YAAY,wEAAkB;AAC9B;;AAEA;AACA;;AAEA;AACA,cAAc,wEAAkB;AAChC;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,YAAY,wEAAkB,aAAa,+DAAS;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC,2FAA2F,gDAAU;AACtG;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kFAAkF,gDAAU;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kFAAkF,gDAAU;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gFAAgF,gDAAU;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4EAA4E,gDAAU;AACvF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;;AAEnD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD;AACpD,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,UAAU,yDAAc,qBAAqB,+DAAS;AACtD;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA,oDAAoD;AACpD,OAAO;AACP;AACA;AACA,QAAQ,yEAAiB;AACzB;AACA;AACA,0BAA0B;AAC1B,SAAS;AACT,QAAQ,kDAAS;AACjB;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,EAAE;;;AAGT;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,qCAAqC;;AAErC;AACA;AACA;AACA,CAAC,iEAAiE,8CAAQ,wJAAwJ,8CAAQ","file":"main.054469.hot-update.js","sourcesContent":["// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1567065053471\n      var cssReload = require(\"!../../bot/node_modules/css-hot-loader/hotModuleReplacement.js\")(module.id, {\"fileMap\":\"{fileName}\"});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);;\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1567065054015\n      var cssReload = require(\"!../../bot/node_modules/css-hot-loader/hotModuleReplacement.js\")(module.id, {\"fileMap\":\"{fileName}\"});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);;\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1567065053725\n      var cssReload = require(\"!../../bot/node_modules/css-hot-loader/hotModuleReplacement.js\")(module.id, {\"fileMap\":\"{fileName}\"});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);;\n    }\n  ","/**\n * @license\n * Visual Blocks Language\n *\n * Copyright 2012 Google Inc.\n * https://developers.google.com/blockly/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Helper functions for generating JavaScript for blocks.\n * @author fraser@google.com (Neil Fraser)\n */\n'use strict';\n\ngoog.provide('Blockly.JavaScript');\n\ngoog.require('Blockly.Generator');\n\n\n/**\n * JavaScript code generator.\n * @type {!Blockly.Generator}\n */\nBlockly.JavaScript = new Blockly.Generator('JavaScript');\n\n/**\n * List of illegal variable names.\n * This is not intended to be a security feature.  Blockly is 100% client-side,\n * so bypassing this list is trivial.  This is intended to prevent users from\n * accidentally clobbering a built-in object or function.\n * @private\n */\nBlockly.JavaScript.addReservedWords(\n    'Blockly,' +  // In case JS is evaled in the current window.\n    // https://developer.mozilla.org/en/JavaScript/Reference/Reserved_Words\n    'break,case,catch,continue,debugger,default,delete,do,else,finally,for,function,if,in,instanceof,new,return,switch,this,throw,try,typeof,var,void,while,with,' +\n    'class,enum,export,extends,import,super,implements,interface,let,package,private,protected,public,static,yield,' +\n    'const,null,true,false,' +\n    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects\n    'Array,ArrayBuffer,Boolean,Date,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Error,eval,EvalError,Float32Array,Float64Array,Function,Infinity,Int16Array,Int32Array,Int8Array,isFinite,isNaN,Iterator,JSON,Math,NaN,Number,Object,parseFloat,parseInt,RangeError,ReferenceError,RegExp,StopIteration,String,SyntaxError,TypeError,Uint16Array,Uint32Array,Uint8Array,Uint8ClampedArray,undefined,uneval,URIError,' +\n    // https://developer.mozilla.org/en/DOM/window\n    'applicationCache,closed,Components,content,_content,controllers,crypto,defaultStatus,dialogArguments,directories,document,frameElement,frames,fullScreen,globalStorage,history,innerHeight,innerWidth,length,location,locationbar,localStorage,menubar,messageManager,mozAnimationStartTime,mozInnerScreenX,mozInnerScreenY,mozPaintCount,name,navigator,opener,outerHeight,outerWidth,pageXOffset,pageYOffset,parent,performance,personalbar,pkcs11,returnValue,screen,screenX,screenY,scrollbars,scrollMaxX,scrollMaxY,scrollX,scrollY,self,sessionStorage,sidebar,status,statusbar,toolbar,top,URL,window,' +\n    'addEventListener,alert,atob,back,blur,btoa,captureEvents,clearImmediate,clearInterval,clearTimeout,close,confirm,disableExternalCapture,dispatchEvent,dump,enableExternalCapture,escape,find,focus,forward,GeckoActiveXObject,getAttention,getAttentionWithCycleCount,getComputedStyle,getSelection,home,matchMedia,maximize,minimize,moveBy,moveTo,mozRequestAnimationFrame,open,openDialog,postMessage,print,prompt,QueryInterface,releaseEvents,removeEventListener,resizeBy,resizeTo,restore,routeEvent,scroll,scrollBy,scrollByLines,scrollByPages,scrollTo,setCursor,setImmediate,setInterval,setResizable,setTimeout,showModalDialog,sizeToContent,stop,unescape,updateCommands,XPCNativeWrapper,XPCSafeJSObjectWrapper,' +\n    'onabort,onbeforeunload,onblur,onchange,onclick,onclose,oncontextmenu,ondevicemotion,ondeviceorientation,ondragdrop,onerror,onfocus,onhashchange,onkeydown,onkeypress,onkeyup,onload,onmousedown,onmousemove,onmouseout,onmouseover,onmouseup,onmozbeforepaint,onpaint,onpopstate,onreset,onresize,onscroll,onselect,onsubmit,onunload,onpageshow,onpagehide,' +\n    'Image,Option,Worker,' +\n    // https://developer.mozilla.org/en/Gecko_DOM_Reference\n    'Event,Range,File,FileReader,Blob,BlobBuilder,' +\n    'Attr,CDATASection,CharacterData,Comment,console,DocumentFragment,DocumentType,DomConfiguration,DOMError,DOMErrorHandler,DOMException,DOMImplementation,DOMImplementationList,DOMImplementationRegistry,DOMImplementationSource,DOMLocator,DOMObject,DOMString,DOMStringList,DOMTimeStamp,DOMUserData,Entity,EntityReference,MediaQueryList,MediaQueryListListener,NameList,NamedNodeMap,Node,NodeFilter,NodeIterator,NodeList,Notation,Plugin,PluginArray,ProcessingInstruction,SharedWorker,Text,TimeRanges,Treewalker,TypeInfo,UserDataHandler,Worker,WorkerGlobalScope,' +\n    'HTMLDocument,HTMLElement,HTMLAnchorElement,HTMLAppletElement,HTMLAudioElement,HTMLAreaElement,HTMLBaseElement,HTMLBaseFontElement,HTMLBodyElement,HTMLBRElement,HTMLButtonElement,HTMLCanvasElement,HTMLDirectoryElement,HTMLDivElement,HTMLDListElement,HTMLEmbedElement,HTMLFieldSetElement,HTMLFontElement,HTMLFormElement,HTMLFrameElement,HTMLFrameSetElement,HTMLHeadElement,HTMLHeadingElement,HTMLHtmlElement,HTMLHRElement,HTMLIFrameElement,HTMLImageElement,HTMLInputElement,HTMLKeygenElement,HTMLLabelElement,HTMLLIElement,HTMLLinkElement,HTMLMapElement,HTMLMenuElement,HTMLMetaElement,HTMLModElement,HTMLObjectElement,HTMLOListElement,HTMLOptGroupElement,HTMLOptionElement,HTMLOutputElement,HTMLParagraphElement,HTMLParamElement,HTMLPreElement,HTMLQuoteElement,HTMLScriptElement,HTMLSelectElement,HTMLSourceElement,HTMLSpanElement,HTMLStyleElement,HTMLTableElement,HTMLTableCaptionElement,HTMLTableCellElement,HTMLTableDataCellElement,HTMLTableHeaderCellElement,HTMLTableColElement,HTMLTableRowElement,HTMLTableSectionElement,HTMLTextAreaElement,HTMLTimeElement,HTMLTitleElement,HTMLTrackElement,HTMLUListElement,HTMLUnknownElement,HTMLVideoElement,' +\n    'HTMLCanvasElement,CanvasRenderingContext2D,CanvasGradient,CanvasPattern,TextMetrics,ImageData,CanvasPixelArray,HTMLAudioElement,HTMLVideoElement,NotifyAudioAvailableEvent,HTMLCollection,HTMLAllCollection,HTMLFormControlsCollection,HTMLOptionsCollection,HTMLPropertiesCollection,DOMTokenList,DOMSettableTokenList,DOMStringMap,RadioNodeList,' +\n    'SVGDocument,SVGElement,SVGAElement,SVGAltGlyphElement,SVGAltGlyphDefElement,SVGAltGlyphItemElement,SVGAnimationElement,SVGAnimateElement,SVGAnimateColorElement,SVGAnimateMotionElement,SVGAnimateTransformElement,SVGSetElement,SVGCircleElement,SVGClipPathElement,SVGColorProfileElement,SVGCursorElement,SVGDefsElement,SVGDescElement,SVGEllipseElement,SVGFilterElement,SVGFilterPrimitiveStandardAttributes,SVGFEBlendElement,SVGFEColorMatrixElement,SVGFEComponentTransferElement,SVGFECompositeElement,SVGFEConvolveMatrixElement,SVGFEDiffuseLightingElement,SVGFEDisplacementMapElement,SVGFEDistantLightElement,SVGFEFloodElement,SVGFEGaussianBlurElement,SVGFEImageElement,SVGFEMergeElement,SVGFEMergeNodeElement,SVGFEMorphologyElement,SVGFEOffsetElement,SVGFEPointLightElement,SVGFESpecularLightingElement,SVGFESpotLightElement,SVGFETileElement,SVGFETurbulenceElement,SVGComponentTransferFunctionElement,SVGFEFuncRElement,SVGFEFuncGElement,SVGFEFuncBElement,SVGFEFuncAElement,SVGFontElement,SVGFontFaceElement,SVGFontFaceFormatElement,SVGFontFaceNameElement,SVGFontFaceSrcElement,SVGFontFaceUriElement,SVGForeignObjectElement,SVGGElement,SVGGlyphElement,SVGGlyphRefElement,SVGGradientElement,SVGLinearGradientElement,SVGRadialGradientElement,SVGHKernElement,SVGImageElement,SVGLineElement,SVGMarkerElement,SVGMaskElement,SVGMetadataElement,SVGMissingGlyphElement,SVGMPathElement,SVGPathElement,SVGPatternElement,SVGPolylineElement,SVGPolygonElement,SVGRectElement,SVGScriptElement,SVGStopElement,SVGStyleElement,SVGSVGElement,SVGSwitchElement,SVGSymbolElement,SVGTextElement,SVGTextPathElement,SVGTitleElement,SVGTRefElement,SVGTSpanElement,SVGUseElement,SVGViewElement,SVGVKernElement,' +\n    'SVGAngle,SVGColor,SVGICCColor,SVGElementInstance,SVGElementInstanceList,SVGLength,SVGLengthList,SVGMatrix,SVGNumber,SVGNumberList,SVGPaint,SVGPoint,SVGPointList,SVGPreserveAspectRatio,SVGRect,SVGStringList,SVGTransform,SVGTransformList,' +\n    'SVGAnimatedAngle,SVGAnimatedBoolean,SVGAnimatedEnumeration,SVGAnimatedInteger,SVGAnimatedLength,SVGAnimatedLengthList,SVGAnimatedNumber,SVGAnimatedNumberList,SVGAnimatedPreserveAspectRatio,SVGAnimatedRect,SVGAnimatedString,SVGAnimatedTransformList,' +\n    'SVGPathSegList,SVGPathSeg,SVGPathSegArcAbs,SVGPathSegArcRel,SVGPathSegClosePath,SVGPathSegCurvetoCubicAbs,SVGPathSegCurvetoCubicRel,SVGPathSegCurvetoCubicSmoothAbs,SVGPathSegCurvetoCubicSmoothRel,SVGPathSegCurvetoQuadraticAbs,SVGPathSegCurvetoQuadraticRel,SVGPathSegCurvetoQuadraticSmoothAbs,SVGPathSegCurvetoQuadraticSmoothRel,SVGPathSegLinetoAbs,SVGPathSegLinetoHorizontalAbs,SVGPathSegLinetoHorizontalRel,SVGPathSegLinetoRel,SVGPathSegLinetoVerticalAbs,SVGPathSegLinetoVerticalRel,SVGPathSegMovetoAbs,SVGPathSegMovetoRel,ElementTimeControl,TimeEvent,SVGAnimatedPathData,' +\n    'SVGAnimatedPoints,SVGColorProfileRule,SVGCSSRule,SVGExternalResourcesRequired,SVGFitToViewBox,SVGLangSpace,SVGLocatable,SVGRenderingIntent,SVGStylable,SVGTests,SVGTextContentElement,SVGTextPositioningElement,SVGTransformable,SVGUnitTypes,SVGURIReference,SVGViewSpec,SVGZoomAndPan');\n\n/**\n * Order of operation ENUMs.\n * https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence\n */\nBlockly.JavaScript.ORDER_ATOMIC = 0;           // 0 \"\" ...\nBlockly.JavaScript.ORDER_NEW = 1.1;            // new\nBlockly.JavaScript.ORDER_MEMBER = 1.2;         // . []\nBlockly.JavaScript.ORDER_FUNCTION_CALL = 2;    // ()\nBlockly.JavaScript.ORDER_INCREMENT = 3;        // ++\nBlockly.JavaScript.ORDER_DECREMENT = 3;        // --\nBlockly.JavaScript.ORDER_BITWISE_NOT = 4.1;    // ~\nBlockly.JavaScript.ORDER_UNARY_PLUS = 4.2;     // +\nBlockly.JavaScript.ORDER_UNARY_NEGATION = 4.3; // -\nBlockly.JavaScript.ORDER_LOGICAL_NOT = 4.4;    // !\nBlockly.JavaScript.ORDER_TYPEOF = 4.5;         // typeof\nBlockly.JavaScript.ORDER_VOID = 4.6;           // void\nBlockly.JavaScript.ORDER_DELETE = 4.7;         // delete\nBlockly.JavaScript.ORDER_AWAIT = 4.8;          // await\nBlockly.JavaScript.ORDER_EXPONENTIATION = 5.0; // **\nBlockly.JavaScript.ORDER_MULTIPLICATION = 5.1; // *\nBlockly.JavaScript.ORDER_DIVISION = 5.2;       // /\nBlockly.JavaScript.ORDER_MODULUS = 5.3;        // %\nBlockly.JavaScript.ORDER_SUBTRACTION = 6.1;    // -\nBlockly.JavaScript.ORDER_ADDITION = 6.2;       // +\nBlockly.JavaScript.ORDER_BITWISE_SHIFT = 7;    // << >> >>>\nBlockly.JavaScript.ORDER_RELATIONAL = 8;       // < <= > >=\nBlockly.JavaScript.ORDER_IN = 8;               // in\nBlockly.JavaScript.ORDER_INSTANCEOF = 8;       // instanceof\nBlockly.JavaScript.ORDER_EQUALITY = 9;         // == != === !==\nBlockly.JavaScript.ORDER_BITWISE_AND = 10;     // &\nBlockly.JavaScript.ORDER_BITWISE_XOR = 11;     // ^\nBlockly.JavaScript.ORDER_BITWISE_OR = 12;      // |\nBlockly.JavaScript.ORDER_LOGICAL_AND = 13;     // &&\nBlockly.JavaScript.ORDER_LOGICAL_OR = 14;      // ||\nBlockly.JavaScript.ORDER_CONDITIONAL = 15;     // ?:\nBlockly.JavaScript.ORDER_ASSIGNMENT = 16;      // = += -= **= *= /= %= <<= >>= ...\nBlockly.JavaScript.ORDER_YIELD = 17;         // yield\nBlockly.JavaScript.ORDER_COMMA = 18;           // ,\nBlockly.JavaScript.ORDER_NONE = 99;            // (...)\n\n/**\n * List of outer-inner pairings that do NOT require parentheses.\n * @type {!Array.<!Array.<number>>}\n */\nBlockly.JavaScript.ORDER_OVERRIDES = [\n  // (foo()).bar -> foo().bar\n  // (foo())[0] -> foo()[0]\n  [Blockly.JavaScript.ORDER_FUNCTION_CALL, Blockly.JavaScript.ORDER_MEMBER],\n  // (foo())() -> foo()()\n  [Blockly.JavaScript.ORDER_FUNCTION_CALL, Blockly.JavaScript.ORDER_FUNCTION_CALL],\n  // (foo.bar).baz -> foo.bar.baz\n  // (foo.bar)[0] -> foo.bar[0]\n  // (foo[0]).bar -> foo[0].bar\n  // (foo[0])[1] -> foo[0][1]\n  [Blockly.JavaScript.ORDER_MEMBER, Blockly.JavaScript.ORDER_MEMBER],\n  // (foo.bar)() -> foo.bar()\n  // (foo[0])() -> foo[0]()\n  [Blockly.JavaScript.ORDER_MEMBER, Blockly.JavaScript.ORDER_FUNCTION_CALL],\n\n  // !(!foo) -> !!foo\n  [Blockly.JavaScript.ORDER_LOGICAL_NOT, Blockly.JavaScript.ORDER_LOGICAL_NOT],\n  // a * (b * c) -> a * b * c\n  [Blockly.JavaScript.ORDER_MULTIPLICATION, Blockly.JavaScript.ORDER_MULTIPLICATION],\n  // a + (b + c) -> a + b + c\n  [Blockly.JavaScript.ORDER_ADDITION, Blockly.JavaScript.ORDER_ADDITION],\n  // a && (b && c) -> a && b && c\n  [Blockly.JavaScript.ORDER_LOGICAL_AND, Blockly.JavaScript.ORDER_LOGICAL_AND],\n  // a || (b || c) -> a || b || c\n  [Blockly.JavaScript.ORDER_LOGICAL_OR, Blockly.JavaScript.ORDER_LOGICAL_OR]\n];\n\n/**\n * Initialise the database of variable names.\n * @param {!Blockly.Workspace} workspace Workspace to generate code from.\n */\nBlockly.JavaScript.init = function(workspace) {\n  // Create a dictionary of definitions to be printed before the code.\n  Blockly.JavaScript.definitions_ = Object.create(null);\n  // Create a dictionary mapping desired function names in definitions_\n  // to actual function names (to avoid collisions with user functions).\n  Blockly.JavaScript.functionNames_ = Object.create(null);\n\n  if (!Blockly.JavaScript.variableDB_) {\n    Blockly.JavaScript.variableDB_ =\n        new Blockly.Names(Blockly.JavaScript.RESERVED_WORDS_);\n  } else {\n    Blockly.JavaScript.variableDB_.reset();\n  }\n\n  Blockly.JavaScript.variableDB_.setVariableMap(workspace.getVariableMap());\n\n  var defvars = [];\n  // Add developer variables (not created or named by the user).\n  var devVarList = Blockly.Variables.allDeveloperVariables(workspace);\n  for (var i = 0; i < devVarList.length; i++) {\n    defvars.push(Blockly.JavaScript.variableDB_.getName(devVarList[i],\n        Blockly.Names.DEVELOPER_VARIABLE_TYPE));\n  }\n\n  // Add user variables, but only ones that are being used.\n  var variables = Blockly.Variables.allUsedVarModels(workspace);\n  for (var i = 0; i < variables.length; i++) {\n    defvars.push(Blockly.JavaScript.variableDB_.getName(variables[i].getId(),\n        Blockly.Variables.NAME_TYPE));\n  }\n\n  // Declare all of the variables.\n  if (defvars.length) {\n    Blockly.JavaScript.definitions_['variables'] =\n        'var ' + defvars.join(', ') + ';';\n  }\n};\n\n/**\n * Prepend the generated code with the variable definitions.\n * @param {string} code Generated code.\n * @return {string} Completed code.\n */\nBlockly.JavaScript.finish = function(code) {\n  // Convert the definitions dictionary into a list.\n  var definitions = [];\n  for (var name in Blockly.JavaScript.definitions_) {\n    definitions.push(Blockly.JavaScript.definitions_[name]);\n  }\n  // Clean up temporary data.\n  delete Blockly.JavaScript.definitions_;\n  delete Blockly.JavaScript.functionNames_;\n  Blockly.JavaScript.variableDB_.reset();\n  return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n};\n\n/**\n * Naked values are top-level blocks with outputs that aren't plugged into\n * anything.  A trailing semicolon is needed to make this legal.\n * @param {string} line Line of generated code.\n * @return {string} Legal line of code.\n */\nBlockly.JavaScript.scrubNakedValue = function(line) {\n  return line + ';\\n';\n};\n\n/**\n * Encode a string as a properly escaped JavaScript string, complete with\n * quotes.\n * @param {string} string Text to encode.\n * @return {string} JavaScript string.\n * @private\n */\nBlockly.JavaScript.quote_ = function(string) {\n  // Can't use goog.string.quote since Google's style guide recommends\n  // JS string literals use single quotes.\n  string = string.replace(/\\\\/g, '\\\\\\\\')\n                 .replace(/\\n/g, '\\\\\\n')\n                 .replace(/'/g, '\\\\\\'');\n  return '\\'' + string + '\\'';\n};\n\n/**\n * Common tasks for generating JavaScript from blocks.\n * Handles comments for the specified block and any connected value blocks.\n * Calls any statements following this block.\n * @param {!Blockly.Block} block The current block.\n * @param {string} code The JavaScript code created for this block.\n * @param {boolean=} opt_thisOnly True to generate code for only this statement.\n * @return {string} JavaScript code with comments and subsequent blocks added.\n * @private\n */\nBlockly.JavaScript.scrub_ = function(block, code, opt_thisOnly) {\n  var commentCode = '';\n  // Only collect comments for blocks that aren't inline.\n  if (!block.outputConnection || !block.outputConnection.targetConnection) {\n    // Collect comment for this block.\n    var comment = block.getCommentText();\n    comment = Blockly.utils.wrap(comment, Blockly.JavaScript.COMMENT_WRAP - 3);\n    if (comment) {\n      if (block.getProcedureDef) {\n        // Use a comment block for function comments.\n        commentCode += '/**\\n' +\n                       Blockly.JavaScript.prefixLines(comment + '\\n', ' * ') +\n                       ' */\\n';\n      } else {\n        commentCode += Blockly.JavaScript.prefixLines(comment + '\\n', '// ');\n      }\n    }\n    // Collect comments for all value arguments.\n    // Don't collect comments for nested statements.\n    for (var i = 0; i < block.inputList.length; i++) {\n      if (block.inputList[i].type == Blockly.INPUT_VALUE) {\n        var childBlock = block.inputList[i].connection.targetBlock();\n        if (childBlock) {\n          var comment = Blockly.JavaScript.allNestedComments(childBlock);\n          if (comment) {\n            commentCode += Blockly.JavaScript.prefixLines(comment, '// ');\n          }\n        }\n      }\n    }\n  }\n  var nextBlock = block.nextConnection && block.nextConnection.targetBlock();\n  var nextCode = opt_thisOnly ? '' : Blockly.JavaScript.blockToCode(nextBlock);\n  return commentCode + code + nextCode;\n};\n\n/**\n * Gets a property and adjusts the value while taking into account indexing.\n * @param {!Blockly.Block} block The block.\n * @param {string} atId The property ID of the element to get.\n * @param {number=} opt_delta Value to add.\n * @param {boolean=} opt_negate Whether to negate the value.\n * @param {number=} opt_order The highest order acting on this value.\n * @return {string|number}\n */\nBlockly.JavaScript.getAdjusted = function(block, atId, opt_delta, opt_negate,\n    opt_order) {\n  var delta = opt_delta || 0;\n  var order = opt_order || Blockly.JavaScript.ORDER_NONE;\n  if (block.workspace.options.oneBasedIndex) {\n    delta--;\n  }\n  var defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n  if (delta > 0) {\n    var at = Blockly.JavaScript.valueToCode(block, atId,\n        Blockly.JavaScript.ORDER_ADDITION) || defaultAtIndex;\n  } else if (delta < 0) {\n    var at = Blockly.JavaScript.valueToCode(block, atId,\n        Blockly.JavaScript.ORDER_SUBTRACTION) || defaultAtIndex;\n  } else if (opt_negate) {\n    var at = Blockly.JavaScript.valueToCode(block, atId,\n        Blockly.JavaScript.ORDER_UNARY_NEGATION) || defaultAtIndex;\n  } else {\n    var at = Blockly.JavaScript.valueToCode(block, atId, order) ||\n        defaultAtIndex;\n  }\n\n  if (Blockly.isNumber(at)) {\n    // If the index is a naked number, adjust it right now.\n    at = parseFloat(at) + delta;\n    if (opt_negate) {\n      at = -at;\n    }\n  } else {\n    // If the index is dynamic, adjust it in code.\n    if (delta > 0) {\n      at = at + ' + ' + delta;\n      var innerOrder = Blockly.JavaScript.ORDER_ADDITION;\n    } else if (delta < 0) {\n      at = at + ' - ' + -delta;\n      var innerOrder = Blockly.JavaScript.ORDER_SUBTRACTION;\n    }\n    if (opt_negate) {\n      if (delta) {\n        at = '-(' + at + ')';\n      } else {\n        at = '-' + at;\n      }\n      var innerOrder = Blockly.JavaScript.ORDER_UNARY_NEGATION;\n    }\n    innerOrder = Math.floor(innerOrder);\n    order = Math.floor(order);\n    if (innerOrder && order >= innerOrder) {\n      at = '(' + at + ')';\n    }\n  }\n  return at;\n};\n","module.exports = global[\"Blockly\"] = require(\"-!./blockly_compressed_vertical.Blockly.js\");","module.exports = global[\"goog\"] = require(\"-!./blockly_compressed_vertical.goog.js\");","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1567065058224\n      var cssReload = require(\"!../../../node_modules/css-hot-loader/hotModuleReplacement.js\")(module.id, {\"fileMap\":\"{fileName}\"});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);;\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1567065052957\n      var cssReload = require(\"!../../../../node_modules/css-hot-loader/hotModuleReplacement.js\")(module.id, {\"fileMap\":\"{fileName}\"});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);;\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1567065052962\n      var cssReload = require(\"!../../../../node_modules/css-hot-loader/hotModuleReplacement.js\")(module.id, {\"fileMap\":\"{fileName}\"});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);;\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1567065053174\n      var cssReload = require(\"!../../../../node_modules/css-hot-loader/hotModuleReplacement.js\")(module.id, {\"fileMap\":\"{fileName}\"});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);;\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1567065059212\n      var cssReload = require(\"!../../../../node_modules/css-hot-loader/hotModuleReplacement.js\")(module.id, {\"fileMap\":\"{fileName}\"});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);;\n    }\n  ","// extracted by mini-css-extract-plugin\n    if(module.hot) {\n      // 1567065052948\n      var cssReload = require(\"!../../../../node_modules/css-hot-loader/hotModuleReplacement.js\")(module.id, {\"fileMap\":\"{fileName}\"});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);;\n    }\n  ","function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { BlueInfoIcon } from './Icons.jsx';\nimport { connect } from '../stores/connect';\nimport { translate } from '../utils/lang/i18n';\n\nvar FlyoutBlock =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(FlyoutBlock, _React$PureComponent);\n\n  function FlyoutBlock() {\n    return _React$PureComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = FlyoutBlock.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    var _this$props = this.props,\n        onInfoClick = _this$props.onInfoClick,\n        block_node = _this$props.block_node;\n    return React.createElement(\"div\", {\n      className: \"flyout__item\"\n    }, React.createElement(\"div\", {\n      className: \"flyout__item-header\"\n    }, React.createElement(\"div\", {\n      className: \"flyout__item-label\"\n    }, block_node.getAttribute('type')), React.createElement(\"div\", {\n      className: \"flyout__item-buttons\"\n    }, onInfoClick && React.createElement(\"div\", {\n      className: \"flyout__item-info\",\n      onClick: onInfoClick\n    }, React.createElement(BlueInfoIcon, {\n      className: 'info'\n    })), React.createElement(\"button\", {\n      className: \"flyout__item-add\",\n      onClick: function onClick() {\n        return Blockly.derivWorkspace.addBlockNode(block_node);\n      }\n    }, translate('Add')))), React.createElement(\"div\", {\n      ref: function ref(el) {\n        return _this.el_block_workspace = el;\n      },\n      className: \"flyout__block-workspace\"\n    }));\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this$props2 = this.props,\n        initBlockWorkspace = _this$props2.initBlockWorkspace,\n        block_node = _this$props2.block_node;\n    initBlockWorkspace(this.el_block_workspace, block_node);\n  };\n\n  return FlyoutBlock;\n}(React.PureComponent);\n\nFlyoutBlock.propTypes = {\n  block_node: PropTypes.any,\n  initBlockWorkspace: PropTypes.func,\n  onInfoClick: PropTypes.func\n};\nexport default connect(function (_ref) {\n  var flyout = _ref.flyout;\n  return {\n    initBlockWorkspace: flyout.initBlockWorkspace\n  };\n})(FlyoutBlock);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FlyoutBlock from './flyout-block.jsx';\nimport { connect } from '../stores/connect';\nimport '../assets/sass/scratch/flyout.scss';\n\nvar Flyout = function Flyout(_ref) {\n  var flyout_content = _ref.flyout_content,\n      flyout_width = _ref.flyout_width,\n      is_visible = _ref.is_visible;\n  return React.createElement(\"div\", {\n    className: \"flyout\" + (!is_visible ? ' hidden' : ''),\n    style: {\n      width: flyout_width + \"px\"\n    }\n  }, flyout_content.map(function (node, index) {\n    var tag_name = node.tagName.toUpperCase();\n\n    switch (tag_name) {\n      case Blockly.Xml.NODE_BLOCK:\n        return React.createElement(FlyoutBlock, {\n          key: node.getAttribute('type') + index,\n          id: \"flyout__item-workspace--\" + index,\n          block_node: node\n        });\n\n      case Blockly.Xml.NODE_LABEL:\n        return React.createElement(\"div\", {\n          key: node.getAttribute('text') + index,\n          className: \"flyout__item-label\"\n        }, node.getAttribute('text'));\n\n      case Blockly.Xml.NODE_BUTTON:\n        {\n          var callback_key = node.getAttribute('callbackKey');\n\n          var callback = Blockly.derivWorkspace.getButtonCallback(callback_key) || function () {};\n\n          return React.createElement(\"button\", {\n            key: \"\" + callback_key + index,\n            className: \"flyout__button\",\n            onClick: function onClick(button) {\n              var flyout_button = button; // Workaround for not having a flyout workspace.\n              // eslint-disable-next-line no-underscore-dangle\n\n              flyout_button.targetWorkspace_ = Blockly.derivWorkspace; // eslint-disable-next-line no-underscore-dangle\n\n              flyout_button.getTargetWorkspace = function () {\n                return flyout_button.targetWorkspace_;\n              };\n\n              callback(flyout_button);\n            }\n          }, node.getAttribute('text'));\n        }\n\n      default:\n        return null;\n    }\n  }));\n};\n\nFlyout.propTypes = {\n  flyout_content: PropTypes.array,\n  flyout_width: PropTypes.number,\n  is_visible: PropTypes.bool\n};\nexport default connect(function (_ref2) {\n  var flyout = _ref2.flyout;\n  return {\n    flyout_content: flyout.flyout_content,\n    flyout_width: flyout.flyout_width,\n    is_visible: flyout.is_visible\n  };\n})(Flyout);","import React from 'react';\nimport classNames from 'classnames';\n\nimport Button from 'deriv-components/lib/button';\nimport 'deriv-components/lib/button.css';\n        \n\nimport Input from 'deriv-components/lib/input';\nimport 'deriv-components/lib/input.css';\n        \n\nimport Form from 'deriv-components/lib/form';\nimport 'deriv-components/lib/form.css';\n        \nimport { LogoIcon } from './Icons.jsx';\nimport { connect } from '../stores/connect';\nimport { translate } from '../utils/tools';\n\nvar Toolbar = function Toolbar(props) {\n  var onStartClick = props.onStartClick; // const toolbar_element = [\n  //     { id: 'start', type: 'button', text: 'Start', action: onStartClick },\n  //     {\n  //         id      : 'toolbar-action', type    : 'button-group', children: [\n  //             { id: 'reset-button', text: 'reset', action: onResetClick },\n  //             { id: 'load-xml', text: 'browse', action: onBrowseClick },\n  //             { id: 'save-xml', text: 'save', action: onSaveClick },\n  //             { id: 'integration', text: 'google drive', action: onGoogleDriveClick },\n  //             { type: 'divider' },\n  //             { id: 'undo', text: 'undo', action: onUndoClick },\n  //             { id: 'redo', text: 'redo', action: onRedoClick },\n  //             { type: 'divider' },\n  //             { id: 'zoomIn', text: 'zoom in', action: onZoomInClick },\n  //             { id: 'zoomOut', text: 'zoom out', action: onZoomOutClick },\n  //             { id: 'sort', text: 'sort', action: onSortClick },\n  //         ],\n  //     },\n  // ];\n\n  return React.createElement(\"div\", {\n    id: \"toolbar\",\n    className: \"toolbar\"\n  }, React.createElement(Button, {\n    id: 'start',\n    className: classNames('toolbar__btn-icon', 'toolbar__btn', 'btn--primary'),\n    has_effect: true,\n    onClick: onStartClick\n  }, React.createElement(LogoIcon, {\n    className: \"arrow\"\n  }), React.createElement(\"span\", {\n    className: \"toolbar__btn-text\"\n  }, translate('Start'))), React.createElement(Form, {\n    initialValues: {\n      search: ''\n    },\n    onSubmit: function onSubmit(values) {\n      console.log(values); // eslint-disable-line\n    }\n  }, function (_ref) {\n    var submitForm = _ref.submitForm;\n    return React.createElement(\"div\", null, React.createElement(Input, {\n      id: \"search_field\",\n      className: \"toolbar__search-field\",\n      type: \"text\",\n      name: \"search\",\n      label: translate('Search'),\n      placeholder: translate('Search block!!...'),\n      onKeyUp: submitForm\n    }));\n  }));\n};\n\nexport default connect(function (_ref2) {\n  var toolbar = _ref2.toolbar;\n  return {\n    onStartClick: toolbar.onStartClick,\n    onResetClick: toolbar.onResetClick,\n    onBrowseClick: toolbar.onBrowseClick,\n    onSaveClick: toolbar.onSaveClick,\n    onGoogleDriveClick: toolbar.onGoogleDriveClick,\n    onUndoClick: toolbar.onUndoClick,\n    onRedoClick: toolbar.onRedoClick,\n    handleFileChange: toolbar.handleFileChange,\n    onConfirmSave: toolbar.onConfirmSave,\n    onZoomInClick: toolbar.onZoomInClick,\n    onZoomOutClick: toolbar.onZoomOutClick,\n    onSortClick: toolbar.onSortClick\n  };\n})(Toolbar);","import \"core-js/modules/es6.array.find\";\nimport { setBlockTextColor } from '../../../utils';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.procedures_callnoreturn = {\n  init: function init() {\n    this.arguments = [];\n    this.argumentVarModels = [];\n    this.previousDisabledState = false;\n    this.jsonInit(this.definition());\n  },\n\n  /**\n   * Block definitions describe how a block looks and behaves, including the text,\n   * the colour, the shape, and what other blocks it can connect to. We've separated\n   * the block definition from the init function so we can search through it.\n   * https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\n   */\n  definition: function definition() {\n    return {\n      message0: '%1 %2',\n      args0: [{\n        type: 'field_label',\n        name: 'NAME',\n        text: this.id\n      }, {\n        type: 'input_dummy',\n        name: 'TOPROW'\n      }],\n      colour: Blockly.Colours.BinaryProcedures.colour,\n      colourSecondary: Blockly.Colours.BinaryProcedures.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryProcedures.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Function with no return value tooltip'),\n      category: Blockly.Categories.Functions\n    };\n  },\n\n  /**\n   * Meta returns an object with with properties that contain human readable strings,\n   * these strings are used in the flyout help content, as well as used for searching\n   * for specific blocks.\n   */\n  meta: function meta() {\n    return {\n      'display_name': translate('Function With no Return name'),\n      'description': translate('Function with no return value description')\n    };\n  },\n\n  /**\n   * Procedure calls cannot exist without the corresponding procedure\n   * definition.  Enforce this link whenever an event is fired.\n   * @param {!Blockly.Events.Abstract} event Change event.\n   * @this Blockly.Block\n   */\n  onchange: function onchange(event) {\n    setBlockTextColor(this);\n\n    if (!this.workspace || this.workspace.isFlyout) {\n      // Block is deleted or is in a flyout.\n      return;\n    }\n\n    if (!event.recordUndo) {\n      // Events not generated by user. Skip handling.\n      return;\n    }\n\n    if (event.type === Blockly.Events.BLOCK_CREATE && event.ids.indexOf(this.id) !== -1) {\n      // Look for the case where a procedure call was created (usually through\n      // paste) and there is no matching definition.  In this case, create\n      // an empty definition block with the correct signature.\n      var name = this.getProcedureCall();\n      var def = this.getProcedureDefinition(name); // Set data of `this` block to 'procedure definition'-block `id` so we can keep track of their relation.\n\n      if (!def) {\n        this.unplug();\n        this.dispose();\n      }\n\n      this.data = def.id;\n\n      if (def && (def.type !== this.defType || JSON.stringify(def.arguments) !== JSON.stringify(this.arguments))) {\n        // The signatures don't match.\n        def = null;\n      }\n\n      if (!def) {\n        Blockly.Events.setGroup(event.group);\n        /**\n         * Create matching definition block.\n         * <xml>\n         *   <block type=\"procedures_defreturn\" x=\"10\" y=\"20\">\n         *     <mutation name=\"test\">\n         *       <arg name=\"x\"></arg>\n         *     </mutation>\n         *     <field name=\"NAME\">test</field>\n         *   </block>\n         * </xml>\n         */\n\n        var xml = document.createElement('xml');\n        var block = document.createElement('block');\n        block.setAttribute('type', this.defType);\n        var xy = this.getRelativeToSurfaceXY();\n        var x = xy.x + Blockly.SNAP_RADIUS * (this.RTL ? -1 : 1);\n        var y = xy.y + Blockly.SNAP_RADIUS * 2;\n        block.setAttribute('x', x);\n        block.setAttribute('y', y);\n        var mutation = this.mutationToDom();\n        block.appendChild(mutation);\n        var field = document.createElement('field');\n        field.setAttribute('name', 'NAME');\n        field.appendChild(document.createTextNode(this.getProcedureCall()));\n        block.appendChild(field);\n        xml.appendChild(block);\n        Blockly.Xml.domToWorkspace(xml, this.workspace);\n        Blockly.Events.setGroup(false);\n      }\n    } else if (event.type === Blockly.Events.BLOCK_DELETE) {\n      // Look for the case where a procedure definition has been deleted,\n      // leaving this block (a procedure call) orphaned.  In this case, delete\n      // the orphan.\n      var _name = this.getProcedureCall();\n\n      var _def = Blockly.Procedures.getDefinition(_name, this.workspace);\n\n      if (!_def) {\n        Blockly.Events.setGroup(event.group);\n        this.dispose(true, false);\n        Blockly.Events.setGroup(false);\n      }\n    } else if (event.type === Blockly.Events.BLOCK_CHANGE && event.element === 'disabled') {\n      var _name2 = this.getProcedureCall();\n\n      var _def2 = Blockly.Procedures.getDefinition(_name2, this.workspace);\n\n      if (_def2 && _def2.id === event.blockId) {\n        // in most cases the old group should be ''\n        var oldGroup = Blockly.Events.getGroup();\n\n        if (oldGroup) {\n          // This should only be possible programatically and may indicate a problem\n          // with event grouping. If you see this message please investigate. If the\n          // use ends up being valid we may need to reorder events in the undo stack.\n          // eslint-disable-next-line no-console\n          console.log('Saw an existing group while responding to a definition change');\n        }\n\n        Blockly.Events.setGroup(event.group);\n\n        if (event.newValue) {\n          this.previousDisabledState = this.disabled;\n          this.setDisabled(true);\n        } else {\n          this.setDisabled(this.previousDisabledState);\n        }\n\n        Blockly.Events.setGroup(oldGroup);\n      }\n    }\n  },\n\n  /**\n   * Returns the related procedure definition block.\n   * @return {Blockly.Block} Procedure definition block.\n   * @this Blockly.Block\n   */\n  getProcedureDefinition: function getProcedureDefinition(name) {\n    // Assume that a procedure definition is a top block.\n    return this.workspace.getTopBlocks(false).find(function (block) {\n      if (block.getProcedureDefinition) {\n        var tuple = block.getProcedureDefinition();\n        return tuple && Blockly.Names.equals(tuple[0], name);\n      }\n\n      return false;\n    });\n  },\n\n  /**\n   * Returns the name of the procedure this block calls.\n   * @return {string} Procedure name.\n   * @this Blockly.Block\n   */\n  getProcedureCall: function getProcedureCall() {\n    // The NAME field is guaranteed to exist, null will never be returned.\n    return (\n      /** @type {string} */\n      this.getFieldValue('NAME')\n    );\n  },\n\n  /**\n   * Notification that a procedure is renaming.\n   * If the name matches this block's procedure, rename it.\n   * @param {string} oldName Previous name of procedure.\n   * @param {string} newName Renamed procedure.\n   * @this Blockly.Block\n   */\n  renameProcedure: function renameProcedure(oldName, newName) {\n    if (Blockly.Names.equals(oldName, this.getProcedureCall())) {\n      this.setFieldValue(newName, 'NAME');\n    }\n  },\n\n  /**\n   * Notification that the procedure's parameters have changed.\n   * @param {!Array.<string>} paramNames New param names, e.g. ['x', 'y', 'z'].\n   * @private\n   * @this Blockly.Block\n   */\n  setProcedureParameters: function setProcedureParameters(paramNames) {\n    var _this = this;\n\n    // Rebuild the block's arguments.\n    this.arguments = [].concat(paramNames); // And rebuild the argument model list.\n\n    this.argumentVarModels = this.arguments.map(function (argumentName) {\n      return Blockly.Variables.getOrCreateVariablePackage(_this.workspace, null, argumentName, '');\n    });\n    this.updateShape();\n  },\n\n  /**\n   * Modify this block to have the correct number of arguments.\n   * @private\n   * @this Blockly.Block\n   */\n  updateShape: function updateShape() {\n    var _this2 = this;\n\n    this.arguments.forEach(function (argumentName, i) {\n      var field = _this2.getField(\"ARGNAME\" + i);\n\n      if (field) {\n        // Ensure argument name is up to date.\n        // The argument name field is deterministic based on the mutation,\n        // no need to fire a change event.\n        Blockly.Events.disable();\n\n        try {\n          field.setValue(argumentName);\n        } finally {\n          Blockly.Events.enable();\n        }\n      } else {\n        // Add new input.\n        field = new Blockly.FieldLabel(argumentName);\n\n        var input = _this2.appendValueInput(\"ARG\" + i).appendField(field, \"ARGNAME\" + i);\n\n        input.init();\n      }\n    }); // Remove deleted inputs.\n\n    var i = this.arguments.length;\n\n    while (this.getInput(\"ARG\" + i)) {\n      this.removeInput(\"ARG\" + i);\n      i++;\n    } // Add 'with:' if there are parameters, remove otherwise.\n\n\n    var topRow = this.getInput('TOPROW');\n\n    if (topRow) {\n      if (this.arguments.length) {\n        if (!this.getField('WITH')) {\n          topRow.appendField(translate('with:'), 'WITH');\n          topRow.init();\n        }\n      } else if (this.getField('WITH')) {\n        topRow.removeField('WITH');\n      }\n    }\n  },\n\n  /**\n   * Create XML to represent the (non-editable) name and arguments.\n   * @return {!Element} XML storage element.\n   * @this Blockly.Block\n   */\n  mutationToDom: function mutationToDom() {\n    var container = document.createElement('mutation');\n    container.setAttribute('name', this.getProcedureCall());\n    this.arguments.forEach(function (argumentName) {\n      var parameter = document.createElement('arg');\n      parameter.setAttribute('name', argumentName);\n      container.appendChild(parameter);\n    });\n    return container;\n  },\n\n  /**\n   * Parse XML to restore the (non-editable) name and parameters.\n   * @param {!Element} xmlElement XML storage element.\n   * @this Blockly.Block\n   */\n  domToMutation: function domToMutation(xmlElement) {\n    var name = xmlElement.getAttribute('name');\n    this.renameProcedure(this.getProcedureCall(), name);\n    var args = [];\n    var paramIds = [];\n    xmlElement.childNodes.forEach(function (childNode) {\n      if (childNode.nodeName.toLowerCase() === 'arg') {\n        args.push(childNode.getAttribute('name'));\n        paramIds.push(childNode.getAttribute('paramId'));\n      }\n    });\n    this.setProcedureParameters(args, paramIds);\n  },\n\n  /**\n   * Return all variables referenced by this block.\n   * @return {!Array.<!Blockly.VariableModel>} List of variable models.\n   * @this Blockly.Block\n   */\n  getVarModels: function getVarModels() {\n    return this.argumentVarModels;\n  },\n\n  /**\n   * Add menu option to find the definition block for this call.\n   * @param {!Array} options List of menu options to add to.\n   * @this Blockly.Block\n   */\n  customContextMenu: function customContextMenu(options) {\n    var _this3 = this;\n\n    if (!this.workspace.isMovable()) {\n      // If we center on the block and the workspace isn't movable we could\n      // loose blocks at the edges of the workspace.\n      return;\n    }\n\n    var name = this.getProcedureCall();\n    var workspace = this.workspace;\n    var option = {\n      enabled: true\n    };\n    option.text = translate('Highlight function definition');\n\n    option.callback = function () {\n      var def = _this3.getProcedureDefinition(name);\n\n      if (def) {\n        workspace.centerOnBlock(def.id);\n        def.select();\n      }\n    };\n\n    options.push(option);\n  },\n  defType: 'procedures_defnoreturn'\n};\n\nBlockly.JavaScript.procedures_callnoreturn = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var functionName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\n  var args = block.arguments.map(function (arg, i) {\n    return Blockly.JavaScript.valueToCode(block, \"ARG\" + i, Blockly.JavaScript.ORDER_COMMA) || 'null';\n  });\n  var code = functionName + \"(\" + args.join(', ') + \");\\n\";\n  return code;\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.procedures_callreturn = {\n  init: function init() {\n    this.arguments = [];\n    this.previousDisabledState = false;\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: '%1 %2',\n      args0: [{\n        type: 'field_label',\n        name: 'NAME',\n        text: this.id\n      }, {\n        type: 'input_dummy',\n        name: 'TOPROW'\n      }],\n      output: null,\n      colour: Blockly.Colours.BinaryProcedures.colour,\n      colourSecondary: Blockly.Colours.BinaryProcedures.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryProcedures.colourTertiary,\n      tooltip: translate('Function with return value'),\n      category: Blockly.Categories.Functions\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Function with return value'),\n      'description': translate('Function with return value Description')\n    };\n  },\n  onchange: Blockly.Blocks.procedures_callnoreturn.onchange,\n  getProcedureDefinition: Blockly.Blocks.procedures_callnoreturn.getProcedureDefinition,\n  getProcedureCall: Blockly.Blocks.procedures_callnoreturn.getProcedureCall,\n  renameProcedure: Blockly.Blocks.procedures_callnoreturn.renameProcedure,\n  setProcedureParameters: Blockly.Blocks.procedures_callnoreturn.setProcedureParameters,\n  updateShape: Blockly.Blocks.procedures_callnoreturn.updateShape,\n  mutationToDom: Blockly.Blocks.procedures_callnoreturn.mutationToDom,\n  domToMutation: Blockly.Blocks.procedures_callnoreturn.domToMutation,\n  getVarModels: Blockly.Blocks.procedures_callnoreturn.getVarModels,\n  customContextMenu: Blockly.Blocks.procedures_callnoreturn.customContextMenu,\n  defType: 'procedures_defreturn'\n};\n\nBlockly.JavaScript.procedures_callreturn = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var functionName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\n  var args = block.arguments.map(function (arg, i) {\n    return Blockly.JavaScript.valueToCode(block, \"ARG\" + i, Blockly.JavaScript.ORDER_COMMA) || 'null';\n  });\n  var code = functionName + \"(\" + args.join(', ') + \")\";\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { plusIconLight } from '../../images';\nimport { setBlockTextColor } from '../../../utils';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.procedures_defnoreturn = {\n  init: function init() {\n    var _this = this;\n\n    this.arguments = [];\n    this.argumentVarModels = [];\n    this.jsonInit(this.definition()); // Enforce unique procedure names\n\n    var nameField = this.getField('NAME');\n    nameField.setValidator(Blockly.Procedures.rename); // Render a ➕-icon for adding parameters\n\n    var fieldImage = new Blockly.FieldImage(plusIconLight, 24, 24, '+', function () {\n      return _this.onAddClick();\n    });\n    this.appendDummyInput('ADD_ICON').appendField(fieldImage);\n    this.setStatements(true);\n  },\n  definition: function definition() {\n    return {\n      message0: translate('function %1 %2'),\n      args0: [{\n        type: 'field_input',\n        name: 'NAME',\n        text: ''\n      }, {\n        type: 'field_label',\n        name: 'PARAMS',\n        text: ''\n      }],\n      colour: Blockly.Colours.BinaryProcedures.colour,\n      colourSecondary: Blockly.Colours.BinaryProcedures.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryProcedures.colourTertiary,\n      tooltip: translate('function with no return tooltip'),\n      category: Blockly.Categories.Functions\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Function with no return value'),\n      'description': translate('Function with no return value description')\n    };\n  },\n\n  /**\n   * Sets the block colour and updates this procedure's caller blocks\n   * to reflect the same name on a change.\n   * @param {!Blockly.Events.Abstract} event Change event.\n   * @this Blockly.Block\n   */\n  onchange: function onchange(event) {\n    setBlockTextColor(this);\n    var allowedEvents = [Blockly.Events.BLOCK_DELETE, Blockly.Events.BLOCK_CREATE, Blockly.Events.BLOCK_CHANGE];\n\n    if (!this.workspace || this.workspace.isFlyout || !allowedEvents.includes(event.type)) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.BLOCK_CHANGE) {\n      // Sync names between definition- and execution-block\n      if (event.blockId === this.id && event.name === 'NAME') {\n        this.getProcedureCallers().forEach(function (block) {\n          block.setFieldValue(event.newValue, 'NAME');\n        });\n      }\n    }\n  },\n\n  /**\n   * Prompt the user for parameter name\n   * @this Blockly.Block\n   */\n  onAddClick: function onAddClick() {\n    var _this2 = this;\n\n    if (this.isInFlyout) {\n      return;\n    } // Wrap in setTimeout so block doesn't stick to mouse (Blockly.Events.END_DRAG event isn't blocked).\n\n\n    setTimeout(function () {\n      var promptMessage = translate('Specify a parameter name:');\n      Blockly.prompt(promptMessage, '', function (paramName) {\n        if (paramName) {\n          var variable = Blockly.Variables.getOrCreateVariablePackage(_this2.workspace, null, paramName, '');\n\n          if (variable) {\n            _this2.arguments.push(paramName);\n\n            _this2.argumentVarModels.push(variable);\n\n            var paramField = _this2.getField('PARAMS');\n\n            paramField.setText(translate('with: ') + \" \" + _this2.arguments.join(', '));\n\n            _this2.getProcedureCallers().forEach(function (block) {\n              block.setProcedureParameters(_this2.arguments);\n              block.initSvg();\n              block.render(false);\n            });\n          }\n        }\n      });\n    }, 200);\n  },\n\n  /**\n   * Add or remove the statement block from this function definition.\n   * @param {boolean} hasStatements True if a statement block is needed.\n   * @this Blockly.Block\n   */\n  setStatements: function setStatements(hasStatements) {\n    if (this.hasStatements === hasStatements) {\n      return;\n    }\n\n    if (hasStatements) {\n      this.appendStatementInput('STACK').appendField('');\n\n      if (this.getInput('RETURN')) {\n        this.moveInputBefore('STACK', 'RETURN');\n      }\n    } else {\n      this.removeInput('STACK', true);\n    }\n\n    this.hasStatements = hasStatements;\n  },\n\n  /**\n   * Update the display of parameters for this procedure definition block.\n   * @private\n   * @this Blockly.Block\n   */\n  updateParams: function updateParams() {\n    var paramString = '';\n\n    if (this.arguments.length) {\n      paramString = translate('with:') + \" \" + this.arguments.join(', ');\n    } // The params field is deterministic based on the mutation,\n    // no need to fire a change event.\n\n\n    Blockly.Events.disable();\n\n    try {\n      this.setFieldValue(paramString, 'PARAMS');\n    } finally {\n      Blockly.Events.enable();\n    }\n  },\n\n  /**\n   * Create XML to represent the argument inputs.\n   * @param {boolean=} optParamIds If true include the IDs of the parameter\n   *     quarks.  Used by Blockly.Procedures.mutateCallers for reconnection.\n   * @return {!Element} XML storage element.\n   * @this Blockly.Block\n   */\n  mutationToDom: function mutationToDom(optParamIds) {\n    var _this3 = this;\n\n    var container = document.createElement('mutation');\n\n    if (optParamIds) {\n      container.setAttribute('name', this.getFieldValue('NAME'));\n    }\n\n    this.argumentVarModels.forEach(function (arg, i) {\n      var parameter = document.createElement('arg');\n      parameter.setAttribute('name', arg.name);\n      parameter.setAttribute('varid', arg.getId());\n\n      if (optParamIds && _this3.paramIds) {\n        parameter.setAttribute('paramId', _this3.paramIds[i]);\n      }\n\n      container.appendChild(parameter);\n    }); // Save whether the statement input is visible.\n\n    if (!this.hasStatements) {\n      container.setAttribute('statements', 'false');\n    }\n\n    return container;\n  },\n\n  /**\n   * Parse XML to restore the argument inputs.\n   * @param {!Element} xmlElement XML storage element.\n   * @this Blockly.Block\n   */\n  domToMutation: function domToMutation(xmlElement) {\n    var _this4 = this;\n\n    this.arguments = [];\n    this.argumentVarModels = [];\n    xmlElement.childNodes.forEach(function (childNode) {\n      if (childNode.nodeName.toLowerCase() === 'arg') {\n        var varName = childNode.getAttribute('name');\n\n        _this4.arguments.push(varName);\n\n        var varId = childNode.getAttribute('varid') || childNode.getAttribute('varId');\n        var variable = Blockly.Variables.getOrCreateVariablePackage(_this4.workspace, varId, varName, '');\n\n        if (variable !== null) {\n          _this4.argumentVarModels.push(variable);\n        } else {\n          // eslint-disable-next-line no-console\n          console.log(\"Failed to create a variable with name \" + varName + \", ignoring.\");\n        }\n      }\n    });\n    this.updateParams(); // Show or hide the statement input.\n\n    this.setStatements(xmlElement.getAttribute('statements') !== 'false');\n  },\n\n  /**\n   * Return the signature of this procedure definition.\n   * @return {!Array} Tuple containing three elements:\n   *     - the name of the defined procedure,\n   *     - a list of all its arguments,\n   *     - that it DOES NOT have a return value.\n   * @this Blockly.Block\n   */\n  getProcedureDef: function getProcedureDef() {\n    return [this.getFieldValue('NAME'), this.arguments, false];\n  },\n\n  /**\n   * Return all procedure callers related to this block.\n   * @return {!Array.<Blockly.Block>} List of procedure caller blocks\n   * @this Blockly.Block\n   */\n  getProcedureCallers: function getProcedureCallers() {\n    var _this5 = this;\n\n    return this.workspace.getAllBlocks(false).filter(function (block) {\n      return block.type === _this5.callType && block.data === _this5.id;\n    });\n  },\n\n  /**\n   * Return all variables referenced by this block.\n   * @return {!Array.<string>} List of variable names.\n   * @this Blockly.Block\n   */\n  getVars: function getVars() {\n    return this.arguments;\n  },\n\n  /**\n   * Return all variables referenced by this block.\n   * @return {!Array.<!Blockly.VariableModel>} List of variable models.\n   * @this Blockly.Block\n   */\n  getVarModels: function getVarModels() {\n    return this.argumentVarModels;\n  },\n\n  /**\n   * Add custom menu options to this block's context menu.\n   * @param {!Array} options List of menu options to add to.\n   * @this Blockly.Block\n   */\n  customContextMenu: function customContextMenu(options) {\n    var _this6 = this;\n\n    if (this.isInFlyout) {\n      return;\n    } // Add option to create caller.\n\n\n    var option = {\n      enabled: true\n    };\n    var name = this.getFieldValue('NAME');\n    option.text = Blockly.Msg.PROCEDURES_CREATE_DO.replace('%1', name);\n    var xmlMutation = document.createElement('mutation');\n    xmlMutation.setAttribute('name', name);\n    this.arguments.forEach(function (argumentName) {\n      var xmlArg = document.createElement('arg');\n      xmlArg.setAttribute('name', argumentName);\n      xmlMutation.appendChild(xmlArg);\n    });\n    var xmlBlock = document.createElement('block');\n    xmlBlock.setAttribute('type', this.callType);\n    xmlBlock.appendChild(xmlMutation);\n    option.callback = Blockly.ContextMenu.callbackFactory(this, xmlBlock);\n    options.push(option); // Add options to create getters for each parameter.\n\n    if (!this.isCollapsed()) {\n      this.argumentVarModels.forEach(function (argumentVarModel) {\n        var getOption = {\n          enabled: true\n        };\n        getOption.text = Blockly.Msg.VARIABLES_SET_CREATE_GET.replace('%1', argumentVarModel.name);\n        var xmlField = Blockly.Variables.generateVariableFieldDom(argumentVarModel);\n        var xmlOptionBlock = document.createElement('block');\n        xmlOptionBlock.setAttribute('type', 'variables_get');\n        xmlOptionBlock.appendChild(xmlField);\n        getOption.callback = Blockly.ContextMenu.callbackFactory(_this6, xmlOptionBlock);\n        options.push(getOption);\n      });\n    }\n  },\n  callType: 'procedures_callnoreturn'\n};\n\nBlockly.JavaScript.procedures_defnoreturn = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var functionName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Procedures.NAME_TYPE);\n  var branch = Blockly.JavaScript.statementToCode(block, 'STACK');\n\n  if (Blockly.JavaScript.STATEMENT_PREFIX) {\n    var id = block.id.replace(/\\$/g, '$$$$'); // Issue 251.\n\n    branch = Blockly.JavaScript.prefixLines(Blockly.JavaScript.STATEMENT_PREFIX.replace(/%1/g, \"'\" + id + \"'\"), Blockly.JavaScript.INDENT) + branch;\n  }\n\n  if (Blockly.JavaScript.INFINITE_LOOP_TRAP) {\n    branch = Blockly.JavaScript.INFINITE_LOOP_TRAP.replace(/%1/g, \"'\" + block.id + \"'\") + branch;\n  }\n\n  var returnValue = Blockly.JavaScript.valueToCode(block, 'RETURN', Blockly.JavaScript.ORDER_NONE) || '';\n\n  if (returnValue) {\n    returnValue = Blockly.JavaScript.INDENT + \"return \" + returnValue + \";\\n\";\n  }\n\n  var args = block.arguments.map(function (argumentName) {\n    return Blockly.JavaScript.variableDB_.getName(argumentName, Blockly.Variables.NAME_TYPE);\n  } // eslint-disable-line no-underscore-dangle\n  ); // eslint-disable-next-line no-underscore-dangle\n\n  var code = Blockly.JavaScript.scrub_(block, \"\\n    function \" + functionName + \"(\" + args.join(', ') + \") {\\n        \" + branch + \"\\n        \" + returnValue + \"\\n    }\\n\"); // Add % so as not to collide with helper functions in definitions list.\n  // eslint-disable-next-line no-underscore-dangle\n\n  Blockly.JavaScript.definitions_[\"%\" + functionName] = code;\n  return null;\n};","import { plusIconDark } from '../../images';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.procedures_defreturn = {\n  init: function init() {\n    var _this = this;\n\n    this.arguments = [];\n    this.argumentVarModels = [];\n    this.jsonInit(this.definition()); // Enforce unique procedure names\n\n    var nameField = this.getField('NAME');\n    nameField.setValidator(Blockly.Procedures.rename); // Render a ➕-icon for adding parameters\n\n    var fieldImage = new Blockly.FieldImage(plusIconDark, 24, 24, '+', function () {\n      return _this.onAddClick();\n    });\n    this.appendDummyInput('ADD_ICON').appendField(fieldImage);\n    this.moveInputBefore('ADD_ICON', 'RETURN');\n    this.setStatements(true);\n  },\n  definition: function definition() {\n    return {\n      message0: translate('function %1 %2 %3'),\n      message1: 'return %1',\n      args0: [{\n        type: 'field_input',\n        name: 'NAME',\n        text: ''\n      }, {\n        type: 'field_label',\n        name: 'PARAMS',\n        text: ''\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_value',\n        name: 'RETURN',\n        check: null,\n        align: Blockly.ALIGN_RIGHT\n      }],\n      colour: Blockly.Colours.BinaryProcedures.colour,\n      colourSecondary: Blockly.Colours.BinaryProcedures.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryProcedures.colourTertiary,\n      tooltip: translate('Function def with return value'),\n      category: Blockly.Categories.Functions\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Function def with return value'),\n      'description': translate('Function def with return value Description')\n    };\n  },\n  onAddClick: Blockly.Blocks.procedures_defnoreturn.onAddClick,\n  onchange: Blockly.Blocks.procedures_defnoreturn.onchange,\n  setStatements: Blockly.Blocks.procedures_defnoreturn.setStatements,\n  updateParams: Blockly.Blocks.procedures_defnoreturn.updateParams,\n  mutationToDom: Blockly.Blocks.procedures_defnoreturn.mutationToDom,\n  domToMutation: Blockly.Blocks.procedures_defnoreturn.domToMutation,\n\n  /**\n   * Return the signature of this procedure definition.\n   * @return {!Array} Tuple containing three elements:\n   *     - the name of the defined procedure,\n   *     - a list of all its arguments,\n   *     - that it DOES have a return value.\n   * @this Blockly.Block\n   */\n  getProcedureDef: function getProcedureDef() {\n    return [this.getFieldValue('NAME'), this.arguments, true];\n  },\n  getProcedureCallers: Blockly.Blocks.procedures_defnoreturn.getProcedureCallers,\n  getVars: Blockly.Blocks.procedures_defnoreturn.getVars,\n  getVarModels: Blockly.Blocks.procedures_defnoreturn.getVarModels,\n  renameVarById: Blockly.Blocks.procedures_defnoreturn.renameVarById,\n  updateVarName: Blockly.Blocks.procedures_defnoreturn.updateVarName,\n  displayRenamedVar: Blockly.Blocks.procedures_defnoreturn.displayRenamedVar,\n  customContextMenu: Blockly.Blocks.procedures_defnoreturn.customContextMenu,\n  callType: 'procedures_callreturn',\n  registerWorkspaceListener: Blockly.Blocks.procedures_defnoreturn.registerWorkspaceListener\n};\nBlockly.JavaScript.procedures_defreturn = Blockly.JavaScript.procedures_defnoreturn;","import \"core-js/modules/es6.number.constructor\";\nimport { setBlockTextColor } from '../../../utils';\nimport { translate } from '../../../../utils/lang/i18n';\n/**\n * Block for conditionally returning a value from a procedure.\n * @this Blockly.Block\n */\n\nBlockly.Blocks.procedures_ifreturn = {\n  init: function init() {\n    this.hasReturnValue = true;\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('if %1 return %2'),\n      args0: [{\n        type: 'input_value',\n        name: 'CONDITION'\n      }, {\n        type: 'input_value',\n        name: 'VALUE'\n      }],\n      colour: Blockly.Colours.BinaryProcedures.colour,\n      colourSecondary: Blockly.Colours.BinaryProcedures.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryProcedures.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Function If Else'),\n      category: Blockly.Categories.Functions\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Function If else'),\n      'description': translate('Function If else Description')\n    };\n  },\n\n  /**\n   * Create XML to represent whether this block has a return value.\n   * @return {!Element} XML storage element.\n   * @this Blockly.Block\n   */\n  mutationToDom: function mutationToDom() {\n    var container = document.createElement('mutation');\n    container.setAttribute('value', Number(this.hasReturnValue));\n    return container;\n  },\n\n  /**\n   * Parse XML to restore whether this block has a return value.\n   * @param {!Element} xmlElement XML storage element.\n   * @this Blockly.Block\n   */\n  domToMutation: function domToMutation(xmlElement) {\n    var value = xmlElement.getAttribute('value');\n    this.hasReturnValue = value === '1';\n\n    if (!this.hasReturnValue) {\n      this.removeInput('VALUE');\n      this.appendDummyInput('VALUE').appendField(translate('return'));\n      this.initSvg();\n      this.render();\n    }\n  },\n\n  /**\n   * Called whenever anything on the workspace changes.\n   * Add warning if this flow block is not nested inside a loop.\n   * @param {!Blockly.Events.Abstract} e Change event.\n   * @this Blockly.Block\n   */\n  onchange: function onchange()\n  /* e */\n  {\n    var _this = this;\n\n    setBlockTextColor(this);\n\n    if (!this.workspace.isDragging || this.workspace.isDragging()) {\n      return; // Don't change state at the start of a drag.\n    }\n\n    var legal = false; // Is the block nested in a procedure?\n\n    var block = this;\n\n    do {\n      if (this.FUNCTION_TYPES.indexOf(block.type) !== -1) {\n        legal = true;\n        break;\n      }\n\n      block = block.getSurroundParent();\n    } while (block);\n\n    if (legal) {\n      var rerender = function rerender() {\n        _this.initSvg();\n\n        _this.render();\n      }; // If needed, toggle whether this block has a return value.\n\n\n      if (block.type === 'procedures_defnoreturn' && this.hasReturnValue) {\n        this.removeInput('VALUE');\n        this.appendDummyInput('VALUE').appendField(translate('return'));\n        rerender();\n        this.hasReturnValue = false;\n      } else if (block.type === 'procedures_defreturn' && !this.hasReturnValue) {\n        this.removeInput('VALUE');\n        this.appendValueInput('VALUE').appendField(translate('return'));\n        rerender();\n        this.hasReturnValue = true;\n      }\n\n      if (!this.isInFlyout) {\n        this.setDisabled(false);\n      }\n    } else if (!this.isInFlyout && !this.getInheritedDisabled()) {\n      this.setDisabled(true);\n    }\n  },\n\n  /**\n   * List of block types that are functions and thus do not need warnings.\n   * To add a new function type add this to your code:\n   * Blockly.Blocks['procedures_ifreturn'].FUNCTION_TYPES.push('custom_func');\n   */\n  FUNCTION_TYPES: ['procedures_defnoreturn', 'procedures_defreturn']\n};\n\nBlockly.JavaScript.procedures_ifreturn = function (block) {\n  var condition = Blockly.JavaScript.valueToCode(block, 'CONDITION', Blockly.JavaScript.ORDER_NONE) || 'false';\n  var branch;\n\n  if (block.hasReturnValue) {\n    var value = Blockly.JavaScript.valueToCode(block, 'VALUE', Blockly.JavaScript.ORDER_NONE) || 'null';\n    branch = \"return \" + value + \";\\n\";\n  } else {\n    branch = 'return;\\n';\n  }\n\n  var code = \"\\n    if (\" + condition + \") {\\n        \" + branch + \"\\n    }\\n\";\n  return code;\n};","import { plusIconDark } from '../../images';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lists_create_with = {\n  init: function init() {\n    var _this = this;\n\n    this.jsonInit(this.definition()); // Render a ➕-icon for adding additional `lists_statement` blocks\n\n    var fieldImage = new Blockly.FieldImage(plusIconDark, 25, 25, '', function () {\n      return _this.onIconClick();\n    });\n    this.appendDummyInput('ADD_ICON').appendField(fieldImage);\n    this.moveInputBefore('ADD_ICON', 'STACK');\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to create list with'),\n      message1: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: translate('list')\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'STACK'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Create List with'),\n      category: Blockly.Categories.List\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Create list with'),\n      'description': translate('Create list with description')\n    };\n  },\n  onIconClick: function onIconClick() {\n    if (!this.workspace || this.isInFlyout) {\n      return;\n    }\n\n    var statementBlock = this.workspace.newBlock('lists_statement');\n    statementBlock.requiredParentId = this.id;\n    statementBlock.setMovable(false);\n    statementBlock.initSvg();\n    statementBlock.render();\n    var connection = this.getLastConnectionInStatement('STACK');\n    connection.connect(statementBlock.previousConnection);\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.END_DRAG) {\n      // Only allow `lists_statement` blocks to be part of the `STACK`\n      var currentBlock = this.getInputTargetBlock('STACK');\n\n      while (currentBlock !== null) {\n        if (currentBlock.type !== 'lists_statement') {\n          currentBlock.unplug(false);\n        }\n\n        currentBlock = currentBlock.getNextBlock();\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.lists_create_with = function (block) {\n  var variable = block.getFieldValue('VARIABLE'); // eslint-disable-next-line no-underscore-dangle\n\n  var varName = Blockly.JavaScript.variableDB_.getName(variable, Blockly.Variables.NAME_TYPE);\n  var elements = [];\n  var currentBlock = block.getInputTargetBlock('STACK');\n\n  while (currentBlock !== null) {\n    var value = Blockly.JavaScript[currentBlock.type](currentBlock);\n\n    if (Array.isArray(value) && value.length === 2) {\n      elements.push(value[0]);\n    } else {\n      elements.push(value);\n    }\n\n    currentBlock = currentBlock.getNextBlock();\n  }\n\n  var code = varName + \" = [\" + elements.join(', ') + \"];\\n\";\n  return code;\n};","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lists_getIndex = {\n  init: function init() {\n    var _this = this;\n\n    this.MODE_OPTIONS = [[translate('get'), 'GET'], [translate('get and remove'), 'GET_REMOVE'], [translate('remove'), 'REMOVE']];\n    this.WHERE_OPTIONS = [['#', 'FROM_START'], [translate('# from end'), 'FROM_END'], [translate('first'), 'FIRST'], [translate('last'), 'LAST'], [translate('random'), 'RANDOM']];\n    var modeMenu = new Blockly.FieldDropdown(this.MODE_OPTIONS, function (value) {\n      var isStatement = value === 'REMOVE';\n\n      _this.updateStatement(isStatement);\n    });\n    this.appendValueInput('VALUE').setCheck('Array').appendField(translate('in list'));\n    this.appendDummyInput().appendField(modeMenu, 'MODE');\n    this.appendDummyInput('AT'); // eslint-disable-next-line no-underscore-dangle\n\n    this.setColourFromRawValues_(Blockly.Colours.Binary.colour, Blockly.Colours.Binary.colourSecondary, Blockly.Colours.Binary.colourTertiary);\n    this.setOutput(true, null);\n    this.updateAt(true);\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('List Get Index'),\n      'description': translate('List Get Index Description'),\n      'category': Blockly.Categories.List\n    };\n  },\n  mutationToDom: function mutationToDom() {\n    var container = document.createElement('mutation');\n    var isStatement = !this.outputConnection;\n    var isAt = this.getInput('AT').type === Blockly.INPUT_VALUE;\n    container.setAttribute('statement', isStatement);\n    container.setAttribute('at', isAt);\n    return container;\n  },\n  domToMutation: function domToMutation(xmlElement) {\n    var isStatement = xmlElement.getAttribute('statement') === 'true';\n    this.updateStatement(isStatement);\n    var isAt = xmlElement.getAttribute('at') !== 'false';\n    this.updateAt(isAt);\n  },\n  updateStatement: function updateStatement(newStatement) {\n    var oldStatement = !this.outputConnection;\n\n    if (newStatement !== oldStatement) {\n      this.unplug(true, true);\n      this.setOutput(!newStatement);\n      this.setPreviousStatement(newStatement);\n      this.setNextStatement(newStatement);\n      this.initSvg();\n      this.render(false);\n    }\n  },\n  updateAt: function updateAt(isAt) {\n    var _this2 = this;\n\n    this.removeInput('AT', true);\n\n    if (isAt) {\n      this.appendValueInput('AT').setCheck('Number');\n    } else {\n      this.appendDummyInput('AT');\n    }\n\n    var menu = new Blockly.FieldDropdown(this.WHERE_OPTIONS, function (value) {\n      var newAt = ['FROM_START', 'FROM_END'].includes(value);\n\n      if (newAt !== isAt) {\n        _this2.updateAt(newAt);\n\n        _this2.setFieldValue(value, 'WHERE');\n\n        return null;\n      }\n\n      return undefined;\n    });\n    this.getInput('AT').appendField(menu, 'WHERE');\n    this.initSvg();\n    this.render(false);\n  }\n};\n\nBlockly.JavaScript.lists_getIndex = function (block) {\n  var mode = block.getFieldValue('MODE') || 'GET';\n  var where = block.getFieldValue('WHERE') || 'FIRST';\n  var listOrder = where === 'RANDOM' ? Blockly.JavaScript.ORDER_COMMA : Blockly.JavaScript.ORDER_MEMBER;\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', listOrder) || '[]';\n  var code, order;\n\n  if (where === 'FIRST') {\n    if (mode === 'GET') {\n      code = list + \"[0]\";\n      order = Blockly.JavaScript.ORDER_MEMBER;\n    } else if (mode === 'GET_REMOVE') {\n      code = list + \".shift()\";\n      order = Blockly.JavaScript.ORDER_MEMBER;\n    } else if (mode === 'REMOVE') {\n      return list + \".shift();\\n\";\n    }\n  } else if (where === 'LAST') {\n    if (mode === 'GET') {\n      code = list + \".slice(-1)[0]\";\n      order = Blockly.JavaScript.ORDER_MEMBER;\n    } else if (mode === 'GET_REMOVE') {\n      code = list + \".pop()\";\n      order = Blockly.JavaScript.ORDER_MEMBER;\n    } else if (mode === 'REMOVE') {\n      return list + \".pop();\\n\";\n    }\n  } else if (where === 'FROM_START') {\n    var at = Blockly.JavaScript.getAdjusted(block, 'AT');\n\n    if (mode === 'GET') {\n      code = list + \"[\" + at + \"]\";\n      order = Blockly.JavaScript.ORDER_MEMBER;\n    } else if (mode === 'GET_REMOVE') {\n      code = list + \".splice(\" + at + \", 1)[0]\";\n      order = Blockly.JavaScript.ORDER_FUNCTION_CALL;\n    } else if (mode === 'REMOVE') {\n      return list + \".splice(\" + at + \", 1);\\n\";\n    }\n  } else if (where === 'FROM_END') {\n    var _at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\n\n    if (mode === 'GET') {\n      code = list + \".slice(\" + _at + \")[0]\";\n      order = Blockly.JavaScript.ORDER_FUNCTION_CALL;\n    } else if (mode === 'GET_REMOVE') {\n      code = list + \".splice(\" + _at + \", 1)[0]\";\n      order = Blockly.JavaScript.ORDER_FUNCTION_CALL;\n    } else if (mode === 'REMOVE') {\n      return list + \".splice(\" + _at + \", 1);\\n\";\n    }\n  } else if (where === 'RANDOM') {\n    // eslint-disable-next-line no-underscore-dangle\n    var functionName = Blockly.JavaScript.provideFunction_('listsGetRandomItem', [// eslint-disable-next-line no-underscore-dangle\n    \"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(list, remove) {\\n                var x = Math.floor(Math.random() * list.length);\\n                if (remove) {\\n                    return list.splice(x, 1)[0];\\n                } else {\\n                    return list[x];\\n                }\\n            }\"]);\n    code = functionName + \"(\" + list + \", \" + (mode !== 'GET') + \")\";\n\n    if (mode === 'GET' || mode === 'GET_REMOVE') {\n      order = Blockly.JavaScript.ORDER_FUNCTION_CALL;\n    } else if (mode === 'REMOVE') {\n      return code + \";\\n\";\n    }\n  }\n\n  return [code, order];\n};","import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lists_getSublist = {\n  init: function init() {\n    this.WHERE_OPTIONS_1 = [[translate('get sub-list from #'), 'FROM_START'], [translate('get sub-list from # from end'), 'FROM_END'], [translate('get sub-list from first'), 'FIRST']];\n    this.WHERE_OPTIONS_2 = [[translate('#'), 'FROM_START'], [translate('# from end'), 'FROM_END'], [translate('last'), 'LAST']];\n    this.appendValueInput('LIST').appendField(translate('in list'));\n    this.appendDummyInput('AT1');\n    this.appendDummyInput('AT2'); // eslint-disable-next-line no-underscore-dangle\n\n    this.setColourFromRawValues_(Blockly.Colours.Binary.colour, Blockly.Colours.Binary.colourSecondary, Blockly.Colours.Binary.colourTertiary);\n    this.setOutput(true, null);\n    this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n    this.updateAt(1, true);\n    this.updateAt(2, true);\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('List get sublit'),\n      'description': translate('List get sublist description'),\n      'category': Blockly.Categories.List\n    };\n  },\n  mutationToDom: function mutationToDom() {\n    var container = document.createElement('mutation');\n    var isAt1 = this.getInput('AT1').type === Blockly.INPUT_VALUE;\n    var isAt2 = this.getInput('AT2').type === Blockly.INPUT_VALUE;\n    container.setAttribute('at1', isAt1);\n    container.setAttribute('at2', isAt2);\n    return container;\n  },\n  domToMutation: function domToMutation(xmlElement) {\n    var isAt1 = xmlElement.getAttribute('at1') === 'true';\n    var isAt2 = xmlElement.getAttribute('at2') === 'true';\n    this.updateAt(1, isAt1);\n    this.updateAt(2, isAt2);\n  },\n  updateAt: function updateAt(n, isAt) {\n    var _this = this;\n\n    this.removeInput(\"AT\" + n);\n\n    if (isAt) {\n      this.appendValueInput(\"AT\" + n).setCheck('Number');\n    } else {\n      this.appendDummyInput(\"AT\" + n);\n    }\n\n    var menu = new Blockly.FieldDropdown(this[\"WHERE_OPTIONS_\" + n], function (value) {\n      var newAt = ['FROM_START', 'FROM_END'].includes(value);\n\n      if (newAt !== isAt) {\n        _this.updateAt(n, newAt);\n\n        _this.setFieldValue(value, \"WHERE\" + n);\n\n        return null;\n      }\n\n      return undefined;\n    });\n    this.getInput(\"AT\" + n).appendField(menu, \"WHERE\" + n);\n\n    if (n === 1) {\n      this.moveInputBefore('AT1', 'AT2');\n    }\n\n    this.initSvg();\n    this.render(false);\n  }\n};\n\nBlockly.JavaScript.lists_getSublist = function (block) {\n  var list = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_MEMBER) || '[]';\n  var where1 = block.getFieldValue('WHERE1');\n  var where2 = block.getFieldValue('WHERE2');\n  var at1, at2, code;\n\n  if (list.match(/^\\w+$/)) {\n    if (where1 === 'FROM_START') {\n      at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\n    } else if (where1 === 'FROM_END') {\n      at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false, Blockly.JavaScript.ORDER_SUBTRACTION);\n      at1 = list + \".length - \" + at1;\n    }\n\n    if (where2 === 'FROM_START') {\n      at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 1);\n    } else if (where2 === 'FROM_END') {\n      at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false, Blockly.JavaScript.ORDER_SUBTRACTION);\n      at2 = list + \".length - \" + at2;\n    }\n\n    code = list + \".slice(\" + at1 + \", \" + at2 + \")\";\n  } else {\n    at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\n    at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\n    var wherePascalCase = {\n      FROM_START: 'FromStart',\n      FROM_END: 'FromEnd'\n    };\n\n    var getIndex = function getIndex(listName, where, at) {\n      return where === 'FROM_END' ? listName + \".length - 1 - \" + at : at;\n    }; // eslint-disable-next-line no-underscore-dangle\n\n\n    var functionName = Blockly.JavaScript.provideFunction_(\"subsequence\" + wherePascalCase[where1] + wherePascalCase[where2], [// eslint-disable-next-line no-underscore-dangle\n    \"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(sequence, at1, at2) {\\n                var start = \" + getIndex('sequence', where1, 'at1') + \";\\n                var end = \" + getIndex('sequence', where2, 'at2') + \";\\n                return sequence.slice(start, end);\\n            }\"]);\n    code = functionName + \"(\" + list + \", \" + at1 + \", \" + at2 + \")\";\n  }\n\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lists_indexOf = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('in list %1 find %2 occurence of item %3'),\n      args0: [{\n        type: 'input_value',\n        name: 'VALUE'\n      }, {\n        type: 'field_dropdown',\n        name: 'END',\n        options: [[translate('first'), 'FIRST'], [translate('last'), 'LAST']]\n      }, {\n        type: 'input_value',\n        name: 'FIND'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Index of List Tooltip'),\n      category: Blockly.Categories.List\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Index Of List'),\n      'description': translate('Index of List Description')\n    };\n  }\n};\n\nBlockly.JavaScript.lists_indexOf = function (block) {\n  var operator = block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  var item = Blockly.JavaScript.valueToCode(block, 'FIND', Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\n  var code = list + \".\" + operator + \"(\" + item + \")\";\n\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + \" + 1\", Blockly.JavaScript.ORDER_ADDITION];\n  }\n\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find-index\";\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lists_isEmpty = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('list %1 is empty'),\n      args0: [{\n        type: 'input_value',\n        name: 'VALUE',\n        check: ['Array']\n      }],\n      output: 'Boolean',\n      outputShape: Blockly.OUTPUT_SHAPE_HEXAGONAL,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('List is Empty Tooltip'),\n      category: Blockly.Categories.List\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('List is Empty'),\n      'description': translate('List is empty Description')\n    };\n  }\n};\n\nBlockly.JavaScript.lists_isEmpty = function (block) {\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', Blockly.JavaScript.ORDER_MEMBER) || '[]';\n  var isVariable = block.workspace.getAllVariables().findIndex(function (variable) {\n    return variable.name === list;\n  }) !== -1;\n  var code = isVariable ? \"!\" + list + \" || !\" + list + \".length\" : \"!\" + list + \".length\";\n  return [code, Blockly.JavaScript.ORDER_LOGICAL_NOT];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lists_length = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('length of %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'VALUE'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('List Length Tooltip'),\n      category: Blockly.Categories.List\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('List Length'),\n      'description': translate('List Length Description')\n    };\n  }\n};\n\nBlockly.JavaScript.lists_length = function (block) {\n  var list = Blockly.JavaScript.valueToCode(block, 'VALUE', Blockly.JavaScript.ORDER_MEMBER) || '[]';\n  var code = list + \".length\";\n  return [code, Blockly.JavaScript.ORDER_MEMBER];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lists_repeat = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to item %2 repeated %3 times'),\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: translate('list')\n      }, {\n        type: 'input_value',\n        name: 'ITEM'\n      }, {\n        type: 'input_value',\n        name: 'NUM'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('List Repeat Tooltip'),\n      category: Blockly.Categories.List\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('List Repeat'),\n      'description': translate('List Repeat Description')\n    };\n  }\n};\n\nBlockly.JavaScript.lists_repeat = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VARIABLE'), Blockly.Variables.NAME_TYPE); // eslint-disable-next-line no-underscore-dangle\n\n  var functionName = Blockly.JavaScript.provideFunction_('listsRepeat', [// eslint-disable-next-line no-underscore-dangle\n  \"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(value, n) {\\n            var array = [];\\n            for (var i = 0; i < n; i++) {\\n                array[i] = value;\\n            }\\n            return array;\\n        }\"]);\n  var element = Blockly.JavaScript.valueToCode(block, 'ITEM', Blockly.JavaScript.ORDER_COMMA) || 'null';\n  var repeatCount = Blockly.JavaScript.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_COMMA) || '0';\n  var code = varName + \" = \" + functionName + \"(\" + element + \", \" + repeatCount + \");\\n\";\n  return code;\n};","import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lists_setIndex = {\n  init: function init() {\n    this.MODE_OPTIONS = [[translate('set'), 'SET'], [translate('insert at'), 'INSERT']];\n    this.WHERE_OPTIONS = [[translate('#'), 'FROM_START'], [translate('# from end'), 'FROM_END'], [translate('first'), 'FIRST'], [translate('last'), 'LAST'], [translate('random'), 'RANDOM']];\n    this.appendValueInput('LIST').setCheck('Array').appendField(translate('in list'));\n    this.appendDummyInput().appendField(new Blockly.FieldDropdown(this.MODE_OPTIONS), 'MODE');\n    this.appendDummyInput('AT');\n    this.appendValueInput('TO').appendField(translate('as')); // eslint-disable-next-line no-underscore-dangle\n\n    this.setColourFromRawValues_(Blockly.Colours.Binary.colour, Blockly.Colours.Binary.colourSecondary, Blockly.Colours.Binary.colourTertiary);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.updateAt(true);\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('List set Index'),\n      'description': translate('List set Index'),\n      'category': Blockly.Categories.List\n    };\n  },\n  mutationToDom: function mutationToDom() {\n    var container = document.createElement('mutation');\n    var isAt = this.getInput('AT').type === Blockly.INPUT_VALUE;\n    container.setAttribute('at', isAt);\n    return container;\n  },\n  domToMutation: function domToMutation(xmlElement) {\n    var isAt = xmlElement.getAttribute('at') !== 'false';\n    this.updateAt(isAt);\n  },\n  updateAt: function updateAt(isAt) {\n    var _this = this;\n\n    this.removeInput('AT', true);\n\n    if (isAt) {\n      this.appendValueInput('AT').setCheck('Number');\n    } else {\n      this.appendDummyInput('AT');\n    }\n\n    var menu = new Blockly.FieldDropdown(this.WHERE_OPTIONS, function (value) {\n      var newAt = ['FROM_START', 'FROM_END'].includes(value);\n\n      if (newAt !== isAt) {\n        _this.updateAt(newAt);\n\n        _this.setFieldValue(value, 'WHERE');\n\n        return null;\n      }\n\n      return undefined;\n    });\n    this.moveInputBefore('AT', 'TO');\n    this.getInput('AT').appendField(menu, 'WHERE');\n    this.initSvg();\n    this.render(false);\n  }\n};\n\nBlockly.JavaScript.lists_setIndex = function (block) {\n  var mode = block.getFieldValue('MODE') || 'SET';\n  var where = block.getFieldValue('WHERE') || 'FIRST';\n  var value = Blockly.JavaScript.valueToCode(block, 'TO', Blockly.JavaScript.ORDER_ASSIGNMENT) || 'null';\n  var list = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_MEMBER) || '[]';\n\n  var cacheList = function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    } // eslint-disable-next-line no-underscore-dangle\n\n\n    var listVar = Blockly.JavaScript.variableDB_.getDistinctName('tmpList', Blockly.Variables.NAME_TYPE);\n    var code = \"var \" + listVar + \" = \" + list + \";\\n\";\n    list = listVar;\n    return code;\n  };\n\n  var code;\n\n  if (where === 'FIRST') {\n    if (mode === 'SET') {\n      code = list + \"[0] = \" + value + \";\\n\";\n    } else if (mode === 'INSERT') {\n      code = list + \".unshift(\" + value + \");\\n\";\n    }\n  } else if (where === 'LAST') {\n    if (mode === 'SET') {\n      code = cacheList();\n      code += list + \"[\" + list + \".length - 1] = \" + value + \";\\n\";\n    } else if (mode === 'INSERT') {\n      code = list + \".push(\" + value + \");\\n\";\n    }\n  } else if (where === 'FROM_START') {\n    var at = Blockly.JavaScript.getAdjusted(block, 'AT');\n\n    if (mode === 'SET') {\n      code = list + \"[\" + at + \"] = \" + value + \";\\n\";\n    } else if (mode === 'INSERT') {\n      code = list + \".splice(\" + at + \", 0, \" + value + \");\\n\";\n    }\n  } else if (where === 'FROM_END') {\n    var _at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, false, Blockly.JavaScript.ORDER_SUBTRACTION);\n\n    code = cacheList();\n\n    if (mode === 'SET') {\n      code = list + \"[\" + list + \".length - \" + _at + \"] = \" + value + \";\\n\";\n    } else if (mode === 'INSERT') {\n      code = list + \".splice(\" + list + \".length - \" + _at + \", 0, \" + value + \");\\n\";\n    }\n  } else if (where === 'RANDOM') {\n    code = cacheList(); // eslint-disable-next-line no-underscore-dangle\n\n    var xVar = Blockly.JavaScript.variableDB_.getDistinctName('tmpX', Blockly.Variables.NAME_TYPE);\n    code += \"var \" + xVar + \" = Math.floor(Math.random() * \" + list + \".length);\\n\";\n\n    if (mode === 'SET') {\n      code += list + \"[\" + xVar + \"] = \" + value + \";\\n\";\n    } else if (mode === 'INSERT') {\n      code += list + \".splice(\" + xVar + \", 0, \" + value + \");\\n\";\n    }\n  }\n\n  return code;\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lists_sort = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('sort %1 %2 %3'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'TYPE',\n        options: [[translate('numeric'), 'NUMERIC'], [translate('alphabetic'), 'TEXT']]\n      }, {\n        type: 'field_dropdown',\n        name: 'DIRECTION',\n        options: [[translate('ascending'), '1'], [translate('descending'), '-1']]\n      }, {\n        type: 'input_value',\n        name: 'LIST'\n      }],\n      output: 'Array',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('List Sort Tooltip'),\n      category: Blockly.Categories.List\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('List Sort'),\n      'description': translate('List Sort Description')\n    };\n  }\n};\n\nBlockly.JavaScript.lists_sort = function (block) {\n  var list = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_FUNCTION_CALL) || '[]';\n  var direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  var type = block.getFieldValue('TYPE'); // eslint-disable-next-line no-underscore-dangle\n\n  var getCompareFunctionName = Blockly.JavaScript.provideFunction_('listsGetSortCompare', [// eslint-disable-next-line no-underscore-dangle\n  \"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(type, direction) {\\n            var compareFuncs = {\\n                NUMERIC: function(a, b) {\\n                    return parseFloat(a) - parseFloat(b);\\n                },\\n                TEXT: function(a, b) {\\n                    return a.toString().toLowerCase() > b.toString().toLowerCase() ? 1 : -1;\\n                }\\n            };\\n\\n            return function(a, b) {\\n                return compareFuncs[type](a, b) * direction; \\n            }\\n        }\"]);\n  var code = list + \".slice(0).sort(\" + getCompareFunctionName + \"(\\\"\" + type + \"\\\", \" + direction + \"))\";\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lists_split = {\n  init: function init() {\n    var _this = this;\n\n    var dropdown = new Blockly.FieldDropdown([[translate('make list from text'), 'SPLIT'], [translate('make text from list'), 'JOIN']], function (newMode) {\n      return _this.updateType(newMode);\n    });\n    this.appendValueInput('INPUT').setCheck('String').appendField(dropdown, 'MODE');\n    this.appendValueInput('DELIM').setCheck('String').appendField('', 'SPACE1').appendField(translate('with delimiter'), 'DELIM_LABEL');\n    this.appendDummyInput().appendField('', 'SPACE2');\n    this.setOutput(true, 'Array');\n    this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND); // eslint-disable-next-line no-underscore-dangle\n\n    this.setColourFromRawValues_(Blockly.Colours.Binary.colour, Blockly.Colours.Binary.colourSecondary, Blockly.Colours.Binary.colourTertiary);\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('List Split'),\n      'description': translate('List SPlit Description'),\n      'category': Blockly.Categories.List\n    };\n  },\n  mutationToDom: function mutationToDom() {\n    var container = document.createElement('mutation');\n    container.setAttribute('mode', this.getFieldValue('MODE'));\n    return container;\n  },\n  domToMutation: function domToMutation(xmlElement) {\n    this.updateType(xmlElement.getAttribute('mode'));\n  },\n  updateType: function updateType(newMode) {\n    var delimInput = this.getInput('DELIM');\n    var spaceField = this.getField('SPACE1');\n\n    if (newMode === 'SPLIT') {\n      this.outputConnection.setCheck('Array');\n      this.getInput('INPUT').setCheck('String'); // Create extra spacing for OUTPUT_SHAPE_SQUARE (i.e. string shapes)\n\n      if (!spaceField) {\n        delimInput.insertFieldAt(0, '', 'SPACE1');\n      }\n    } else {\n      this.outputConnection.setCheck('String');\n      this.getInput('INPUT').setCheck(null);\n\n      if (spaceField) {\n        delimInput.removeField('SPACE1');\n      }\n    }\n\n    this.initSvg();\n    this.render(false);\n  }\n};\n\nBlockly.JavaScript.lists_split = function (block) {\n  var input = Blockly.JavaScript.valueToCode(block, 'INPUT', Blockly.JavaScript.ORDER_MEMBER);\n  var delimiter = Blockly.JavaScript.valueToCode(block, 'DELIM', Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\n  var mode = block.getFieldValue('MODE');\n  var code;\n\n  if (mode === 'SPLIT') {\n    code = (input || '\\'\\'') + \".split(\" + delimiter + \")\";\n  } else if (mode === 'JOIN') {\n    code = (input || '[]') + \".join(\" + delimiter + \")\";\n  }\n\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import \"core-js/modules/es6.array.find\";\nimport { minusIconDark } from '../../images';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lists_statement = {\n  init: function init() {\n    var _this = this;\n\n    this.requiredParentId = '';\n    this.jsonInit(this.definition()); // Render a ➖-icon for removing self\n\n    var fieldImage = new Blockly.FieldImage(minusIconDark, 25, 25, '', function () {\n      return _this.onIconClick();\n    });\n    this.appendDummyInput('REMOVE_ICON').appendField(fieldImage);\n  },\n  definition: function definition() {\n    return {\n      message0: '%1',\n      args0: [{\n        type: 'input_value',\n        name: 'VALUE'\n      }],\n      colour: Blockly.Colours.BinaryLessGray.colour,\n      colourSecondary: Blockly.Colours.BinaryLessGray.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessGray.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('List Statement Tooltip'),\n      category: Blockly.Categories.List\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('List Statement'),\n      'description': translate('List Statement Description')\n    };\n  },\n  onIconClick: function onIconClick() {\n    if (!this.workspace || this.isInFlyout) {\n      return;\n    }\n\n    this.unplug(true);\n    this.dispose();\n  },\n  onchange: function onchange(event) {\n    var _this2 = this;\n\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    var surroundParent = this.getSurroundParent();\n\n    if (event.type === Blockly.Events.END_DRAG) {\n      if (!this.requiredParentId && surroundParent.type === 'lists_create_with') {\n        this.requiredParentId = surroundParent.id;\n      } else if (!surroundParent || surroundParent.id !== this.requiredParentId) {\n        Blockly.Events.disable();\n        this.unplug(false);\n        var parentBlock = this.workspace.getAllBlocks().find(function (block) {\n          return block.id === _this2.requiredParentId;\n        });\n\n        if (parentBlock) {\n          var parentConnection = parentBlock.getLastConnectionInStatement('STACK');\n          parentConnection.connect(this.previousConnection);\n        } else {\n          this.dispose();\n        }\n\n        Blockly.Events.enable();\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.lists_statement = function (block) {\n  var code = Blockly.JavaScript.valueToCode(block, 'VALUE') || 'null';\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.controls_flow_statements = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('%1 of loop'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'FLOW',\n        options: [[translate('break out'), 'BREAK'], [translate('continue with next iteration'), 'CONTINUE']]\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Control Statement Tooltip'),\n      category: Blockly.Categories.Loop\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Control Statement'),\n      'description': translate('Control Statement Description')\n    };\n  }\n};\n\nBlockly.JavaScript.controls_flow_statements = function (block) {\n  var keyword = block.getFieldValue('FLOW') === 'BREAK' ? 'break' : 'continue';\n  return keyword + \";\\n\";\n};","import \"core-js/modules/es6.regexp.match\";\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.controls_for = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('count with %1 from %2 to %3 by %4'),\n      args0: [{\n        type: 'field_variable',\n        name: 'VAR',\n        variable: null\n      }, {\n        type: 'input_value',\n        name: 'FROM',\n        check: 'Number'\n      }, {\n        type: 'input_value',\n        name: 'TO',\n        check: 'Number'\n      }, {\n        type: 'input_value',\n        name: 'BY',\n        check: 'Number'\n      }],\n      message1: translate('do %1'),\n      args1: [{\n        type: 'input_statement',\n        name: 'DO'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Control For Tooltip'),\n      category: Blockly.Categories.Loop\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Control For'),\n      'description': translate('Control For Description')\n    };\n  }\n};\n\nBlockly.JavaScript.controls_for = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var variable0 = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM', Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO', Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';\n  var increment = Blockly.JavaScript.valueToCode(block, 'BY', Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\n  var code = '';\n\n  if (Blockly.isNumber(argument0) && Blockly.isNumber(argument1) && Blockly.isNumber(increment)) {\n    var up = parseFloat(argument0) <= parseFloat(argument1);\n    var operator = up ? '<=' : '>=';\n    var step = Math.abs(parseFloat(increment));\n    var assignment = variable0 + \" = \" + argument0;\n    var condition = variable0 + \" \" + operator + \" \" + argument1;\n    var statement = variable0 + \" \" + (up ? '+=' : '-=') + \" \" + step;\n    code = \"\\n        for (\" + assignment + \"; \" + condition + \"; \" + statement + \") {\\n            \" + branch + \"\\n        }\\n\";\n  } else {\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    var startVar = argument0;\n\n    if (!argument0.match(/^\\w+$/) && !Blockly.isNumber(argument0)) {\n      // eslint-disable-next-line no-underscore-dangle\n      startVar = Blockly.JavaScript.variableDB_.getDistinctName(variable0 + \"_start\", Blockly.Variables.NAME_TYPE);\n      code = \"var \" + startVar + \" = \" + argument0 + \";\\n\";\n    }\n\n    var endVar = argument1;\n\n    if (!argument1.match(/^\\w+$/) && !Blockly.isNumber(argument1)) {\n      // eslint-disable-next-line no-underscore-dangle\n      endVar = Blockly.JavaScript.variableDB_.getDistinctName(variable0 + \"_end\", Blockly.Variables.NAME_TYPE);\n      code += \"var \" + endVar + \" = \" + argument1 + \";\\n\";\n    } // Determine loop direction at start, in case one of the bounds changes during loop execution.\n    // eslint-disable-next-line no-underscore-dangle\n\n\n    var incVar = Blockly.JavaScript.variableDB_.getDistinctName(variable0 + \"_inc\", Blockly.Variables.NAME_TYPE);\n    var incVal = Blockly.isNumber(increment) ? Math.abs(increment) : \"Math.abs(\" + increment + \")\";\n    code += \"\\n        var \" + incVar + \" = \" + incVal + \";\\n        if (\" + startVar + \" > \" + endVar + \") {\\n            \" + incVar + \" = -\" + incVar + \";\\n        }\\n        for (\\n           \" + variable0 + \" = \" + startVar + \"; \\n           \" + incVar + \" >= 0 ? \" + variable0 + \" <= \" + endVar + \" : \" + variable0 + \" >= \" + endVar + \";\\n           \" + variable0 + \" += \" + incVar + \"\\n        ) {\\n            \" + branch + \";\\n        }\\n\";\n  }\n\n  return code;\n};","import \"core-js/modules/es6.regexp.match\";\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.controls_forEach = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('for each item %1 in list %2'),\n      args0: [{\n        type: 'field_variable',\n        name: 'VAR',\n        variable: null\n      }, {\n        type: 'input_value',\n        name: 'LIST',\n        check: 'Array'\n      }],\n      message1: translate('do %1'),\n      args1: [{\n        type: 'input_statement',\n        name: 'DO'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Control Foreach Tooltip'),\n      category: Blockly.Categories.Loop\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Control Foreach'),\n      'description': translate('Control Foreach')\n    };\n  }\n};\n\nBlockly.JavaScript.controls_forEach = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var variable0 = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_ASSIGNMENT) || '[]';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);\n  var code = ''; // Cache non-trivial values to variables to prevent repeated look-ups.\n\n  var listVar = argument0;\n\n  if (!argument0.match(/^\\w+$/)) {\n    // eslint-disable-next-line no-underscore-dangle\n    listVar = Blockly.JavaScript.variableDB_.getDistinctName(variable0 + \"_list\", Blockly.Variables.NAME_TYPE);\n    code = \"var \" + listVar + \" = \" + argument0 + \";\\n\";\n  } // eslint-disable-next-line no-underscore-dangle\n\n\n  var indexVar = Blockly.JavaScript.variableDB_.getDistinctName(variable0 + \"_list\", Blockly.Variables.NAME_TYPE);\n  code += \"\\n    for (var \" + indexVar + \" in \" + listVar + \") {\\n        \" + variable0 + \" = \" + listVar + \"[\" + indexVar + \"];\\n        \" + branch + \"\\n    }\\n\";\n  return code;\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.controls_repeat = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      type: 'controls_repeat',\n      message0: translate('repeat %1 times'),\n      args0: [{\n        type: 'field_number',\n        name: 'TIMES',\n        value: 10,\n        min: 0,\n        precision: 1\n      }],\n      message1: translate('do %1'),\n      args1: [{\n        type: 'input_statement',\n        name: 'DO'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Control Repeat Tooltip'),\n      category: Blockly.Categories.Loop\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Control Repeat'),\n      'description': translate('Control Repeat Description')\n    };\n  }\n};\nBlockly.JavaScript.controls_repeat = Blockly.JavaScript.controls_repeat_ext;","import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.number.constructor\";\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.controls_repeat_ext = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('repeat %1 times'),\n      args0: [{\n        type: 'input_value',\n        name: 'TIMES',\n        check: 'Number'\n      }],\n      message1: translate('do %1'),\n      args1: [{\n        type: 'input_statement',\n        name: 'DO'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Control Repeat Tooltip'),\n      category: Blockly.Categories.Loop\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Control Repeat'),\n      'description': translate('Control Repeat Description')\n    };\n  }\n};\n\nBlockly.JavaScript.controls_repeat_ext = function (block) {\n  var repeats;\n\n  if (block.getField('TIMES')) {\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    repeats = Blockly.JavaScript.valueToCode(block, 'TIMES') || '0';\n  }\n\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  var code = ''; // eslint-disable-next-line no-underscore-dangle\n\n  var loopVar = Blockly.JavaScript.variableDB_.getDistinctName('count', Blockly.Variables.NAME_TYPE);\n  var endVar = repeats;\n\n  if (!repeats.match(/^\\w+$/) && !Blockly.isNumber(repeats)) {\n    // eslint-disable-next-line no-underscore-dangle\n    endVar = Blockly.JavaScript.variableDB_.getDistinctName('repeat_end', Blockly.Variables.NAME_TYPE);\n    code += \"var \" + endVar + \" = \" + repeats + \";\\n\";\n  }\n\n  code += \"\\n    for (var \" + loopVar + \" = 0; \" + loopVar + \" < \" + endVar + \"; \" + loopVar + \"++) {\\n        \" + branch + \"\\n    }\\n\";\n  return code;\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.controls_whileUntil = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('repeat %1 %2'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'MODE',\n        options: [[translate('while'), 'WHILE'], [translate('until'), 'UNTIL']]\n      }, {\n        type: 'input_value',\n        name: 'BOOL',\n        check: 'Boolean'\n      }],\n      message1: translate('do %1'),\n      args1: [{\n        type: 'input_statement',\n        name: 'DO'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Control While Tooltip'),\n      category: Blockly.Categories.Loop\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Control While'),\n      'description': translate('Control While Description')\n    };\n  }\n};\n\nBlockly.JavaScript.controls_whileUntil = function (block) {\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  var until = block.getFieldValue('MODE') === 'UNTIL';\n  var order = until ? Blockly.JavaScript.ORDER_LOGICAL_NOT : Blockly.JavaScript.ORDER_NONE;\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'BOOL', order) || 'false';\n\n  if (until) {\n    argument0 = \"!\" + argument0;\n  } // eslint-disable-next-line no-underscore-dangle\n\n\n  var maxLoopVar = Blockly.JavaScript.variableDB_.getDistinctName('maxLoops', Blockly.Variables.NAME_TYPE); // eslint-disable-next-line no-underscore-dangle\n\n  var currentLoopVar = Blockly.JavaScript.variableDB_.getDistinctName('currentLoop', Blockly.Variables.NAME_TYPE);\n  return \"\\n        var \" + maxLoopVar + \" = 10000;\\n        var \" + currentLoopVar + \" = 0;\\n\\n        while (\" + argument0 + \") {\\n            if (\" + currentLoopVar + \" > \" + maxLoopVar + \") {\\n                throw new Error(\\\"\" + translate('Infinite loop detected') + \"\\\");\\n            } else {\\n                \" + currentLoopVar + \"++;\\n            }\\n            \\n            \" + branch + \"\\n        }\\n\";\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.variables_get = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      type: 'variables_get',\n      message0: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VAR',\n        variable: translate('item')\n      }],\n      output: null,\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Get Variable Tooltip'),\n      category: Blockly.Categories.Variables\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Get Variable Value'),\n      'description': translate('Get Variable Value Description')\n    };\n  }\n};\n\nBlockly.JavaScript.variables_get = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var code = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.variables_set = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      type: 'field_variable',\n      message0: translate('set %1 to %2'),\n      args0: [{\n        type: 'field_variable',\n        name: 'VAR',\n        variable: translate('item')\n      }, {\n        type: 'input_value',\n        name: 'VALUE'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Set Variable Tooltip'),\n      category: Blockly.Categories.Variables\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Set Variable'),\n      'description': translate('Set Variable Description')\n    };\n  }\n};\n\nBlockly.JavaScript.variables_set = function (block) {\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE', Blockly.JavaScript.ORDER_ASSIGNMENT) || '0'; // eslint-disable-next-line no-underscore-dangle\n\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var code = varName + \" = \" + argument0 + \";\\n\";\n  return code;\n};","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { finishSign } from '../../images';\nimport { setBlockTextColor } from '../../../utils';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.after_purchase = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('%1 (4) Get your trade result and trade again %2'),\n      message1: '%1',\n      args0: [{\n        type: 'field_image',\n        src: finishSign,\n        width: 25,\n        height: 25,\n        alt: 'F'\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'AFTERPURCHASE_STACK',\n        check: 'TradeAgain'\n      }],\n      colour: '#2a3052',\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Get the previous trade information and result, then trade again (Runs on trade finish)'),\n      category: Blockly.Categories.After_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('After Purchase'),\n      'description': translate('After Purchase Description')\n    };\n  },\n  onchange: function onchange(event) {\n    var _this = this;\n\n    setBlockTextColor(this);\n\n    if (!this.workspace || this.isInFlyout) {\n      return;\n    } // Maintain single instance of this block\n\n\n    if (event.type === Blockly.Events.BLOCK_CREATE) {\n      if (event.ids && event.ids.includes(this.id)) {\n        this.workspace.getAllBlocks(true).forEach(function (block) {\n          if (block.type === _this.type && block.id !== _this.id) {\n            block.dispose();\n          }\n        });\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.after_purchase = function (block) {\n  var stack = Blockly.JavaScript.statementToCode(block, 'AFTERPURCHASE_STACK');\n  var code = \"\\n    BinaryBotPrivateAfterPurchase = function BinaryBotPrivateAfterPurchase() {\\n        \" + stack + \"\\n        return false;\\n    };\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.contract_check_result = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Result is %1'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'CHECK_RESULT',\n        options: config.lists.CHECK_RESULT\n      }],\n      output: 'Boolean',\n      outputShape: Blockly.OUTPUT_SHAPE_HEXAGONAL,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('True if the result matches the selection'),\n      category: Blockly.Categories.After_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Check Result'),\n      'description': translate('Check Result Description')\n    };\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.BLOCK_CREATE || event.type === Blockly.Events.END_DRAG) {\n      if (this.isDescendantOf('after_purchase')) {\n        if (this.disabled) {\n          this.setDisabled(false);\n        }\n      } else if (!this.disabled) {\n        this.setDisabled(true);\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.contract_check_result = function (block) {\n  var checkWith = block.getFieldValue('CHECK_RESULT');\n  var code = \"Bot.isResult('\" + checkWith + \"')\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.read_details = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Contract Detail: %1'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'DETAIL_INDEX',\n        options: config.lists.DETAILS\n      }],\n      output: null,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Reads a selected option from contract details list'),\n      category: Blockly.Categories.After_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Read Detail Block'),\n      'description': translate('Read Detail Description')\n    };\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.BLOCK_CREATE || event.type === Blockly.Events.END_DRAG) {\n      if (this.isDescendantOf('after_purchase')) {\n        if (this.disabled) {\n          this.setDisabled(false);\n        }\n      } else if (!this.disabled) {\n        this.setDisabled(true);\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.read_details = function (block) {\n  var detailIndex = block.getFieldValue('DETAIL_INDEX');\n  var code = \"Bot.readDetails(\" + detailIndex + \")\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.trade_again = {\n  init: function init() {\n    this.jsonInit(this.definition()); // Ensure one of this type per statement-stack\n\n    this.setNextStatement(false);\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Trade Again'),\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      tooltip: translate('Runs the trade block again'),\n      category: Blockly.Categories.After_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Trade Again'),\n      'description': translate('Trade Again Description')\n    };\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.BLOCK_CREATE || event.type === Blockly.Events.END_DRAG) {\n      if (this.isDescendantOf('after_purchase')) {\n        if (this.disabled) {\n          this.setDisabled(false);\n        }\n      } else if (!this.disabled) {\n        this.setDisabled(true);\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.trade_again = function () {\n  return 'return true;\\n';\n};","import { getPurchaseChoices } from '../../../shared';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.ask_price = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Ask Price %1'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'PURCHASE_LIST',\n        options: getPurchaseChoices\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Ask Price for selected proposal'),\n      category: Blockly.Categories.Before_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Ask Price'),\n      'description': translate('Ask Price Description')\n    };\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.BLOCK_CREATE || event.type === Blockly.Events.END_DRAG) {\n      if (this.isDescendantOf('before_purchase')) {\n        if (this.disabled) {\n          this.setDisabled(false);\n        }\n      } else if (!this.disabled) {\n        this.setDisabled(true);\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.ask_price = function (block) {\n  var purchaseList = block.getFieldValue('PURCHASE_LIST');\n  var code = \"Bot.getAskPrice('\" + purchaseList + \"')\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { purchase } from '../../images';\nimport { setBlockTextColor } from '../../../utils';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.before_purchase = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('%1 (2) Watch and purchase your contract %2'),\n      message1: '%1',\n      args0: [{\n        type: 'field_image',\n        src: purchase,\n        width: 25,\n        height: 25,\n        alt: 'P'\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'BEFOREPURCHASE_STACK',\n        check: 'Purchase'\n      }],\n      colour: '#2a3052',\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Watch the tick stream and purchase the desired contract (Runs on tick update)'),\n      category: Blockly.Categories.Before_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Before Purchase'),\n      'description': translate('Before Purchase Description')\n    };\n  },\n  onchange: function onchange(event) {\n    var _this = this;\n\n    setBlockTextColor(this);\n\n    if (!this.workspace || this.isInFlyout) {\n      return;\n    } // Maintain single instance of this block\n\n\n    if (event.type === Blockly.Events.BLOCK_CREATE) {\n      if (event.ids && event.ids.includes(this.id)) {\n        this.workspace.getAllBlocks(true).forEach(function (block) {\n          if (block.type === _this.type && block.id !== _this.id) {\n            block.dispose();\n          }\n        });\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.before_purchase = function (block) {\n  var stack = Blockly.JavaScript.statementToCode(block, 'BEFOREPURCHASE_STACK');\n  var code = \"BinaryBotPrivateBeforePurchase = function BinaryBotPrivateBeforePurchase() {\\n        \" + stack + \"\\n    };\\n\";\n  return code;\n};","import { getPurchaseChoices } from '../../../shared';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.payout = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Payout %1'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'PURCHASE_LIST',\n        options: getPurchaseChoices\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Payout for selected proposal'),\n      category: Blockly.Categories.Before_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Payout'),\n      'description': translate('Payout Description')\n    };\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.BLOCK_CREATE || event.type === Blockly.Events.END_DRAG) {\n      if (this.isDescendantOf('before_purchase')) {\n        if (this.disabled) {\n          this.setDisabled(false);\n        }\n      } else if (!this.disabled) {\n        this.setDisabled(true);\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.payout = function (block) {\n  var purchaseList = block.getFieldValue('PURCHASE_LIST');\n  var code = \"Bot.getPayout('\" + purchaseList + \"')\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import \"core-js/modules/es6.array.find\";\nimport { getPurchaseChoices, updatePurchaseChoices } from '../../../shared';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.purchase = {\n  init: function init() {\n    this.jsonInit(this.definition()); // Ensure one of this type per statement-stack\n\n    this.setNextStatement(false);\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Purchase %1'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'PURCHASE_LIST',\n        options: getPurchaseChoices\n      }],\n      previousStatement: null,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Payout for selected proposal'),\n      category: Blockly.Categories.Before_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Puchase'),\n      'description': translate('Purchase Description')\n    };\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.BLOCK_CREATE || event.type === Blockly.Events.END_DRAG) {\n      if (this.isDescendantOf('before_purchase')) {\n        if (this.disabled) {\n          this.setDisabled(false);\n        }\n      } else if (!this.disabled) {\n        this.setDisabled(true);\n      }\n    } else if (event.type === Blockly.Events.BLOCK_CHANGE || Blockly.Events.BLOCK_CREATE) {\n      var tradeDefinitionBlock = this.workspace.getAllBlocks(true).find(function (block) {\n        return block.type === 'trade_definition';\n      });\n\n      if (!tradeDefinitionBlock) {\n        return;\n      }\n\n      var tradeTypeBlock = tradeDefinitionBlock.getChildByType('trade_definition_tradetype');\n\n      if (!tradeTypeBlock) {\n        return;\n      }\n\n      var tradeType = tradeTypeBlock.getFieldValue('TRADETYPE_LIST');\n      var contractTypeBlock = tradeDefinitionBlock.getChildByType('trade_definition_contracttype');\n      var contractType = contractTypeBlock.getFieldValue('TYPE_LIST');\n      var oppositesName = tradeType.toUpperCase();\n\n      if (tradeType && contractType && oppositesName) {\n        updatePurchaseChoices(contractType, oppositesName);\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.purchase = function (block) {\n  var purchaseList = block.getFieldValue('PURCHASE_LIST');\n  var code = \"Bot.purchase('\" + purchaseList + \"');\\n\";\n  return code;\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.check_sell = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Sell is available'),\n      output: 'Boolean',\n      outputShape: Blockly.OUTPUT_SHAPE_HEXAGONAL,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('True if sell at market is available'),\n      category: Blockly.Categories.During_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Check Sell'),\n      'description': translate('Check Sell Description')\n    };\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.BLOCK_CREATE || event.type === Blockly.Events.END_DRAG) {\n      if (this.isDescendantOf('during_purchase')) {\n        if (this.disabled) {\n          this.setDisabled(false);\n        }\n      } else if (!this.disabled) {\n        this.setDisabled(true);\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.check_sell = function () {\n  var code = 'Bot.isSellAvailable()';\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { sellContract } from '../../images';\nimport { setBlockTextColor } from '../../../utils';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.during_purchase = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('%1 (3) Watch and sell your purchased contract %2'),\n      message1: '%1',\n      args0: [{\n        type: 'field_image',\n        src: sellContract,\n        width: 25,\n        height: 25,\n        alt: 'S'\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'DURING_PURCHASE_STACK',\n        check: 'SellAtMarket'\n      }],\n      colour: '#2a3052',\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Watch the purchased contract info and sell at market if available (Runs on contract update)'),\n      category: Blockly.Categories.During_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('During Purchase'),\n      'description': translate('During Purchase Description')\n    };\n  },\n  onchange: function onchange(event) {\n    var _this = this;\n\n    setBlockTextColor(this);\n\n    if (!this.workspace || this.isInFlyout) {\n      return;\n    } // Maintain single instance of this block\n\n\n    if (event.type === Blockly.Events.BLOCK_CREATE) {\n      if (event.ids && event.ids.includes(this.id)) {\n        this.workspace.getAllBlocks(true).forEach(function (block) {\n          if (block.type === _this.type && block.id !== _this.id) {\n            block.dispose();\n          }\n        });\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.during_purchase = function (block) {\n  var stack = Blockly.JavaScript.statementToCode(block, 'DURING_PURCHASE_STACK');\n  var code = \"BinaryBotPrivateDuringPurchase = function BinaryBotPrivateDuringPurchase() {\\n        \" + stack + \"\\n    };\\n\";\n  return code;\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.sell_at_market = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Sell at market'),\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Sell at market'),\n      category: Blockly.Categories.During_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Sell at market'),\n      'description': translate('Sell at market description')\n    };\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.BLOCK_CREATE || event.type === Blockly.Events.END_DRAG) {\n      if (this.isDescendantOf('during_purchase')) {\n        if (this.disabled) {\n          this.setDisabled(false);\n        }\n      } else if (!this.disabled) {\n        this.setDisabled(true);\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.sell_at_market = function () {\n  return 'Bot.sellAtMarket();\\n';\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.sell_price = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Sell profit/loss'),\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Returns the profit for sell at market.'),\n      category: Blockly.Categories.During_Purchase\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Sell price'),\n      'description': translate('Sell price description')\n    };\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.BLOCK_CREATE || event.type === Blockly.Events.END_DRAG) {\n      if (this.isDescendantOf('during_purchase')) {\n        if (this.disabled) {\n          this.setDisabled(false);\n        }\n      } else if (!this.disabled) {\n        this.setDisabled(true);\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.sell_price = function () {\n  var code = 'Bot.getSellPrice()';\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.fast_ema_period = {\n  init: function init() {\n    this.jsonInit({\n      message0: translate('Fast EMA Period %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'FAST_EMA_PERIOD',\n        check: null\n      }],\n      colour: Blockly.Colours.BinaryLessGray.colour,\n      colourSecondary: Blockly.Colours.BinaryLessGray.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessGray.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: Blockly.Blocks.input_list.onchange,\n  allowedParents: ['macda_statement']\n};\n\nBlockly.JavaScript.fast_ema_period = function () {};","import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.input_list = {\n  init: function init() {\n    this.requiredParentId = '';\n    this.jsonInit({\n      message0: translate('Input List %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'INPUT_LIST',\n        check: 'Array'\n      }],\n      colour: Blockly.Colours.BinaryLessGray.colour,\n      colourSecondary: Blockly.Colours.BinaryLessGray.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessGray.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: function onchange(event) {\n    var _this = this;\n\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    var surroundParent = this.getSurroundParent();\n\n    if (event.type === Blockly.Events.END_DRAG) {\n      if (!this.requiredParentId && this.allowedParents.includes(surroundParent.type)) {\n        this.requiredParentId = surroundParent.id;\n      } else if (!surroundParent || surroundParent.id !== this.requiredParentId) {\n        Blockly.Events.disable();\n        this.unplug(false);\n        var parentBlock = this.workspace.getAllBlocks().find(function (block) {\n          return block.id === _this.requiredParentId;\n        });\n\n        if (parentBlock) {\n          var parentConnection = parentBlock.getLastConnectionInStatement('STATEMENT');\n          parentConnection.connect(this.previousConnection);\n        } else {\n          this.dispose();\n        }\n\n        Blockly.Events.enable();\n      }\n    }\n  },\n  allowedParents: ['bb_statement', 'bba_statement', 'ema_statement', 'emaa_statement', 'macda_statement', 'rsi_statement', 'rsia_statement', 'sma_statement', 'smaa_statement']\n};\n\nBlockly.JavaScript.input_list = function () {};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.period = {\n  init: function init() {\n    this.jsonInit({\n      message0: translate('Period %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'PERIOD',\n        check: null\n      }],\n      colour: Blockly.Colours.BinaryLessGray.colour,\n      colourSecondary: Blockly.Colours.BinaryLessGray.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessGray.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: Blockly.Blocks.input_list.onchange,\n  allowedParents: ['bb_statement', 'bba_statement', 'ema_statement', 'emaa_statement', 'macda_statement', 'rsi_statement', 'rsia_statement', 'sma_statement', 'smaa_statement']\n};\n\nBlockly.JavaScript.period = function () {};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.signal_ema_period = {\n  init: function init() {\n    this.jsonInit({\n      message0: translate('Signal EMA Period %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'SIGNAL_EMA_PERIOD',\n        check: null\n      }],\n      colour: Blockly.Colours.BinaryLessGray.colour,\n      colourSecondary: Blockly.Colours.BinaryLessGray.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessGray.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: Blockly.Blocks.input_list.onchange,\n  allowedParents: ['macda_statement']\n};\n\nBlockly.JavaScript.signal_ema_period = function () {};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.slow_ema_period = {\n  init: function init() {\n    this.jsonInit({\n      message0: translate('Slow EMA Period %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'SLOW_EMA_PERIOD',\n        check: null\n      }],\n      colour: Blockly.Colours.BinaryLessGray.colour,\n      colourSecondary: Blockly.Colours.BinaryLessGray.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessGray.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: Blockly.Blocks.input_list.onchange,\n  allowedParents: ['macda_statement']\n};\n\nBlockly.JavaScript.slow_ema_period = function () {};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.std_dev_multiplier_down = {\n  init: function init() {\n    this.jsonInit({\n      message0: translate('Standard Deviation Down Multiplier %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'DOWNMULTIPLIER',\n        check: null\n      }],\n      colour: Blockly.Colours.BinaryLessGray.colour,\n      colourSecondary: Blockly.Colours.BinaryLessGray.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessGray.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n  },\n  onchange: Blockly.Blocks.input_list.onchange,\n  allowedParents: ['bb_statement', 'bba_statement']\n};\n\nBlockly.JavaScript.std_dev_multiplier_down = function () {};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.std_dev_multiplier_up = {\n  init: function init() {\n    this.jsonInit({\n      message0: translate('Standard Deviation Up Multiplier %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'UPMULTIPLIER',\n        check: null\n      }],\n      colour: Blockly.Colours.BinaryLessGray.colour,\n      colourSecondary: Blockly.Colours.BinaryLessGray.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessGray.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: Blockly.Blocks.input_list.onchange,\n  allowedParents: ['bb_statement', 'bba_statement']\n};\n\nBlockly.JavaScript.std_dev_multiplier_up = function () {};","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { expectValue } from '../../../shared';\nimport config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.bb_statement = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to Bollinger Bands %2 %3'),\n      message1: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: 'bb'\n      }, {\n        type: 'field_dropdown',\n        name: 'BBRESULT_LIST',\n        options: config.bbResult\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'STATEMENT',\n        check: null\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Calculates Bollinger Bands (BB) from a list with a period'),\n      previousStatement: null,\n      nextStatement: null,\n      category: Blockly.Categories.Indicators\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('BB Statement'),\n      'descriptionL': translate('BB Statement Description')\n    };\n  },\n  onchange: function onchange(event) {\n    var _this = this;\n\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.END_DRAG) {\n      var blocksInStatement = this.getBlocksInStatement('STATEMENT');\n      blocksInStatement.forEach(function (block) {\n        if (!_this.requiredParamBlocks.includes(block.type)) {\n          Blockly.Events.disable();\n          block.unplug(false);\n          Blockly.Events.enable();\n        }\n      });\n    }\n  },\n  requiredParamBlocks: ['input_list', 'period', 'std_dev_multiplier_up', 'std_dev_multiplier_down']\n};\n\nBlockly.JavaScript.bb_statement = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VARIABLE'), Blockly.Variables.NAME_TYPE);\n  var bbResult = block.getFieldValue('BBRESULT_LIST');\n  var input = expectValue(block.getChildByType('input_list'), 'INPUT_LIST');\n  var period = block.childValueToCode('period', 'PERIOD') || '10';\n  var stdDevUp = block.childValueToCode('std_dev_multiplier_up', 'UPMULTIPLIER') || '5';\n  var stdDevDown = block.childValueToCode('std_dev_multiplier_down', 'DOWNMULTIPLIER') || '5';\n  var code = varName + \" = Bot.bb(\" + input + \", { periods: \" + period + \", stdDevUp: \" + stdDevUp + \", stdDevDown: \" + stdDevDown + \" }, \" + bbResult + \");\\n\";\n  return code;\n};","import { expectValue } from '../../../shared';\nimport config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.bba_statement = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to Bollinger Bands Array %2 %3'),\n      message1: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: 'bba'\n      }, {\n        type: 'field_dropdown',\n        name: 'BBRESULT_LIST',\n        options: config.bbResult\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'STATEMENT',\n        check: null\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Calculates Bollinger Bands (BB) list from a list with a period'),\n      previousStatement: null,\n      nextStatement: null,\n      category: Blockly.Categories.Indicators\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Bollinger Bands Statement'),\n      'description': translate('Bollinger Bands Description')\n    };\n  },\n  onchange: Blockly.Blocks.bb_statement.onchange,\n  requiredParamBlocks: ['input_list', 'period', 'std_dev_multiplier_up', 'std_dev_multiplier_down']\n};\n\nBlockly.JavaScript.bba_statement = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VARIABLE'), Blockly.Variables.NAME_TYPE);\n  var bbResult = block.getFieldValue('BBRESULT_LIST');\n  var input = expectValue(block.getChildByType('input_list'), 'INPUT_LIST');\n  var period = block.childValueToCode('period', 'PERIOD') || '10';\n  var stdDevUp = block.childValueToCode('std_dev_multiplier_up', 'UPMULTIPLIER') || '5';\n  var stdDevDown = block.childValueToCode('std_dev_multiplier_down', 'DOWNMULTIPLIER') || '5';\n  var code = varName + \" = Bot.bba(\" + input + \", { periods: \" + period + \", stdDevUp: \" + stdDevUp + \", stdDevDown: \" + stdDevDown + \" }, \" + bbResult + \");\\n\";\n  return code;\n};","import { expectValue } from '../../../shared';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.ema_statement = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to Exponentional Moving Average %2'),\n      message1: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: 'ema'\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'STATEMENT',\n        check: null\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Calculates Exponential Moving Average (EMA) from a list with a period'),\n      previousStatement: null,\n      nextStatement: null,\n      category: Blockly.Categories.Indicators\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Exponential Moving Average Statement'),\n      'description': translate('Exponential Moving Average Statement Description')\n    };\n  },\n  onchange: Blockly.Blocks.bb_statement.onchange,\n  requiredParamBlocks: ['input_list', 'period']\n};\n\nBlockly.JavaScript.ema_statement = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VARIABLE'), Blockly.Variables.NAME_TYPE);\n  var input = expectValue(block.getChildByType('input_list'), 'INPUT_LIST');\n  var period = block.childValueToCode('period', 'PERIOD') || '10';\n  var code = varName + \" = Bot.ema(\" + input + \", \" + period + \");\\n\";\n  return code;\n};","import { expectValue } from '../../../shared';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.emaa_statement = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to Exponentional Moving Average Array %2'),\n      message1: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: 'emaa'\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'STATEMENT',\n        check: null\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Calculates Exponential Moving Average (EMA) list from a list of values with a period'),\n      previousStatement: null,\n      nextStatement: null,\n      category: Blockly.Categories.Indicators\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Exponential Moving Average Statement'),\n      'description': translate('Exponential Moving Average Statement Dscription')\n    };\n  },\n  onchange: Blockly.Blocks.bb_statement.onchange,\n  requiredParamBlocks: ['input_list', 'period']\n};\n\nBlockly.JavaScript.emaa_statement = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VARIABLE'), Blockly.Variables.NAME_TYPE);\n  var input = expectValue(block.getChildByType('input_list'), 'INPUT_LIST');\n  var period = block.childValueToCode('period', 'PERIOD') || '10';\n  var code = varName + \" = Bot.emaa(\" + input + \", \" + period + \");\\n\";\n  return code;\n};","import { expectValue } from '../../../shared';\nimport config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.macda_statement = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to MACD Array %2 %3'),\n      message1: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: 'macda'\n      }, {\n        type: 'field_dropdown',\n        name: 'MACDFIELDS_LIST',\n        options: config.macdFields\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'STATEMENT',\n        check: null\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Calculates Moving Average Convergence Divergence (MACD) list from a list'),\n      previousStatement: null,\n      nextStatement: null,\n      category: Blockly.Categories.Indicators\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Moving Average Convergence Divergence'),\n      'decription': translate('Moving Average Convergence Divergence Description')\n    };\n  },\n  onchange: Blockly.Blocks.bb_statement.onchange,\n  requiredParamBlocks: ['input_list', 'fast_ema_period', 'slow_ema_period', 'signal_ema_period']\n};\n\nBlockly.JavaScript.macda_statement = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VARIABLE'), Blockly.Variables.NAME_TYPE);\n  var macdField = block.getFieldValue('MACDFIELDS_LIST');\n  var input = expectValue(block.getChildByType('input_list'), 'INPUT_LIST');\n  var fastEmaPeriod = block.childValueToCode('fast_ema_period', 'FAST_EMA_PERIOD') || '12';\n  var slowEmaPeriod = block.childValueToCode('slow_ema_period', 'SLOW_EMA_PERIOD') || '26';\n  var signalEmaPeriod = block.childValueToCode('signal_ema_period', 'SIGNAL_EMA_PERIOD') || '9';\n  var code = varName + \" = Bot.macda(\" + input + \", { \\n        fastEmaPeriod: \" + fastEmaPeriod + \",\\n        slowEmaPeriod: \" + slowEmaPeriod + \",\\n        signalEmaPeriod: \" + signalEmaPeriod + \",\\n    }, \" + macdField + \");\\n\";\n  return code;\n};","import { expectValue } from '../../../shared';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.rsi_statement = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to Relative Strength Index %2'),\n      message1: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: 'rsi'\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'STATEMENT',\n        check: null\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Relative Strength Index (RSI) from a list with a period'),\n      previousStatement: null,\n      nextStatement: null,\n      category: Blockly.Categories.Indicators\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Relative Strength Index Statement'),\n      'description': translate('Relative Strength Index Statement Description')\n    };\n  },\n  onchange: Blockly.Blocks.bb_statement.onchange,\n  requiredParamBlocks: ['input_list', 'period']\n};\n\nBlockly.JavaScript.rsi_statement = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VARIABLE'), Blockly.Variables.NAME_TYPE);\n  var input = expectValue(block.getChildByType('input_list'), 'INPUT_LIST');\n  var period = block.childValueToCode('period', 'PERIOD') || '10';\n  var code = varName + \" = Bot.rsi(\" + input + \", \" + period + \");\\n\";\n  return code;\n};","import { expectValue } from '../../../shared';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.rsia_statement = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to Relative Strength Index Array %2'),\n      message1: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: 'rsia'\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'STATEMENT',\n        check: null\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Calculates Relative Strength Index (RSI) list from a list of values with a period'),\n      previousStatement: null,\n      nextStatement: null,\n      category: Blockly.Categories.Indicators\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Relative Strength Index Statement'),\n      'description': translate('Relative Strength Index Statement Description')\n    };\n  },\n  onchange: Blockly.Blocks.bb_statement.onchange,\n  requiredParamBlocks: ['input_list', 'period']\n};\n\nBlockly.JavaScript.rsia_statement = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VARIABLE'), Blockly.Variables.NAME_TYPE);\n  var input = expectValue(block.getChildByType('input_list'), 'INPUT_LIST');\n  var period = block.childValueToCode('period', 'PERIOD') || '10';\n  var code = varName + \" = Bot.rsia(\" + input + \", \" + period + \");\\n\";\n  return code;\n};","import { expectValue } from '../../../shared';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.sma_statement = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to Simple Moving Average %2'),\n      message1: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: 'sma'\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'STATEMENT',\n        check: null\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Calculates Simple Moving Average (SMA) from a list with a period'),\n      previousStatement: null,\n      nextStatement: null,\n      category: Blockly.Categories.Indicators\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('SImple Moving Average Statement'),\n      'description': translate('Simple Moving Average Statement Description')\n    };\n  },\n  onchange: Blockly.Blocks.bb_statement.onchange,\n  requiredParamBlocks: ['input_list', 'period']\n};\n\nBlockly.JavaScript.sma_statement = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VARIABLE'), Blockly.Variables.NAME_TYPE);\n  var input = expectValue(block.getChildByType('input_list'), 'INPUT_LIST');\n  var period = block.getChildFieldValue('period', 'PERIOD') || '10';\n  var code = varName + \" = Bot.sma(\" + input + \", \" + period + \");\\n\";\n  return code;\n};","import { expectValue } from '../../../shared';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.smaa_statement = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to Simple Moving Average Array %2'),\n      message1: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: 'smaa'\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'STATEMENT',\n        check: null\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Calculates Simple Moving Average (SMA) from a list with a period'),\n      previousStatement: null,\n      nextStatement: null,\n      category: Blockly.Categories.Indicators\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Simple Moving Average Statement'),\n      'description': translate('Simple Moving Average Statement Description')\n    };\n  },\n  onchange: Blockly.Blocks.bb_statement.onchange\n};\n\nBlockly.JavaScript.smaa_statement = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VARIABLE'), Blockly.Variables.NAME_TYPE);\n  var input = expectValue(block.getChildByType('input_list'), 'INPUT_LIST');\n  var period = block.childValueToCode('period', 'PERIOD') || '10';\n  var code = varName + \" = Bot.smaa(\" + input + \", \" + period + \");\\n\";\n  return code;\n};","import config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.check_direction = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Direction is %1'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'CHECK_DIRECTION',\n        options: config.lists.CHECK_DIRECTION\n      }],\n      output: 'Boolean',\n      outputShape: Blockly.OUTPUT_SHAPE_HEXAGONAL,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('True if the direction matches the selection'),\n      category: Blockly.Categories.Tick_Analysis\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Check Direction'),\n      'description': translate('Check Direction Description')\n    };\n  }\n};\n\nBlockly.JavaScript.check_direction = function (block) {\n  var checkWith = block.getFieldValue('CHECK_DIRECTION');\n  var code = \"Bot.checkDirection('\" + checkWith + \"')\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.get_ohlc = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('in candle list get # from end %1'),\n      message1: translate('with interval: %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'CANDLEINDEX',\n        check: 'Number'\n      }],\n      args1: [{\n        type: 'field_dropdown',\n        name: 'CANDLEINTERVAL_LIST',\n        options: config.candleIntervals\n      }],\n      output: 'Candle',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Get the nth recent candle'),\n      category: Blockly.Categories.Tick_Analysis\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Nth recent Candle'),\n      'description': translate('Nth recent Candle Description')\n    };\n  }\n};\n\nBlockly.JavaScript.get_ohlc = function (block) {\n  var selectedGranularity = block.getFieldValue('CANDLEINTERVAL_LIST');\n  var granularity = selectedGranularity === 'default' ? 'undefined' : selectedGranularity;\n  var index = Blockly.JavaScript.valueToCode(block, 'CANDLEINDEX', Blockly.JavaScript.ORDER_ATOMIC) || '1';\n  var code = \"Bot.getOhlcFromEnd({ index: \" + index + \", granularity: \" + granularity + \" })\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.lastDigitList = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Last Digit List'),\n      output: 'Array',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Returns the list of last digit values'),\n      category: Blockly.Categories.Tick_Analysis\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Last Digit List'),\n      'description': translate('Last Digit List Description')\n    };\n  }\n};\n\nBlockly.JavaScript.lastDigitList = function () {\n  return ['Bot.getLastDigitList()', Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.last_digit = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Last Digit'),\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Returns the last digit of the latest tick'),\n      category: Blockly.Categories.Tick_Analysis\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Last Digit'),\n      'description': translate('Last Digit Description')\n    };\n  }\n};\n\nBlockly.JavaScript.last_digit = function () {\n  return ['Bot.getLastDigit()', Blockly.JavaScript.ORDER_ATOMIC];\n};","import config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.ohlc = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Candles List'),\n      message1: translate('with interval: %1'),\n      args1: [{\n        type: 'field_dropdown',\n        name: 'CANDLEINTERVAL_LIST',\n        options: config.candleIntervals\n      }],\n      output: 'Array',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Returns the candle list'),\n      category: Blockly.Categories.Tick_Analysis\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Candle List'),\n      'description': translate('Candle List Description')\n    };\n  }\n};\n\nBlockly.JavaScript.ohlc = function (block) {\n  var selectedGranularity = block.getFieldValue('CANDLEINTERVAL_LIST');\n  var granularity = selectedGranularity === 'default' ? 'undefined' : selectedGranularity;\n  var code = \"Bot.getOhlc({ granularity: \" + granularity + \" })\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.ohlc_values = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Make a List of %1 values in candles list with interval: %2'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'OHLCFIELD_LIST',\n        options: config.ohlcFields\n      }, {\n        type: 'field_dropdown',\n        name: 'CANDLEINTERVAL_LIST',\n        options: config.candleIntervals\n      }],\n      output: 'Array',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Returns a list of the selected candle values'),\n      category: Blockly.Categories.Tick_Analysis\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Selected Candle Value'),\n      'description': translate('Selected Candle Value Description')\n    };\n  }\n};\n\nBlockly.JavaScript.ohlc_values = function (block) {\n  var selectedGranularity = block.getFieldValue('CANDLEINTERVAL_LIST');\n  var granularity = selectedGranularity === 'default' ? 'undefined' : selectedGranularity;\n  var ohlcField = block.getFieldValue('OHLCFIELD_LIST');\n  var code = \"Bot.getOhlc({ field: '\" + ohlcField + \"', granularity: \" + granularity + \" })\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.read_ohlc = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('In candles list read %1 from end %2'),\n      message1: translate('with interval: %1'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'OHLCFIELD_LIST',\n        options: config.ohlcFields\n      }, {\n        type: 'input_value',\n        name: 'CANDLEINDEX',\n        check: 'Number'\n      }],\n      args1: [{\n        type: 'field_dropdown',\n        name: 'CANDLEINTERVAL_LIST',\n        options: config.candleIntervals\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Read the selected candle value in the nth recent candle'),\n      category: Blockly.Categories.Tick_Analysis\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Read selected candle'),\n      'description': translate('Read selected candle description')\n    };\n  }\n};\n\nBlockly.JavaScript.read_ohlc = function (block) {\n  var selectedGranularity = block.getFieldValue('CANDLEINTERVAL_LIST');\n  var granularity = selectedGranularity === 'default' ? 'undefined' : selectedGranularity;\n  var ohlcField = block.getFieldValue('OHLCFIELD_LIST');\n  var index = Blockly.JavaScript.valueToCode(block, 'CANDLEINDEX', Blockly.JavaScript.ORDER_ATOMIC) || '1';\n  var code = \"Bot.getOhlcFromEnd({ field: '\" + ohlcField + \"', index: \" + index + \", granularity: \" + granularity + \" })\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.tick = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Last Tick'),\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Returns the tick value received by a before purchase block'),\n      category: Blockly.Categories.Tick_Analysis\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Tick value'),\n      'description': translate('Tick value Description')\n    };\n  }\n};\n\nBlockly.JavaScript.tick = function () {\n  return ['Bot.getLastTick()', Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.tick_analysis = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('This block is called on every tick %1 %2'),\n      args0: [{\n        type: 'input_dummy'\n      }, {\n        type: 'input_statement',\n        name: 'TICKANALYSIS_STACK',\n        check: null\n      }],\n      colour: '#fef1cf',\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('You can use this block to analyze the ticks, regardless of your trades'),\n      category: Blockly.Categories.Tick_Analysis\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Tick Analysis'),\n      'description': translate('Tick Analysis Description')\n    };\n  }\n};\n\nBlockly.JavaScript.tick_analysis = function (block) {\n  var stack = Blockly.JavaScript.statementToCode(block, 'TICKANALYSIS_STACK') || '';\n  var code = \"\\n    BinaryBotPrivateTickAnalysisList.push(function BinaryBotPrivateTickAnalysis() {\\n        \" + stack + \"\\n    });\\n\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.ticks = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Ticks List'),\n      output: 'Array',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Returns the list of tick values'),\n      category: Blockly.Categories.Tick_Analysis\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Tick List'),\n      'description': translate('Tick List Description')\n    };\n  }\n};\n\nBlockly.JavaScript.ticks = function () {\n  return ['Bot.getTicks()', Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.is_candle_black = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Is candle black? %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'OHLCOBJ',\n        check: 'Candle'\n      }],\n      output: 'Boolean',\n      outputShape: Blockly.OUTPUT_SHAPE_HEXAGONAL,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Checks if the given candle is black, returns true if close is less than open in the given candle.'),\n      category: Blockly.Categories.Candle\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Is Candle Block'),\n      'description': translate('Is Candle Black Description')\n    };\n  }\n};\n\nBlockly.JavaScript.is_candle_black = function (block) {\n  var ohlcObj = Blockly.JavaScript.valueToCode(block, 'OHLCOBJ') || '{}';\n  var code = \"Bot.isCandleBlack(\" + ohlcObj + \")\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import config from '../../../../../constants/const';\nimport { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.ohlc_values_in_list = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Make a list of %1 values from candles list %2'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'OHLCFIELD_LIST',\n        options: config.ohlcFields\n      }, {\n        type: 'input_value',\n        name: 'OHLCLIST'\n      }],\n      output: 'Array',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Returns a list of the selected candle values'),\n      category: Blockly.Categories.Candle\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Selected Candle list value'),\n      'description': translate('Selected Candle list value description')\n    };\n  }\n};\n\nBlockly.JavaScript.ohlc_values_in_list = function (block) {\n  var ohlcField = block.getFieldValue('OHLCFIELD_LIST') || 'open';\n  var ohlcList = Blockly.JavaScript.valueToCode(block, 'OHLCLIST') || '[]';\n  var code = \"Bot.candleValues(\" + ohlcList + \", '\" + ohlcField + \"')\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import config from '../../../../../constants/const';\nimport { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.read_ohlc_obj = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Read %1 value in candle %2'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'OHLCFIELD_LIST',\n        options: config.ohlcFields\n      }, {\n        type: 'input_value',\n        name: 'OHLCOBJ'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Read a field in a candle (read from the Candles list)'),\n      category: Blockly.Categories.Candle\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Read candle '),\n      'description': translate('Read candle Description')\n    };\n  }\n};\n\nBlockly.JavaScript.read_ohlc_obj = function (block) {\n  var ohlcField = block.getFieldValue('OHLCFIELD_LIST');\n  var ohlcObj = Blockly.JavaScript.valueToCode(block, 'OHLCOBJ') || '{}';\n  var code = \"Bot.candleField(\" + ohlcObj + \", '\" + ohlcField + \"')\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import config from '../../../../../constants/const';\nimport { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.balance = {\n  init: function init() {\n    var _this = this;\n\n    this.jsonInit(this.definition()); // Change shape based on selected type\n\n    var balanceTypeField = this.getField('BALANCE_TYPE');\n    balanceTypeField.setValidator(function (value) {\n      if (value === 'STR') {\n        _this.setOutputShape(Blockly.OUTPUT_SHAPE_SQUARE);\n\n        _this.setOutput(true, 'String');\n      } else if (value === 'NUM') {\n        _this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n\n        _this.setOutput(true, 'Number');\n      }\n\n      _this.initSvg();\n\n      _this.render(false);\n\n      return undefined;\n    });\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Balance: %1'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'BALANCE_TYPE',\n        options: config.lists.BALANCE_TYPE\n      }],\n      output: null,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Balance Tooltip'),\n      category: Blockly.Categories.Miscellaneous\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Balance'),\n      'description': translate('Balance Description')\n    };\n  }\n};\n\nBlockly.JavaScript.balance = function (block) {\n  var balanceType = block.getFieldValue('BALANCE_TYPE');\n  var code = \"Bot.getBalance('\" + balanceType + \"')\";\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.block_holder = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Blocks inside are ignored %1 %2'),\n      args0: [{\n        type: 'input_dummy'\n      }, {\n        type: 'input_statement',\n        name: 'USELESS_STACK',\n        check: null\n      }],\n      colour: '#fef1cf',\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Put your blocks in here to prevent them from being removed'),\n      category: Blockly.Categories.Miscellaneous\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Block Holder'),\n      'description': translate('Block Holder Description')\n    };\n  }\n};\n\nBlockly.JavaScript.block_holder = function () {\n  return '';\n};","import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { loadRemote } from '../../../../utils';\nimport { translate } from '../../../../../utils/lang/i18n';\nimport { observer as globalObserver } from '../../../../../utils/observer';\nBlockly.Blocks.loader = {\n  init: function init() {\n    var _this = this;\n\n    this.loadedByMe = [];\n    this.loadedVariables = [];\n    this.currentUrl = '';\n    this.jsonInit(this.definition());\n    var urlField = this.getField('URL'); // eslint-disable-next-line no-underscore-dangle\n\n    urlField.onFinishEditing_ = function (newValue) {\n      return _this.onFinishEditingUrl(newValue);\n    };\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Load block from: %1'),\n      args0: [{\n        type: 'field_input',\n        name: 'URL',\n        text: 'http://www.example.com/block.xml'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Load blocks from URL'),\n      category: Blockly.Categories.Miscellaneous\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Lodear'),\n      'description': translate('Loeder Description')\n    };\n  },\n  onFinishEditingUrl: function onFinishEditingUrl(newValue) {\n    var _this2 = this;\n\n    if (this.currentUrl === newValue) {\n      return;\n    }\n\n    if (this.disabled) {\n      var hasKnownUrl = this.workspace.getAllBlocks().some(function (block) {\n        return block.type === 'loader' && block.id !== _this2.id && block.currentUrl === _this2.currentUrl;\n      });\n\n      if (hasKnownUrl) {\n        this.setDisabled(false);\n      }\n    }\n\n    var recordUndo = Blockly.Events.recordUndo;\n    Blockly.Events.recordUndo = false;\n    loadRemote(this).then(function () {\n      Blockly.Events.recordUndo = recordUndo;\n      globalObserver.emit('ui.log.success', translate('Blocks are loaded successfully'));\n    }).catch(function (errorMsg) {\n      Blockly.Events.recordUndo = recordUndo;\n      globalObserver.emit('ui.log.error', errorMsg);\n    });\n    this.currentUrl = this.getFieldValue('URL');\n  },\n  onchange: function onchange(event) {\n    var _this3 = this;\n\n    if (event.type === Blockly.Events.BLOCK_CREATE && event.ids.includes(this.id)) {\n      this.currentUrl = this.getFieldValue('URL');\n      this.workspace.getAllBlocks().forEach(function (block) {\n        if (block.type === 'loader' && block.id !== _this3.id) {\n          if (block.currentUrl === _this3.currentUrl) {\n            _this3.setDisabled(true);\n          }\n        }\n      });\n    }\n  }\n};\n\nBlockly.JavaScript.loader = function (block) {\n  if (block.loadedVariables.length) {\n    // eslint-disable-next-line no-underscore-dangle\n    return \"var \" + block.loadedVariables.map(function (v) {\n      return Blockly.JavaScript.variableDB_.safeName_(v);\n    }).toString();\n  }\n\n  return '';\n};","import config from '../../../../../constants/const';\nimport { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.notify = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Notify %1 with sound: %2 %3'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'NOTIFICATION_TYPE',\n        options: config.lists.NOTIFICATION_TYPE\n      }, {\n        type: 'field_dropdown',\n        name: 'NOTIFICATION_SOUND',\n        options: config.lists.NOTIFICATION_SOUND\n      }, {\n        type: 'input_value',\n        name: 'MESSAGE',\n        check: null\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Creates a notification'),\n      cateogry: Blockly.Categories.Miscellaneous\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Pop out notify'),\n      'description': translate('Pop out notify description')\n    };\n  }\n};\n\nBlockly.JavaScript.notify = function (block) {\n  var notificationType = block.getFieldValue('NOTIFICATION_TYPE');\n  var sound = block.getFieldValue('NOTIFICATION_SOUND');\n  var message = Blockly.JavaScript.valueToCode(block, 'MESSAGE') || \"\\\"\" + translate('<empty message>') + \"\\\"\";\n  var code = \"Bot.notify({ className: '\" + notificationType + \"', message: \" + message + \", sound: '\" + sound + \"'});\\n\";\n  return code;\n};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.total_profit = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Total Profit'),\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Returns the total profit'),\n      category: Blockly.Categories.Miscellaneous\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Total Profit'),\n      'description': translate('Total Profit Description')\n    };\n  }\n};\n\nBlockly.JavaScript.total_profit = function () {\n  return ['Bot.getTotalProfit()', Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.total_runs = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Number of Runs'),\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Returns the number of runs since the beginning'),\n      category: Blockly.Categories.Miscellaneous\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Total Runs'),\n      'description': translate('Total Runs Description')\n    };\n  }\n};\n\nBlockly.JavaScript.total_runs = function () {\n  return ['Bot.getTotalRuns()', Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.epoch = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Seconds Since Epoch'),\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Returns the epoch time (seconds since epoch)'),\n      category: Blockly.Categories.Time\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Second Since Epoch'),\n      'description': translate('Seconds Since Epoch Decription')\n    };\n  }\n};\n\nBlockly.JavaScript.epoch = function () {\n  return ['Bot.getTime()', Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../../../utils/lang/i18n';\nBlockly.Blocks.timeout = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('%1 %2 Run after %3 second(s)'),\n      args0: [{\n        type: 'input_dummy'\n      }, {\n        type: 'input_statement',\n        name: 'TIMEOUTSTACK'\n      }, {\n        type: 'input_value',\n        name: 'SECONDS'\n      }],\n      colour: '#fef1cf',\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Run the blocks inside every n seconds'),\n      category: Blockly.Categories.Time\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Timeout'),\n      'description': translate('Timeout Description')\n    };\n  },\n  onchange: function onchange(event) {\n    var _this = this;\n\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.END_DRAG) {\n      var allowedScopes = ['trade_definition', 'during_purchase', 'before_purchase', 'after_purchase', 'tick_analysis'];\n\n      if (allowedScopes.some(function (scope) {\n        return _this.isDescendantOf(scope);\n      })) {\n        if (this.disabled) {\n          this.setDisabled(false);\n        }\n      } else if (!this.disabled) {\n        this.setDisabled(true);\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.timeout = function (block) {\n  var stack = Blockly.JavaScript.statementToCode(block, 'TIMEOUTSTACK');\n  var seconds = Blockly.JavaScript.valueToCode(block, 'SECONDS', Blockly.JavaScript.ORDER_ATOMIC) || '1';\n  var code = \"sleep(\" + seconds + \");\\n\" + stack + \"\\n\";\n  return code;\n};","import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.reflect.construct\";\nimport \"core-js/modules/es6.object.set-prototype-of\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\n\nfunction isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport { defineContract } from '../../images';\nimport { setBlockTextColor } from '../../../utils';\nimport config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.trade_definition = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('%1 (1) Define your trade contract %2'),\n      message1: '%1',\n      message2: translate('Run Once at Start: %1'),\n      message3: '%1',\n      message4: translate('Define Trade Options: %1'),\n      message5: '%1',\n      args0: [{\n        type: 'field_image',\n        src: defineContract,\n        width: 25,\n        height: 25,\n        alt: 'T'\n      }, {\n        type: 'input_dummy'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'TRADE_OPTIONS'\n      }],\n      args2: [{\n        type: 'input_dummy'\n      }],\n      args3: [{\n        type: 'input_statement',\n        name: 'INITIALIZATION',\n        check: null\n      }],\n      args4: [{\n        type: 'input_dummy'\n      }],\n      args5: [{\n        type: 'input_statement',\n        name: 'SUBMARKET'\n      }],\n      colour: '#2a3052',\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Trade Definition tooltip'),\n      category: Blockly.Categories.Trade_Definition\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Trade Definition'),\n      'description': translate('Define market type, stake, trade type and duration in trade')\n    };\n  },\n  onchange: function onchange(event) {\n    var _this = this;\n\n    setBlockTextColor(this);\n\n    if (!this.workspace || this.isInFlyout) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.END_DRAG) {\n      this.enforceTradeDefinitionType();\n    } else if (event.type === Blockly.Events.BLOCK_CREATE) {\n      if (event.ids && event.ids.includes(this.id)) {\n        // Maintain single instance of this block\n        this.workspace.getAllBlocks(true).forEach(function (block) {\n          if (block.type === _this.type && block.id !== _this.id) {\n            block.dispose();\n          }\n        });\n        var tradeDefinitionMarket = this.getChildByType('trade_definition_market');\n\n        if (!tradeDefinitionMarket) {\n          return;\n        }\n\n        var selectedMarket = tradeDefinitionMarket.getFieldValue('MARKET_LIST');\n        var eventArgs = [tradeDefinitionMarket, 'field', 'MARKET_LIST', '', selectedMarket];\n\n        var changeEvent = _construct(Blockly.Events.BlockChange, eventArgs);\n\n        Blockly.Events.fire(changeEvent);\n      }\n    }\n  },\n  // Check if blocks within statement are valid, we enforce\n  // this statement to only allow `trade_definition` type blocks.\n  enforceTradeDefinitionType: function enforceTradeDefinitionType() {\n    var blocksInStatement = this.getBlocksInStatement('TRADE_OPTIONS');\n    blocksInStatement.forEach(function (block) {\n      if (!/^trade_definition_.+$/.test(block.type)) {\n        Blockly.Events.disable();\n        block.unplug(false);\n        Blockly.Events.enable();\n      }\n    });\n  },\n  requiredParamBlocks: ['trade_definition_market', 'trade_definition_tradetype', 'trade_definition_contracttype', 'trade_definition_candleinterval', 'trade_definition_restartbuysell', 'trade_definition_restartonerror']\n};\n\nBlockly.JavaScript.trade_definition = function (block) {\n  var account = $('.account-id').first().attr('value');\n\n  if (!account) {\n    throw Error('Please login');\n  }\n\n  var symbol = block.getChildFieldValue('trade_definition_market', 'SYMBOL_LIST') || '';\n  var tradeType = block.getChildFieldValue('trade_definition_tradetype', 'TRADETYPE_LIST') || ''; // Contract Type (not referring the block)\n\n  var contractTypeBlock = block.getChildByType('trade_definition_contracttype');\n  var contractTypeSelector = contractTypeBlock.getFieldValue('TYPE_LIST');\n  var oppositesName = tradeType.toUpperCase();\n  var contractTypeList = contractTypeSelector === 'both' ? config.opposites[oppositesName].map(function (k) {\n    return Object.keys(k)[0];\n  }) : [contractTypeSelector];\n  var candleIntervalValue = block.getChildFieldValue('trade_definition_candleinterval', 'CANDLEINTERVAL_LIST') || 'default';\n  var shouldRestartOnError = block.childValueToCode('trade_definition_restartonerror', 'RESTARTONERROR') || 'FALSE';\n  var timeMachineEnabled = block.childValueToCode('trade_definition_restartbuysell', 'TIME_MACHINE_ENABLED') || 'FALSE';\n  var initialization = Blockly.JavaScript.statementToCode(block, 'INITIALIZATION');\n  var tradeOptionsStatement = Blockly.JavaScript.statementToCode(block, 'SUBMARKET');\n  var code = \"\\n    BinaryBotPrivateInit = function BinaryBotPrivateInit() {\\n        Bot.init('\" + account + \"', {\\n          symbol: '\" + symbol + \"',\\n          contractTypes: \" + JSON.stringify(contractTypeList) + \",\\n          candleInterval: '\" + candleIntervalValue + \"',\\n          shouldRestartOnError: \" + shouldRestartOnError + \",\\n          timeMachineEnabled: \" + timeMachineEnabled + \",\\n        });\\n        \" + initialization.trim() + \"\\n    };\\n      BinaryBotPrivateStart = function BinaryBotPrivateStart() {\\n        \" + tradeOptionsStatement.trim() + \"\\n      };\\n\";\n  return code;\n};","import config from '../../../../constants/const';\nBlockly.Blocks.trade_definition_candleinterval = {\n  init: function init() {\n    this.jsonInit({\n      message0: 'Default Candle Interval: %1',\n      args0: [{\n        type: 'field_dropdown',\n        name: 'CANDLEINTERVAL_LIST',\n        options: config.candleIntervals.slice(1)\n      }],\n      colour: Blockly.Colours.BinaryLessPurple.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessPurple.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.END_DRAG) {\n      this.enforceParent();\n    }\n  },\n  enforceParent: Blockly.Blocks.trade_definition_market.enforceParent\n};\n\nBlockly.JavaScript.trade_definition_candleinterval = function () {};","import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { oppositesToDropdown } from '../../../utils';\nimport config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.trade_definition_contracttype = {\n  init: function init() {\n    this.jsonInit({\n      message0: 'Contract Type: %1',\n      args0: [{\n        type: 'field_dropdown',\n        name: 'TYPE_LIST',\n        options: [['', '']]\n      }],\n      colour: Blockly.Colours.BinaryLessPurple.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessPurple.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: function onchange(event) {\n    var _this = this;\n\n    var allowedEvents = [Blockly.Events.BLOCK_CREATE, Blockly.Events.BLOCK_CHANGE, Blockly.Events.END_DRAG];\n\n    if (!this.workspace || this.isInFlyout || !allowedEvents.includes(event.type) || this.workspace.isDragging()) {\n      return;\n    }\n\n    var topParentBlock = this.getTopParent();\n\n    if (!topParentBlock || topParentBlock.type !== 'trade_definition') {\n      this.enforceParent();\n      return;\n    }\n\n    var getContractTypes = function getContractTypes() {\n      var tradeTypeBlock = topParentBlock.getChildByType('trade_definition_tradetype');\n      var tradeType = tradeTypeBlock && tradeTypeBlock.getFieldValue('TRADETYPE_LIST');\n\n      if (tradeType) {\n        return [[translate('Both'), 'both']].concat(oppositesToDropdown(config.opposites[tradeType.toUpperCase()]));\n      }\n\n      return [['', '']];\n    };\n\n    var updateTypeList = function updateTypeList(useDefault) {\n      if (useDefault === void 0) {\n        useDefault = true;\n      }\n\n      var typeList = _this.getField('TYPE_LIST');\n\n      var typeListArgs = [getContractTypes()];\n\n      if (useDefault) {\n        typeListArgs.push(typeList.getValue());\n      }\n\n      typeList.updateOptions.apply(typeList, typeListArgs);\n    };\n\n    if (event.type === Blockly.Events.BLOCK_CHANGE) {\n      if (event.name === 'TRADETYPE_LIST') {\n        updateTypeList();\n      }\n    } else if (event.type === Blockly.Events.BLOCK_CREATE) {\n      if (event.ids.includes(this.id)) {\n        updateTypeList();\n      }\n    }\n  },\n  enforceParent: Blockly.Blocks.trade_definition_market.enforceParent\n};\n\nBlockly.JavaScript.trade_definition_contracttype = function () {\n  return '';\n};","import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { fieldGeneratorMapping } from '../../../shared';\nimport { observer as globalObserver } from '../../../../utils/observer';\nBlockly.Blocks.trade_definition_market = {\n  init: function init() {\n    this.jsonInit({\n      message0: 'Market: %1 Submarket: %2 Symbol: %3',\n      args0: [{\n        type: 'field_dropdown',\n        name: 'MARKET_LIST',\n        options: fieldGeneratorMapping.MARKET_LIST\n      }, {\n        type: 'field_dropdown',\n        name: 'SUBMARKET_LIST',\n        options: [['', '']]\n      }, {\n        type: 'field_dropdown',\n        name: 'SYMBOL_LIST',\n        options: [['', '']]\n      }],\n      colour: Blockly.Colours.BinaryLessPurple.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessPurple.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: function onchange(event) {\n    var _this = this;\n\n    var allowedEvents = [Blockly.Events.BLOCK_CREATE, Blockly.Events.BLOCK_CHANGE, Blockly.Events.END_DRAG];\n\n    if (!this.workspace || this.isInFlyout || !allowedEvents.includes(event.type) || this.workspace.isDragging()) {\n      return;\n    }\n\n    globalObserver.emit('bot.init', this.getFieldValue('SYMBOL_LIST'));\n    var topParentBlock = this.getTopParent();\n\n    if (!topParentBlock || topParentBlock.type !== 'trade_definition') {\n      this.enforceParent();\n      return;\n    }\n\n    var updateMarketLists = function updateMarketLists(fields, useDefault) {\n      if (useDefault === void 0) {\n        useDefault = true;\n      }\n\n      fields.forEach(function (field) {\n        var list = _this.getField(field);\n\n        var listArgs = [fieldGeneratorMapping[field](_this)()];\n\n        if (useDefault) {\n          listArgs.push(list.getValue());\n        }\n\n        list.updateOptions.apply(list, listArgs);\n      });\n    };\n\n    if (event.type === Blockly.Events.BLOCK_CREATE) {\n      if (event.ids.includes(this.id)) {\n        updateMarketLists(['SUBMARKET_LIST', 'SYMBOL_LIST']);\n      }\n    } else if (event.type === Blockly.Events.BLOCK_CHANGE) {\n      if (event.blockId === this.id) {\n        if (event.name === 'MARKET_LIST') {\n          updateMarketLists(['SUBMARKET_LIST']);\n        } else if (event.name === 'SUBMARKET_LIST') {\n          updateMarketLists(['SYMBOL_LIST']);\n        }\n      }\n    }\n  },\n  enforceParent: function enforceParent() {\n    if (!this.isDescendantOf('trade_definition')) {\n      Blockly.Events.disable();\n      this.unplug(false);\n      var tradeDefinitionBlock = this.workspace.getAllBlocks().find(function (block) {\n        return block.type === 'trade_definition';\n      });\n\n      if (tradeDefinitionBlock) {\n        var connection = tradeDefinitionBlock.getLastConnectionInStatement('TRADE_OPTIONS');\n        connection.connect(this.previousConnection);\n      } else {\n        this.dispose();\n      }\n\n      Blockly.Events.enable();\n    }\n  }\n};\n\nBlockly.JavaScript.trade_definition_market = function () {};","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nBlockly.Blocks.trade_definition_restartbuysell = {\n  init: function init() {\n    this.jsonInit({\n      message0: 'Restart buy/sell on error (disable for better performance): %1',\n      args0: [{\n        type: 'input_value',\n        name: 'TIME_MACHINE_ENABLED',\n        check: 'Boolean'\n      }],\n      colour: Blockly.Colours.BinaryLessPurple.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessPurple.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: function onchange(event) {\n    var allowedEvents = [Blockly.Events.BLOCK_CREATE, Blockly.Events.BLOCK_CHANGE, Blockly.Events.END_DRAG];\n\n    if (!this.workspace || this.isInFlyout || !allowedEvents.includes(event.type) || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.END_DRAG) {\n      this.enforceParent();\n    }\n  },\n  enforceParent: Blockly.Blocks.trade_definition_market.enforceParent\n};\n\nBlockly.JavaScript.trade_definition_restartbuysell = function () {};","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nBlockly.Blocks.trade_definition_restartonerror = {\n  init: function init() {\n    this.jsonInit({\n      message0: 'Restart last trade on error (bot ignores the unsuccessful trade): %1',\n      args0: [{\n        type: 'input_value',\n        name: 'RESTARTONERROR',\n        check: 'Boolean'\n      }],\n      colour: Blockly.Colours.BinaryLessPurple.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessPurple.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: function onchange(event) {\n    var allowedEvents = [Blockly.Events.BLOCK_CREATE, Blockly.Events.BLOCK_CHANGE, Blockly.Events.END_DRAG];\n\n    if (!this.workspace || this.isInFlyout || !allowedEvents.includes(event.type) || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.END_DRAG) {\n      this.enforceParent();\n    }\n  },\n  enforceParent: Blockly.Blocks.trade_definition_market.enforceParent\n};\n\nBlockly.JavaScript.trade_definition_restartonerror = function () {};","import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { getBarriersForContracts, pollForContracts, getDurationsForContracts } from '../../../shared';\nimport config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.trade_definition_tradeoptions = {\n  init: function init() {\n    this.jsonInit(this.definition()); // Ensure one of this type per statement-stack\n\n    this.setNextStatement(false);\n  },\n  definition: function definition() {\n    return {\n      message0: translate('Duration: %1 %2 Stake: %3 %4'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'DURATIONTYPE_LIST',\n        options: [['', '']]\n      }, {\n        type: 'input_value',\n        name: 'DURATION'\n      }, {\n        type: 'field_dropdown',\n        name: 'CURRENCY_LIST',\n        options: [['USD', 'USD']] // TODO: Don't use hardcoded currency.\n\n      }, {\n        type: 'input_value',\n        name: 'AMOUNT',\n        check: 'Number'\n      }],\n      colour: Blockly.Colours.BinaryLessPurple.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessPurple.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Trade Options Tooltip'),\n      category: Blockly.Categories.Trade_Definition\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Trade Options'),\n      'description': translate('Trade Options Description')\n    };\n  },\n  onchange: function onchange(event) {\n    var _this = this;\n\n    var allowedEvents = [Blockly.Events.BLOCK_CREATE, Blockly.Events.BLOCK_CHANGE, Blockly.Events.END_DRAG];\n\n    if (!this.workspace || this.isInFlyout || !allowedEvents.includes(event.type) || this.workspace.isDragging()) {\n      return;\n    }\n\n    var topParentBlock = this.getTopParent();\n\n    if (!topParentBlock || topParentBlock.type !== 'trade_definition') {\n      if (!this.disabled) {\n        this.setDisabled(true);\n      }\n\n      return;\n    } else if (this.disabled) {\n      this.setDisabled(false);\n    }\n\n    var symbol = topParentBlock.getChildFieldValue('trade_definition_market', 'SYMBOL_LIST') || '';\n    var tradeTypeBlock = topParentBlock.getChildByType('trade_definition_tradetype');\n    var tradeType = tradeTypeBlock.getFieldValue('TRADETYPE_LIST') || '';\n    var durationUnit = this.getFieldValue('DURATIONTYPE_LIST');\n\n    if (event.type === Blockly.Events.BLOCK_CREATE) {\n      if (event.ids.includes(this.id)) {\n        pollForContracts(symbol).then(function (contracts) {\n          var durations = getDurationsForContracts(contracts, tradeType);\n\n          _this.updateDurationInput(durations, true);\n        });\n      }\n    } else if (event.type === Blockly.Events.BLOCK_CHANGE) {\n      if (event.blockId === this.id) {\n        if (event.name === 'DURATIONTYPE_LIST') {\n          pollForContracts(symbol).then(function (contracts) {\n            _this.updateBarrierInputs(contracts, tradeType, durationUnit);\n          });\n        } else if (event.name === 'BARRIERTYPE_LIST' || event.name === 'SECONDBARRIERTYPE_LIST') {\n          this.applyBarrierHandlebars(event.name);\n          pollForContracts(symbol).then(function (contracts) {\n            _this.updateBarrierInputs(contracts, tradeType, durationUnit);\n          });\n        }\n      }\n    } else if (event.type === Blockly.Events.END_DRAG) {\n      if (event.blockId === this.id) {\n        pollForContracts(symbol).then(function (contracts) {\n          var durations = getDurationsForContracts(contracts, tradeType);\n\n          _this.updateDurationInput(durations, true);\n        });\n      }\n    }\n  },\n  createPredictionInput: function createPredictionInput(predictionRange) {\n    Blockly.Events.disable();\n\n    if (this.getInput('PREDICTION')) {\n      return;\n    }\n\n    this.appendDummyInput('PREDICTION_LABEL').appendField(translate('Prediction:'));\n    var predictionInput = this.appendValueInput('PREDICTION'); // We can't determine which contract a user buys, so sometimes the prediction range\n    // returned may not be valid, start at minimum index 1 (if possible) to bypass that\n\n    var index = Math.min(1, predictionRange.length - 1);\n    var shadowBlock = this.workspace.newBlock('math_number');\n    shadowBlock.setShadow(true);\n    shadowBlock.setFieldValue(predictionRange[index], 'NUM');\n    shadowBlock.outputConnection.connect(predictionInput.connection);\n    shadowBlock.initSvg();\n    shadowBlock.render(true);\n    Blockly.Events.enable();\n  },\n  createBarrierInput: function createBarrierInput(barriers, startIndex) {\n    if (startIndex === void 0) {\n      startIndex = 0;\n    }\n\n    var inputNames = ['BARRIER', 'SECONDBARRIER'];\n    var inputLabels = [translate('High barrier'), translate('Low barrier')];\n\n    for (var i = startIndex; i < barriers.values.length; i++) {\n      if (this.getInput(inputNames[i])) {\n        return;\n      }\n\n      var label = barriers.values.length === 1 ? translate('Barrier') : inputLabels[i];\n      var input = this.appendValueInput(inputNames[i]).appendField(translate(label), inputNames[i] + \"_LABEL\").appendField(new Blockly.FieldDropdown(config.barrierTypes), inputNames[i] + \"TYPE_LIST\");\n      var shadowBlock = this.workspace.newBlock('math_number');\n      shadowBlock.setShadow(true);\n      shadowBlock.setFieldValue(barriers.values[i], 'NUM');\n      shadowBlock.outputConnection.connect(input.connection);\n      shadowBlock.initSvg();\n      shadowBlock.render(true);\n    }\n  },\n  updateDurationInput: function updateDurationInput(durations, setMinDuration) {\n    var durationList = this.getField('DURATIONTYPE_LIST');\n    durationList.updateOptions(durations.map(function (duration) {\n      return [duration.label, duration.unit];\n    }));\n    var durationInput = this.getInput('DURATION');\n\n    if (durationInput.connection.isConnected()) {\n      var targetBlock = durationInput.connection.targetBlock();\n\n      if (targetBlock.isShadow()) {\n        var minDuration = durations.find(function (duration) {\n          return duration.unit === durationList.getValue();\n        });\n\n        if (setMinDuration) {\n          targetBlock.setFieldValue(minDuration.minimum, 'NUM');\n        }\n      }\n    }\n  },\n  // Only updates a single `trade_definition_tradeoptions` block, i.e. `this` instance\n  updateBarrierInputs: function updateBarrierInputs(contracts, tradeType, durationUnit) {\n    var selectedBarrierTypes = [this.getFieldValue('BARRIERTYPE_LIST') || config.barrierTypes[0][1], this.getFieldValue('SECONDBARRIERTYPE_LIST') || config.barrierTypes[1][1]];\n    var barriers = getBarriersForContracts(contracts, tradeType, durationUnit, selectedBarrierTypes);\n    var inputNames = ['BARRIER', 'SECONDBARRIER'];\n\n    for (var i = 0; i < barriers.values.length; i++) {\n      var input = this.getInput(inputNames[i]);\n\n      if (input && input.connection.isConnected()) {\n        var targetBlock = input.connection.targetBlock();\n        var barrierTypeList = this.getField(inputNames[i] + \"TYPE_LIST\");\n        var absoluteType = [[translate('Absolute'), 'absolute']];\n\n        if (durationUnit === 'd') {\n          barrierTypeList.updateOptions(absoluteType, 'absolute');\n        } else if (barriers.allowBothTypes || barriers.allowAbsoluteType) {\n          barrierTypeList.updateOptions([].concat(config.barrierTypes, absoluteType), barrierTypeList.getValue());\n        } else {\n          barrierTypeList.updateOptions(config.barrierTypes, barrierTypeList.getValue());\n        }\n\n        if (targetBlock.isShadow()) {\n          targetBlock.setFieldValue(barriers.values[i], 'NUM');\n        }\n      }\n    }\n  },\n  // Allow only one type of barrier (i.e. either both offset or absolute barrier type)\n  applyBarrierHandlebars: function applyBarrierHandlebars(barrierInputName) {\n    var newValue = this.getFieldValue(barrierInputName);\n    var otherBarrierListName = barrierInputName === 'BARRIERTYPE_LIST' ? 'SECONDBARRIERTYPE_LIST' : 'BARRIERTYPE_LIST';\n    var otherBarrierList = this.getField(otherBarrierListName);\n\n    if (otherBarrierList) {\n      var otherBarrierType = otherBarrierList.getValue();\n\n      if (config.barrierTypes.findIndex(function (type) {\n        return type[1] === newValue;\n      }) !== -1 && otherBarrierType === 'absolute') {\n        var otherValue = config.barrierTypes.find(function (type) {\n          return type[1] !== newValue;\n        });\n        otherBarrierList.setValue(otherValue[1]);\n      } else if (newValue === 'absolute' && otherBarrierType !== 'absolute') {\n        otherBarrierList.setValue('absolute');\n      }\n    }\n  },\n  // Rebuild block from XML\n  domToMutation: function domToMutation(xmlElement) {\n    var hasFirstBarrier = xmlElement.getAttribute('has_first_barrier') === 'true';\n    var hasSecondBarrier = xmlElement.getAttribute('has_second_barrier') === 'true';\n    var hasPrediction = xmlElement.getAttribute('has_prediction') === 'true';\n\n    if (hasFirstBarrier && hasSecondBarrier) {\n      this.createBarrierInput({\n        values: [1, 2]\n      });\n    } else if (hasFirstBarrier) {\n      this.createBarrierInput({\n        values: [1]\n      });\n    } else if (hasPrediction) {\n      this.createPredictionInput([1]);\n    }\n  },\n  // Export mutations to XML\n  mutationToDom: function mutationToDom() {\n    var container = document.createElement('mutation');\n    container.setAttribute('has_first_barrier', !!this.getInput('BARRIER'));\n    container.setAttribute('has_second_barrier', !!this.getInput('SECONDBARRIER'));\n    container.setAttribute('has_prediction', !!this.getInput('PREDICTION'));\n    return container;\n  },\n  enforceParent: Blockly.Blocks.trade_definition_market.enforceParent\n};\n\nBlockly.JavaScript.trade_definition_tradeoptions = function (block) {\n  var durationValue = Blockly.JavaScript.valueToCode(block, 'DURATION') || '0';\n  var durationType = block.getFieldValue('DURATIONTYPE_LIST') || '0';\n  var currency = block.getFieldValue('CURRENCY_LIST');\n  var amount = Blockly.JavaScript.valueToCode(block, 'AMOUNT') || '0';\n  var predictionValue = 'undefined';\n\n  if (block.getInput('PREDICTION')) {\n    predictionValue = Blockly.JavaScript.valueToCode(block, 'PREDICTION') || '-1';\n  }\n\n  var getBarrierValue = function getBarrierValue(barrierOffsetType, value) {\n    // Variables should not be encapsulated in quotes\n    if (/^(\\d+(\\.\\d+)?)$/.test(value)) {\n      return barrierOffsetType === 'absolute' ? \"'\" + value + \"'\" : \"'\" + barrierOffsetType + value + \"'\";\n    }\n\n    return barrierOffsetType === 'absolute' ? value : \"'\" + barrierOffsetType + \"' + \" + value;\n  };\n\n  var barrierOffsetValue = 'undefined';\n  var secondBarrierOffsetValue = 'undefined';\n\n  if (block.getInput('BARRIER')) {\n    var barrierOffsetType = block.getFieldValue('BARRIERTYPE_LIST');\n    var value = Blockly.JavaScript.valueToCode(block, 'BARRIER') || '0';\n    barrierOffsetValue = getBarrierValue(barrierOffsetType, value);\n  }\n\n  if (block.getInput('SECONDBARRIER')) {\n    var _barrierOffsetType = block.getFieldValue('SECONDBARRIERTYPE_LIST');\n\n    var _value = Blockly.JavaScript.valueToCode(block, 'SECONDBARRIER') || '0';\n\n    secondBarrierOffsetValue = getBarrierValue(_barrierOffsetType, _value);\n  }\n\n  var code = \"\\n        Bot.start({\\n        limitations: BinaryBotPrivateLimitations,\\n        duration: \" + durationValue + \",\\n        duration_unit: '\" + durationType + \"',\\n        currency: '\" + currency + \"',\\n        amount: \" + amount + \",\\n        prediction: \" + predictionValue + \",\\n        barrierOffset: \" + barrierOffsetValue + \",\\n        secondBarrierOffset: \" + secondBarrierOffsetValue + \",\\n        });\\n    \";\n  return code;\n};","import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { fieldGeneratorMapping, pollForContracts, getPredictionForContracts, getBarriersForContracts, getDurationsForContracts } from '../../../shared';\nimport config from '../../../../constants/const';\nimport { translate } from '../../../../utils/lang/i18n';\nBlockly.Blocks.trade_definition_tradetype = {\n  init: function init() {\n    this.jsonInit({\n      message0: translate('Trade Category: %1 Trade Type: %2'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'TRADETYPECAT_LIST',\n        options: [['', '']]\n      }, {\n        type: 'field_dropdown',\n        name: 'TRADETYPE_LIST',\n        options: [['', '']]\n      }],\n      colour: Blockly.Colours.BinaryLessPurple.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessPurple.colourTertiary,\n      previousStatement: null,\n      nextStatement: null\n    });\n    this.setMovable(false);\n    this.setDeletable(false);\n  },\n  onchange: function onchange(event) {\n    var _this = this;\n\n    var allowedEvents = [Blockly.Events.BLOCK_CREATE, Blockly.Events.BLOCK_CHANGE, Blockly.Events.END_DRAG];\n\n    if (!this.workspace || this.isInFlyout || !allowedEvents.includes(event.type) || this.workspace.isDragging()) {\n      return;\n    }\n\n    var topParentBlock = this.getTopParent();\n\n    if (!topParentBlock || topParentBlock.type !== 'trade_definition') {\n      this.enforceParent();\n      return;\n    }\n\n    var marketBlock = topParentBlock.getChildByType('trade_definition_market');\n\n    if (!marketBlock) {\n      return;\n    }\n\n    var symbol = marketBlock.getFieldValue('SYMBOL_LIST');\n\n    if (!symbol) {\n      return;\n    }\n\n    var updateTradeTypeCatList = function updateTradeTypeCatList(useDefault) {\n      if (useDefault === void 0) {\n        useDefault = false;\n      }\n\n      var tradeTypeCatList = _this.getField('TRADETYPECAT_LIST');\n\n      var tradeTypeCatArgs = [fieldGeneratorMapping.TRADETYPECAT_LIST(marketBlock)()];\n\n      if (useDefault) {\n        tradeTypeCatArgs.push(tradeTypeCatList.getValue());\n      }\n\n      tradeTypeCatList.updateOptions.apply(tradeTypeCatList, tradeTypeCatArgs);\n    };\n\n    var updateTradeTypeList = function updateTradeTypeList(useDefault) {\n      if (useDefault === void 0) {\n        useDefault = false;\n      }\n\n      var tradeTypeList = _this.getField('TRADETYPE_LIST');\n\n      var tradeTypeArgs = [fieldGeneratorMapping.TRADETYPE_LIST(_this)()];\n\n      if (useDefault) {\n        tradeTypeArgs.push(tradeTypeList.getValue());\n      }\n\n      tradeTypeList.updateOptions.apply(tradeTypeList, tradeTypeArgs);\n    };\n\n    if (event.type === Blockly.Events.BLOCK_CHANGE) {\n      if (event.name === 'MARKET_LIST' || event.name === 'SUBMARKET_LIST' || event.name === 'SYMBOL_LIST') {\n        updateTradeTypeCatList();\n      } else if (event.name === 'TRADETYPECAT_LIST') {\n        updateTradeTypeList();\n      } else if (event.name === 'TRADETYPE_LIST') {\n        pollForContracts(symbol).then(function (contracts) {\n          _this.updatePredictionInputs(contracts);\n\n          _this.updateBarrierInputs(contracts);\n\n          _this.updateDurationInputs(contracts);\n        });\n      }\n    } else if (event.type === Blockly.Events.BLOCK_CREATE) {\n      if (event.ids.includes(this.id)) {\n        updateTradeTypeCatList(true);\n        updateTradeTypeList(true);\n        pollForContracts(symbol).then(function (contracts) {\n          _this.updateDurationInputs(contracts);\n        });\n      }\n    }\n  },\n  updateBarrierInputs: function updateBarrierInputs(contracts) {\n    var topParentBlock = this.getTopParent();\n    this.workspace.getAllBlocks().filter(function (block) {\n      return block.type === 'trade_definition_tradeoptions';\n    }).forEach(function (tradeOptionsBlock) {\n      var barrierOffsetNames = ['BARRIER', 'SECONDBARRIER'];\n      var barrierLabels = [translate('High barrier'), translate('Low barrier')];\n      var tradeType = topParentBlock.getChildFieldValue('trade_definition_tradetype', 'TRADETYPE_LIST');\n      var durationUnit = tradeOptionsBlock.getFieldValue('DURATIONTYPE_LIST');\n      var firstBarrierType = tradeOptionsBlock.getFieldValue('BARRIERTYPE_LIST') || config.barrierTypes[0][1];\n      var secondBarrierType = tradeOptionsBlock.getFieldValue('SECONDBARRIERTYPE_LIST') || config.barrierTypes[1][1];\n      var selectedBarrierTypes = [firstBarrierType, secondBarrierType];\n      var barriers = getBarriersForContracts(contracts, tradeType, durationUnit, selectedBarrierTypes);\n\n      if (barriers.values.length === 0) {\n        tradeOptionsBlock.removeInput('BARRIER', true);\n        tradeOptionsBlock.removeInput('SECONDBARRIER', true);\n      } else {\n        Blockly.Events.disable();\n        var firstBarrierInput = tradeOptionsBlock.getInput('BARRIER');\n        var secondBarrierInput = tradeOptionsBlock.getInput('SECONDBARRIER');\n\n        if (barriers.values.length > 0) {\n          if (!firstBarrierInput) {\n            tradeOptionsBlock.createBarrierInput(barriers);\n          }\n\n          if (barriers.values.length === 1 && secondBarrierInput) {\n            tradeOptionsBlock.removeInput('SECONDBARRIER');\n          } else if (barriers.values.length === 2 && !secondBarrierInput) {\n            tradeOptionsBlock.createBarrierInput(barriers, 1); // Ensure barrier inputs are displayed together\n\n            tradeOptionsBlock.moveInputBefore('BARRIER', 'SECONDBARRIER');\n          }\n\n          barriers.values.forEach(function (barrierValue, index) {\n            var typeList = tradeOptionsBlock.getField(barrierOffsetNames[index] + \"TYPE_LIST\");\n            var typeInput = tradeOptionsBlock.getInput(barrierOffsetNames[index]);\n            var absoluteType = [[translate('Absolute'), 'absolute']];\n\n            if (durationUnit === 'd') {\n              typeList.updateOptions(absoluteType);\n            } else if (barriers.allowBothTypes || barriers.allowAbsoluteType) {\n              typeList.updateOptions([].concat(config.barrierTypes, absoluteType));\n            } else {\n              typeList.updateOptions(config.barrierTypes);\n            }\n\n            if (barriers.values.length === 1) {\n              typeInput.fieldRow[0].setText(translate('Barrier') + \":\");\n            } else {\n              typeInput.fieldRow[0].setText(barrierLabels[index] + \":\");\n            }\n          }); // Updates Shadow Block values\n\n          var barrierInputArgs = [contracts, tradeType, tradeOptionsBlock.getFieldValue('DURATIONTYPE_LIST')];\n          tradeOptionsBlock.updateBarrierInputs.apply(tradeOptionsBlock, barrierInputArgs);\n        }\n\n        tradeOptionsBlock.initSvg();\n        tradeOptionsBlock.render();\n        Blockly.Events.enable();\n      }\n    });\n  },\n  updatePredictionInputs: function updatePredictionInputs(contracts) {\n    var topParentBlock = this.getTopParent();\n    var tradeType = topParentBlock.getChildFieldValue('trade_definition_tradetype', 'TRADETYPE_LIST');\n    var predictionRange = getPredictionForContracts(contracts, tradeType);\n    this.workspace.getAllBlocks().filter(function (block) {\n      return block.type === 'trade_definition_tradeoptions';\n    }).forEach(function (tradeOptionsBlock) {\n      if (predictionRange.length === 0) {\n        tradeOptionsBlock.removeInput('PREDICTION_LABEL');\n        tradeOptionsBlock.removeInput('PREDICTION');\n      } else {\n        var predictionInput = tradeOptionsBlock.getInput('PREDICTION');\n\n        if (predictionInput) {// TODO: Set new suggested value from API, i.e. first value in prediction range\n        } else {\n          tradeOptionsBlock.createPredictionInput(predictionRange);\n        }\n      }\n\n      tradeOptionsBlock.initSvg();\n      tradeOptionsBlock.render(true);\n    });\n  },\n  updateDurationInputs: function updateDurationInputs(contracts) {\n    var topParentBlock = this.getTopParent();\n    var tradeType = topParentBlock.getChildFieldValue('trade_definition_tradetype', 'TRADETYPE_LIST');\n    var durations = getDurationsForContracts(contracts, tradeType);\n    this.workspace.getAllBlocks().filter(function (block) {\n      return block.type === 'trade_definition_tradeoptions';\n    }).forEach(function (tradeOptionsBlock) {\n      var durationUnits = durations.map(function (duration) {\n        return [duration.label, duration.unit];\n      });\n      var durationList = tradeOptionsBlock.getField('DURATIONTYPE_LIST');\n      durationList.updateOptions(durationUnits);\n      var minDuration = durations.find(function (duration) {\n        return duration.unit === durationList.getValue();\n      });\n\n      if (minDuration) {\n        tradeOptionsBlock.updateDurationInput(durations, minDuration.minimum);\n      }\n    });\n  },\n  enforceParent: Blockly.Blocks.trade_definition_market.enforceParent\n};\n\nBlockly.JavaScript.trade_definition_tradetype = function () {\n  return '';\n};","import \"core-js/modules/es6.function.name\";\nimport { plusIconDark, minusIconDark } from '../images';\nimport { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.controls_if = {\n  init: function init() {\n    this.elseIfCount = 0;\n    this.elseCount = 0;\n    this.jsonInit(this.definition());\n    var addInputIcon = this.getAddInputIcon();\n    this.appendDummyInput('MUTATOR').appendField(addInputIcon);\n  },\n  definition: function definition() {\n    return {\n      message0: translate('if %1 then'),\n      message1: '%1',\n      args0: [{\n        type: 'input_value',\n        name: 'IF0',\n        check: 'Boolean'\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'DO0'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      // category         : Blockly.Categories.control,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('If else statement tooltip'),\n      category: Blockly.Categories.Logic\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': 'If else statement',\n      'description': 'If else statement description'\n    };\n  },\n\n  /**\n   * Create XML to represent the number of else-if and else inputs.\n   * @return {Element} XML storage element.\n   * @this Blockly.Block\n   */\n  mutationToDom: function mutationToDom() {\n    if (!this.elseIfCount && !this.elseCount) {\n      return null;\n    }\n\n    var container = document.createElement('mutation');\n\n    if (this.elseIfCount) {\n      container.setAttribute('elseif', this.elseIfCount);\n    }\n\n    if (this.elseCount) {\n      container.setAttribute('else', 1);\n    }\n\n    return container;\n  },\n\n  /**\n   * Parse XML to restore the else-if and else inputs.\n   * @param {!Element} xmlElement XML storage element.\n   * @this Blockly.Block\n   */\n  domToMutation: function domToMutation(xmlElement) {\n    this.elseIfCount = parseInt(xmlElement.getAttribute('elseif')) || 0;\n    this.elseCount = parseInt(xmlElement.getAttribute('else')) || 0;\n    this.updateShape();\n  },\n  updateShape: function updateShape() {\n    // Delete everything.\n    if (this.getInput('ELSE')) {\n      this.removeInput('ELSE');\n    }\n\n    var i = 1;\n\n    while (this.getInput(\"IF\" + i)) {\n      this.removeInput(\"IF\" + i);\n      this.removeInput(\"DO\" + i);\n      i++;\n    }\n\n    if (this.getInput('MUTATOR')) {\n      this.removeInput('MUTATOR');\n    } // Rebuild block\n\n\n    for (var j = 1; j <= this.elseIfCount; j++) {\n      this.appendDummyInput(\"IF_LABEL\" + j).appendField(translate('else if'));\n      this.appendValueInput(\"IF\" + j).setCheck('Boolean');\n      this.appendDummyInput(\"THEN_LABEL\" + j).appendField(translate('then'));\n      this.appendDummyInput(\"DELETE_ICON\" + j).appendField(this.getRemoveInputIcon(j, false));\n      this.appendStatementInput(\"DO\" + j);\n    }\n\n    if (this.elseCount) {\n      this.appendDummyInput('ELSE_LABEL').appendField(translate('else'));\n      this.appendDummyInput('DELETE_ELSE').appendField(this.getRemoveInputIcon(this.elseIfCount + 1, true));\n      this.appendStatementInput('ELSE');\n    }\n\n    this.appendDummyInput('MUTATOR').appendField(this.getAddInputIcon());\n    this.initSvg();\n    this.render();\n  },\n  getAddInputIcon: function getAddInputIcon() {\n    var _this = this;\n\n    var onAddClick = function onAddClick() {\n      if (!_this.workspace || _this.isInFlyout) {\n        return;\n      }\n\n      var newInputNum = _this.elseIfCount + 1;\n\n      if (_this.elseCount === 0) {\n        // No `elseif`, just add an `else`-statement\n        _this.appendDummyInput('ELSE_LABEL').appendField(translate('else'));\n\n        _this.appendDummyInput('DELETE_ELSE').appendField(_this.getRemoveInputIcon(newInputNum, true));\n\n        _this.appendStatementInput('ELSE');\n\n        _this.elseCount++;\n      } else {\n        // We've already got `elseif` + `else`, keep adding more `elseif`'s\n        _this.appendDummyInput(\"IF_LABEL\" + newInputNum).appendField(translate('else if'));\n\n        _this.appendValueInput(\"IF\" + newInputNum).setCheck('Boolean');\n\n        _this.appendDummyInput(\"THEN_LABEL\" + newInputNum).appendField(translate('then'));\n\n        _this.appendDummyInput(\"DELETE_ICON\" + newInputNum).appendField(_this.getRemoveInputIcon(newInputNum, false));\n\n        _this.appendStatementInput(\"DO\" + newInputNum);\n\n        _this.elseIfCount++;\n      } // We already have an else, this input needs to be moved to the bottom where it belongs.\n\n\n      if (_this.getInput('ELSE')) {\n        _this.moveInputBefore('ELSE_LABEL', null);\n\n        _this.moveInputBefore('DELETE_ELSE', null);\n\n        _this.moveInputBefore('ELSE', null);\n      } // Move plus-icon to the bottom\n\n\n      _this.moveInputBefore('MUTATOR', null);\n\n      _this.initSvg();\n\n      _this.render();\n    };\n\n    var fieldImage = new Blockly.FieldImage(plusIconDark, 24, 24, '+', onAddClick);\n    return fieldImage;\n  },\n  getRemoveInputIcon: function getRemoveInputIcon(index, isElseStack) {\n    var _this2 = this;\n\n    var onRemoveClick = function onRemoveClick() {\n      if (!_this2.workspace || _this2.isInFlyout) {\n        return;\n      }\n\n      if (isElseStack) {\n        _this2.removeInput('ELSE_LABEL');\n\n        _this2.removeInput('DELETE_ELSE');\n\n        _this2.removeInput('ELSE');\n\n        _this2.elseCount = 0;\n      } else {\n        // Determine which label it is, has to be done inside this function.\n        var inputNames = ['IF_LABEL', 'IF', 'THEN_LABEL', 'DELETE_ICON', 'DO'];\n        inputNames.forEach(function (inputName) {\n          _this2.removeInput(\"\" + inputName + index); // Re-number inputs w/ indexes larger than this one, e.g. when removing `IF5` becomes `IF4`\n\n\n          var i = 1;\n          var j = 0; // e.g. we've removed `IF5`, name of larger input `IF6` should become `IF5`\n\n          var largerInput = _this2.getInput(inputName + (index + i));\n\n          while (largerInput) {\n            var newIndex = index + j;\n            largerInput.name = inputName + newIndex; // Re-attach click handler with correct index.\n\n            if (inputName === 'DELETE_ICON') {\n              for (var k = 0; k < largerInput.fieldRow.length; k++) {\n                var field = largerInput.fieldRow[k];\n                field.dispose();\n                largerInput.fieldRow.splice(k, 1);\n              }\n\n              largerInput.appendField(_this2.getRemoveInputIcon(newIndex, false));\n            }\n\n            i++;\n            j++;\n            largerInput = _this2.getInput(inputName + (index + i));\n          }\n        });\n        _this2.elseIfCount--;\n      }\n    };\n\n    var fieldImage = new Blockly.FieldImage(minusIconDark, 24, 24, '-', onRemoveClick);\n    return fieldImage;\n  }\n};\n\nBlockly.JavaScript.controls_if = function (block) {\n  // If/elseif/else condition.\n  var n = 0;\n  var code = '';\n\n  do {\n    var condition = Blockly.JavaScript.valueToCode(block, \"IF\" + n, Blockly.JavaScript.ORDER_NONE) || 'false'; // i.e. (else)? if { // code }\n\n    var keyword = n > 0 ? 'else if' : 'if';\n    code += \"\\n        \" + keyword + \" (\" + condition + \") {\\n            \" + Blockly.JavaScript.statementToCode(block, \"DO\" + n) + \"\\n        }\";\n    n++;\n  } while (block.getInput(\"IF\" + n));\n\n  if (block.getInput('ELSE')) {\n    code += \"\\n        else {\\n            \" + Blockly.JavaScript.statementToCode(block, 'ELSE') + \"\\n        }\";\n  }\n\n  return code + \"\\n\";\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.logic_boolean = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: '%1',\n      args0: [{\n        type: 'field_dropdown',\n        name: 'BOOL',\n        options: [[translate('true'), 'TRUE'], [translate('false'), 'FALSE']]\n      }],\n      output: 'Boolean',\n      outputShape: Blockly.OUTPUT_SHAPE_HEXAGONAL,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Logic Boolean Tooltip'),\n      category: Blockly.Categories.Logic\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Logic Boolean'),\n      'description': translate('Logic Boolean Description')\n    };\n  }\n};\n\nBlockly.JavaScript.logic_boolean = function (block) {\n  var code = block.getFieldValue('BOOL') === 'TRUE' ? 'true' : 'false';\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.logic_compare = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: '%1 %2 %3',\n      args0: [{\n        type: 'input_value',\n        name: 'A'\n      }, {\n        type: 'field_dropdown',\n        name: 'OP',\n        options: [['=', 'EQ'], [\"\\u2260\", 'NEQ'], [\"\\u200F<\", 'LT'], [\"\\u200F\\u2264\", 'LTE'], [\"\\u200F>\", 'GT'], [\"\\u200F\\u2265\", 'GTE']]\n      }, {\n        type: 'input_value',\n        name: 'B'\n      }],\n      output: 'Boolean',\n      outputShape: Blockly.OUTPUT_SHAPE_HEXAGONAL,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Logic Compare Tooltip'),\n      category: Blockly.Categories.Logic\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Logic Compare'),\n      'description': translate('Logic Compare Description')\n    };\n  }\n};\n\nBlockly.JavaScript.logic_compare = function (block) {\n  var operatorMapping = {\n    EQ: '==',\n    NEQ: '!=',\n    LT: '<',\n    LTE: '<=',\n    GT: '>',\n    GTE: '>='\n  };\n  var operator = operatorMapping[block.getFieldValue('OP') || 'EQ'];\n  var order = ['==', '!='].includes(operator) ? Blockly.JavaScript.ORDER_EQUALITY : Blockly.JavaScript.ORDER_RELATIONAL;\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'A', order);\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'B', order);\n  var code = argument0 + \" \" + operator + \" \" + argument1;\n  return [code, order];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.logic_negate = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('not %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'BOOL'\n      }],\n      output: 'Boolean',\n      outputShape: Blockly.OUTPUT_SHAPE_HEXAGONAL,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Logic Negate Tooltip'),\n      category: Blockly.Categories.Logic\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Logic Negate'),\n      'description': translate('Logic Negate Description')\n    };\n  }\n};\n\nBlockly.JavaScript.logic_negate = function (block) {\n  var order = Blockly.JavaScript.ORDER_LOGICAL_NOT;\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'BOOL', order) || 'true';\n  var code = \"!\" + argument0;\n  return [code, order];\n};","import { translate } from '../../../utils/tools';\nBlockly.Blocks.logic_null = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: 'null',\n      output: null,\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Logic Null Tooltip'),\n      category: Blockly.Categories.Logic\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Logic Null'),\n      'description': translate('Logic Null Description')\n    };\n  }\n};\n\nBlockly.JavaScript.logic_null = function () {\n  return ['null', Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.logic_operation = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: '%1 %2 %3',\n      args0: [{\n        type: 'input_value',\n        name: 'A'\n      }, {\n        type: 'field_dropdown',\n        name: 'OP',\n        options: [[translate('and'), 'AND'], [translate('or'), 'OR']]\n      }, {\n        type: 'input_value',\n        name: 'B'\n      }],\n      output: 'Boolean',\n      outputShape: Blockly.OUTPUT_SHAPE_HEXAGONAL,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Logic Operator Tooltip'),\n      category: Blockly.Categories.Logic\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Logic Operator'),\n      'description': translate('Logic Operator Description')\n    };\n  }\n};\n\nBlockly.JavaScript.logic_operation = function (block) {\n  var selectedOperator = block.getFieldValue('OP');\n  var operator, order;\n\n  if (selectedOperator === 'AND') {\n    operator = '&&';\n    order = Blockly.JavaScript.ORDER_LOGICAL_AND;\n  } else if (selectedOperator === 'OR') {\n    operator = '||';\n    order = Blockly.JavaScript.ORDER_LOGICAL_OR;\n  }\n\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'A');\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'B');\n  var code = argument0 + \" \" + operator + \" \" + argument1;\n  return [code, order];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.logic_ternary = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('test %1'),\n      message1: translate('if true %1'),\n      message2: translate('if false %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'IF',\n        check: 'Boolean'\n      }],\n      args1: [{\n        type: 'input_value',\n        name: 'THEN'\n      }],\n      args2: [{\n        type: 'input_value',\n        name: 'ELSE'\n      }],\n      output: null,\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Logic Ternary Tooltip'),\n      category: Blockly.Categories.Logic\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Logic Ternary'),\n      'description': translate('Logic Ternary Description')\n    };\n  }\n};\n\nBlockly.JavaScript.logic_ternary = function (block) {\n  var valueIf = Blockly.JavaScript.valueToCode(block, 'IF', Blockly.JavaScript.ORDER_CONDITIONAL) || 'false';\n  var valueThen = Blockly.JavaScript.valueToCode(block, 'THEN', Blockly.JavaScript.ORDER_CONDITIONAL) || 'null';\n  var valueElse = Blockly.JavaScript.valueToCode(block, 'ELSE', Blockly.JavaScript.ORDER_CONDITIONAL) || 'null';\n  var code = valueIf + \" ? \" + valueThen + \" : \" + valueElse;\n  return [code, Blockly.JavaScript.ORDER_CONDITIONAL];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_arithmetic = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: '%1 %2 %3',\n      args0: [{\n        type: 'input_value',\n        name: 'A',\n        check: 'Number'\n      }, {\n        type: 'field_dropdown',\n        name: 'OP',\n        options: [['+', 'ADD'], ['-', 'MINUS'], ['*', 'MULTIPLY'], ['/', 'DIVIDE'], ['^', 'POWER']]\n      }, {\n        type: 'input_value',\n        name: 'B',\n        check: 'Number'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Mathematic Arithmetic (Add, minus, mutiply, divide, power)'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Mathematic Arithmetic'),\n      'description': translate('Mathematic Arithmetic Description')\n    };\n  }\n};\n\nBlockly.JavaScript.math_arithmetic = function (block) {\n  var operators = {\n    ADD: ['+', Blockly.JavaScript.ORDER_ADDITION],\n    MINUS: ['-', Blockly.JavaScript.ORDER_SUBTRACTION],\n    MULTIPLY: ['*', Blockly.JavaScript.ORDER_MULTIPLICATION],\n    DIVIDE: ['/', Blockly.JavaScript.ORDER_DIVISION],\n    POWER: [null, Blockly.JavaScript.ORDER_COMMA] // Handle power separately.\n\n  };\n  var tuple = operators[block.getFieldValue('OP')];\n  var operator = tuple[0];\n  var order = tuple[1];\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'A', order) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'B', order) || '0';\n  var code; // Power in JavaScript requires a special case since it has no operator.\n\n  if (!operator) {\n    code = \"Math.pow(\" + argument0 + \", \" + argument1 + \")\";\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  }\n\n  code = argument0 + \" \" + operator + \" \" + argument1;\n  return [code, order];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_change = {\n  /**\n  * Initializes the block, in most cases this calls the jsonInit function, in some\n  * cases it may add extra properties to the block object.\n  * https://developers.google.com/blockly/reference/js/Blockly.Block#jsonInit\n  */\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n\n  /**\n   * Block definitions describe how a block looks and behaves, including the text,\n   * the colour, the shape, and what other blocks it can connect to. We've separated\n   * the block definition from the init function so we can search through it.\n   * https://developers.google.com/blockly/guides/create-custom-blocks/define-blocks\n   */\n  definition: function definition() {\n    return {\n      message0: translate('change %1 by %2'),\n      args0: [{\n        type: 'field_variable',\n        name: 'VAR',\n        variable: translate('item')\n      }, {\n        type: 'input_value',\n        name: 'DELTA',\n        check: 'Number'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Change Number variable'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n\n  /**\n   * Meta returns an object with with properties that contain human readable strings,\n   * these strings are used in the flyout help content, as well as used for searching\n   * for specific blocks.\n   */\n  meta: function meta() {\n    return {\n      'display_name': translate('Change Math'),\n      'description': translate('Change Number Type Variable')\n    };\n  }\n};\n\nBlockly.JavaScript.math_change = function (block) {\n  var variable = block.getFieldValue('VAR'); // eslint-disable-next-line no-underscore-dangle\n\n  var argument0 = Blockly.JavaScript.variableDB_.getName(variable, Blockly.Variables.NAME_TYPE);\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';\n  var code = \"\\n    if (typeof \" + argument0 + \" != 'number') {\\n        \" + argument0 + \" = 0;\\n    };\\n    \" + argument0 + \" += \" + argument1 + \";\\n\";\n  return code;\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_constant = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: '%1',\n      args0: [{\n        type: 'field_dropdown',\n        name: 'CONSTANT',\n        options: [[\"\\u03C0\", 'PI'], [\"\\u2107\", 'E'], [\"\\u03D5\", 'GOLDEN_RATIO'], ['sqrt(2)', 'SQRT2'], [\"sqrt(\\xBD)\", 'SQRT1_2'], [\"\\u221E\", 'INFINITY']]\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Math Constant Tooltip'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Math Constant'),\n      'description': translate('Math Constant Description')\n    };\n  }\n};\n\nBlockly.JavaScript.math_constant = function (block) {\n  var constant = block.getFieldValue('CONSTANT');\n  var code, order;\n\n  if (constant === 'PI') {\n    code = 'Math.PI';\n    order = Blockly.JavaScript.ORDER_MEMBER;\n  } else if (constant === 'E') {\n    code = 'Math.E';\n    order = Blockly.JavaScript.ORDER_MEMBER;\n  } else if (constant === 'GOLDEN_RATIO') {\n    code = '(1 + Math.sqrt(5)) / 2';\n    order = Blockly.JavaScript.ORDER_DIVISION;\n  } else if (constant === 'SQRT2') {\n    code = 'Math.SQRT2';\n    order = Blockly.JavaScript.ORDER_MEMBER;\n  } else if (constant === 'SQRT1_2') {\n    code = 'Math.SQRT1_2';\n    order = Blockly.JavaScript.ORDER_MEMBER;\n  } else if (constant === 'INFINITY') {\n    code = 'Infinity';\n    order = Blockly.JavaScript.ORDER_ATOMIC;\n  }\n\n  return [code, order];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_constrain = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('constrain %1 low %2 high %3'),\n      args0: [{\n        type: 'input_value',\n        name: 'VALUE',\n        check: 'Number'\n      }, {\n        type: 'input_value',\n        name: 'LOW',\n        check: 'Number'\n      }, {\n        type: 'input_value',\n        name: 'HIGH',\n        check: 'Number'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Math Constrain Tooltip'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Math Constrain'),\n      'description': translate('Math Constrain Description')\n    };\n  }\n};\n\nBlockly.JavaScript.math_constrain = function (block) {\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'VALUE', Blockly.JavaScript.ORDER_COMMA) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'LOW', Blockly.JavaScript.ORDER_COMMA) || '0';\n  var argument2 = Blockly.JavaScript.valueToCode(block, 'HIGH', Blockly.JavaScript.ORDER_COMMA) || '0';\n  var code = \"Math.min(Math.max(\" + argument0 + \", \" + argument1 + \"), \" + argument2 + \")\";\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_modulo = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('remainder of %1 ÷ %2'),\n      args0: [{\n        type: 'input_value',\n        name: 'DIVIDEND',\n        check: 'Number'\n      }, {\n        type: 'input_value',\n        name: 'DIVISOR',\n        check: 'Number'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Math Modulo Tooltip'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Math Modulo'),\n      'description': translate('Math Modulo Description')\n    };\n  }\n};\n\nBlockly.JavaScript.math_modulo = function (block) {\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'DIVIDEND', Blockly.JavaScript.ORDER_MODULUS) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'DIVISOR', Blockly.JavaScript.ORDER_MODULUS) || '0';\n  var code = argument0 + \" % \" + argument1;\n  return [code, Blockly.JavaScript.ORDER_MODULUS];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_number = {\n  init: function init() {\n    var _this = this;\n\n    this.jsonInit(this.definition());\n    var fieldInput = this.getField('NUM');\n    fieldInput.setValidator(function (input) {\n      return _this.numberValidator(input);\n    });\n  },\n  definition: function definition() {\n    return {\n      message0: '%1',\n      args0: [{\n        type: 'field_number',\n        name: 'NUM',\n        value: 0\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: '#dedede',\n      colourSecondary: '#ffffff',\n      colourTertiary: '#ffffff',\n      tooltip: translate('Math Number Tooltip'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Math Number'),\n      'description': translate('Math Number Decscription')\n    };\n  },\n  numberValidator: function numberValidator(input) {\n    if (/^-?([0][,.]|[1-9]+[,.])?([0]|[1-9])*$/.test(input)) {\n      return undefined;\n    }\n\n    return null;\n  }\n};\n\nBlockly.JavaScript.math_number = function (block) {\n  var code = block.getFieldValue('NUM');\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_number_positive = {\n  init: Blockly.Blocks.math_number.init,\n  definition: Blockly.Blocks.math_number.definition,\n  meta: function meta() {\n    return {\n      'display_name': translate('Math Number Positive'),\n      'description': translate('Math Number Description')\n    };\n  },\n  numberValidator: function numberValidator(input) {\n    if (/^([0][,.]|[1-9]+[,.])?([0]|[1-9])*$/.test(input)) {\n      return undefined;\n    }\n\n    return null;\n  }\n};\nBlockly.JavaScript.math_number_positive = Blockly.JavaScript.math_number;","import \"core-js/modules/es6.function.name\";\nimport { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_number_property = {\n  init: function init() {\n    var _this = this;\n\n    this.jsonInit(this.definition());\n    this.setOnChange(function (event) {\n      if (event.name === 'PROPERTY') {\n        var hasDivisorInput = _this.getFieldValue('PROPERTY') === 'DIVISIBLE_BY';\n\n        _this.updateShape(hasDivisorInput);\n      }\n    });\n  },\n  definition: function definition() {\n    return {\n      message0: translate('%1 is %2'),\n      args0: [{\n        type: 'input_value',\n        name: 'NUMBER_TO_CHECK'\n      }, {\n        type: 'field_dropdown',\n        name: 'PROPERTY',\n        options: [[translate('even'), 'EVEN'], [translate('odd'), 'ODD'], [translate('prime'), 'PRIME'], [translate('whole'), 'WHOLE'], [translate('positive'), 'POSITIVE'], [translate('negative'), 'NEGATIVE'], [translate('divisible by'), 'DIVISIBLE_BY']]\n      }],\n      output: 'Boolean',\n      outputShape: Blockly.OUTPUT_SHAPE_HEXAGONAL,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      toolip: translate('Math Number Tooltip'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Math Number'),\n      'description': translate('Math Number Description')\n    };\n  },\n  domToMutation: function domToMutation(xmlElement) {\n    var hasDivisorInput = xmlElement.getAttribute('divisor_input') === 'true';\n    this.updateShape(hasDivisorInput);\n  },\n  mutationToDom: function mutationToDom() {\n    var container = document.createElement('mutation');\n    var divisorInput = this.getFieldValue('PROPERTY') === 'DIVISIBLE_BY';\n    container.setAttribute('divisor_input', divisorInput);\n    return container;\n  },\n  updateShape: function updateShape(hasDivisorInput) {\n    var inputExists = this.getInput('DIVISOR');\n\n    if (hasDivisorInput) {\n      if (!inputExists) {\n        this.appendValueInput('DIVISOR').setCheck('Number');\n        this.initSvg();\n        this.render(false);\n      }\n    } else {\n      this.removeInput('DIVISOR');\n    }\n  }\n};\n\nBlockly.JavaScript.math_number_property = function (block) {\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'NUMBER_TO_CHECK', Blockly.JavaScript.ORDER_MODULUS) || '0';\n  var property = block.getFieldValue('PROPERTY');\n  var code;\n\n  if (property === 'PRIME') {\n    // eslint-disable-next-line no-underscore-dangle\n    var functionName = Blockly.JavaScript.provideFunction_('mathIsPrime', [// eslint-disable-next-line no-underscore-dangle\n    \"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(n) {\\n                // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\\n                if (n == 2 || n == 3) {\\n                    return true;\\n                }\\n\\n                // False if n is NaN, negative, is 1, or not whole.\\n                // And false if n is divisible by 2 or 3.\\n                if (isNaN(n) || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {\\n                    return false;\\n                }\\n\\n                // Check all the numbers of form 6k +/- 1, up to sqrt(n).\\n                for (var x  = 6; x <= Math.sqrt(n) + 1; x += 6) {\\n                    if (n % (x - 1) == 0 || n % (x + 1) == 0) {\\n                        return false;\\n                    }\\n                }\\n                return true;\\n            }\"]);\n    code = functionName + \"(\" + argument0 + \")\";\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  } else if (property === 'EVEN') {\n    code = argument0 + \" % 2 === 0\";\n  } else if (property === 'ODD') {\n    code = argument0 + \" % 2 === 1\";\n  } else if (property === 'WHOLE') {\n    code = argument0 + \" % 1 === 0\";\n  } else if (property === 'POSITIVE') {\n    code = argument0 + \" > 0\";\n  } else if (property === 'NEGATIVE') {\n    code = argument0 + \" < 0\";\n  } else if (property === 'DIVISIBLE_BY') {\n    var divisor = Blockly.JavaScript.valueToCode(block, 'DIVISOR', Blockly.JavaScript.ORDER_MODULUS) || '0';\n    code = argument0 + \" % \" + divisor + \" == 0\";\n  }\n\n  return [code, Blockly.JavaScript.ORDER_EQUALITY];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_on_list = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('%1 of list %2'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'OPERATION',\n        options: [[translate('sum'), 'SUM'], [translate('min'), 'MIN'], [translate('max'), 'MAX'], [translate('average'), 'AVERAGE'], [translate('median'), 'MEDIAN'], [translate('modes'), 'MODE'], [translate('standard deviation'), 'STD_DEV'], [translate('random item'), 'RANDOM']]\n      }, {\n        type: 'input_value',\n        name: 'LIST'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Math On List'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Math On List'),\n      'description': translate('Math On List Description')\n    };\n  }\n};\n/* eslint-disable no-underscore-dangle */\n\nBlockly.JavaScript.math_on_list = function (block) {\n  var operation = block.getFieldValue('OPERATION');\n  var code, list;\n\n  if (operation === 'SUM') {\n    list = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_MEMBER) || '[]';\n    code = list + \".reduce(function(x, y) { return x + y; })\";\n  } else if (operation === 'MIN') {\n    list = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_COMMA) || '[]';\n    code = \"Math.min.apply(null, \" + list + \")\";\n  } else if (operation === 'MAX') {\n    list = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_COMMA) || '[]';\n    code = \"Math.max.apply(null, \" + list + \")\";\n  } else if (operation === 'AVERAGE') {\n    var functionName = Blockly.JavaScript.provideFunction_('mathMean', [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(myList) {\\n                return myList.reduce(function(x, y) { \\n                    return x + y; \\n                }) / myList.length;\\n            }\"]);\n    list = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_NONE) || '[]';\n    code = functionName + \"(\" + list + \")\";\n  } else if (operation === 'MEDIAN') {\n    var _functionName = Blockly.JavaScript.provideFunction_('mathMedian', [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(myList) {\\n                var localList = myList.filter(function(x) { \\n                    return typeof x == 'number'; \\n                });\\n                if (!localList.length) {\\n                    return null;\\n                }\\n                localList.sort(function(a, b) { \\n                    return b - a; \\n                });\\n                if (localList.length % 2 == 0) {\\n                    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\\n                } else {\\n                    return localList[(localList.length - 1) / 2];\\n                }\\n            }\"]);\n\n    list = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_NONE) || '[]';\n    code = _functionName + \"(\" + list + \")\";\n  } else if (operation === 'MODE') {\n    var _functionName2 = Blockly.JavaScript.provideFunction_('mathModes', [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(values) {\\n                var modes = [];\\n                var counts = [];\\n                var maxCount = 0;\\n\\n                for (var i = 0; i < values.length; i++) {\\n                    var value = values[i];\\n                    var found = false;\\n                    var thisCount;\\n\\n                    for (var j = 0; j < counts.length; j++) {\\n                        if (counts[j][0] === value) {\\n                            thisCount = ++counts[j][1];\\n                            found = true;\\n                            break;\\n                        }\\n                    }\\n\\n                    if (!found) {\\n                        counts.push([value, 1]);\\n                        thisCount = 1;\\n                    }\\n                    maxCount = Math.max(thisCount, maxCount);\\n                }\\n                \\n                for (var j = 0; j < counts.length; j++) {\\n                    if (counts[j][1] == maxCount) {\\n                        modes.push(counts[j][0]);\\n                    }\\n                }\\n\\n                return modes;\\n            }\"]);\n\n    list = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_NONE) || '[]';\n    code = _functionName2 + \"(\" + list + \")\";\n  } else if (operation === 'STD_DEV') {\n    var _functionName3 = Blockly.JavaScript.provideFunction_('mathStandardDeviation', [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(numbers) {\\n                var n = numbers.length;\\n                if (!n) {\\n                    return null;\\n                }\\n\\n                var mean = numbers.reduce(function(x, y) {\\n                    return x + y;\\n                }) / n;\\n\\n                var variance = 0;\\n                for (var j = 0; j < n; j++) {\\n                    variance += Math.pow(numbers[j] - mean, 2);\\n                }\\n                variance = variance / n;\\n                return Math.sqrt(variance);\\n            }\"]);\n\n    list = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_NONE) || '[]';\n    code = _functionName3 + \"(\" + list + \")\";\n  } else if (operation === 'RANDOM') {\n    var _functionName4 = Blockly.JavaScript.provideFunction_('mathRandomList', [\"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(list) {\\n                var x = Math.floor(Math.random() * list.length);\\n                return list[x];\\n            }\"]);\n\n    list = Blockly.JavaScript.valueToCode(block, 'LIST', Blockly.JavaScript.ORDER_NONE) || '[]';\n    code = _functionName4 + \"(\" + list + \")\";\n  }\n\n  return [code, Blockly.JavaScript.FUNCTION_CALL];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_random_float = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('random fraction'),\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Math Random Float Tooltip'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Math Random Float'),\n      'description': translate('Math Random Float Description')\n    };\n  }\n};\n\nBlockly.JavaScript.math_random_float = function () {\n  return ['Math.random()', Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_random_int = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('random integer from %1 to %2'),\n      args0: [{\n        type: 'input_value',\n        name: 'FROM',\n        check: 'Number'\n      }, {\n        type: 'input_value',\n        name: 'TO',\n        check: 'Number'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Math Random Integer Tooltip'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Math Random Integer'),\n      'description': translate('Math Random Integer Description')\n    };\n  }\n};\n\nBlockly.JavaScript.math_random_int = function (block) {\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'FROM', Blockly.JavaScript.ORDER_COMMA) || '0';\n  var argument1 = Blockly.JavaScript.valueToCode(block, 'TO', Blockly.JavaScript.ORDER_COMMA) || '0'; // eslint-disable-next-line no-underscore-dangle\n\n  var functionName = Blockly.JavaScript.provideFunction_('mathRandomInt', [// eslint-disable-next-line no-underscore-dangle\n  \"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(a, b) {\\n            if (a > b) {\\n                // Swap a and b to ensure a is smaller.\\n                var c = a;\\n                a = b;\\n                b = c;\\n            }\\n            return Math.floor(Math.random() * (b - a + 1) + a);\\n        }\"]);\n  var code = functionName + \"(\" + argument0 + \", \" + argument1 + \")\";\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import { translate } from '../../../utils/lang/i18n'; // https://github.com/google/blockly/blob/master/generators/javascript/math.js\n\nBlockly.Blocks.math_round = {\n  /**\n   * Check if a number is even, odd, prime, whole, positive, or negative\n   * or if it is divisible by certain number. Returns true or false.\n   * @this Blockly.Block\n   */\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: '%1 %2',\n      args0: [{\n        type: 'field_dropdown',\n        name: 'OP',\n        options: [['round', 'ROUND'], ['round up', 'ROUNDUP'], ['round down', 'ROUNDDOWN']]\n      }, {\n        type: 'input_value',\n        name: 'NUM'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Math Round Tooltip'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Math Round'),\n      'description': translate('Math Round Description')\n    };\n  }\n};\n\nBlockly.JavaScript.math_round = function (block) {\n  var operation = block.getFieldValue('OP');\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'NUM') || '0';\n  var code;\n\n  if (operation === 'ROUND') {\n    code = \"Math.round(\" + argument0 + \")\";\n  } else if (operation === 'ROUNDUP') {\n    code = \"Math.ceil(\" + argument0 + \")\";\n  } else if (operation === 'ROUNDDOWN') {\n    code = \"Math.floor(\" + argument0 + \")\";\n  }\n\n  return [code, Blockly.JavaScript.FUNCTION_CALL];\n};","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_single = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('%1 %2'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'OP',\n        options: [[translate('square root'), 'ROOT'], [translate('absolute'), 'ABS'], ['-', 'NEG'], ['ln', 'LN'], ['log10', 'LOG10'], ['e^', 'EXP'], ['10^', 'POW10']]\n      }, {\n        type: 'input_value',\n        name: 'NUM'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Mathematical Single Tooltip'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Mathematical Single'),\n      'description': translate('Mathematical Single Description')\n    };\n  }\n};\n\nBlockly.JavaScript.math_single = function (block) {\n  var operator = block.getFieldValue('OP');\n  var code, arg;\n\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = Blockly.JavaScript.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_UNARY_NEGATION) || '0';\n\n    if (arg[0] === '-') {\n      // --3 is not legal in JS\n      arg = \" \" + arg;\n    }\n\n    code = \"-\" + arg;\n    return [code, Blockly.JavaScript.ORDER_UNARY_NEGATION];\n  }\n\n  if (['SIN', 'COS', 'TAN'].includes(operator)) {\n    arg = Blockly.JavaScript.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_DIVISION) || '0';\n  } else {\n    arg = Blockly.JavaScript.valueToCode(block, 'NUM', Blockly.JavaScript.ORDER_NONE) || '0';\n  } // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n\n\n  if (operator === 'ABS') {\n    code = \"Math.abs(\" + arg + \")\";\n  } else if (operator === 'ROOT') {\n    code = \"Math.sqrt(\" + arg + \")\";\n  } else if (operator === 'LN') {\n    code = \"Math.log(\" + arg + \")\";\n  } else if (operator === 'EXP') {\n    code = \"Math.pow(Math.E, \" + arg + \")\";\n  } else if (operator === 'POW10') {\n    code = \"Math.pow(10, \" + arg + \")\";\n  } else if (operator === 'ROUND') {\n    code = \"Math.round(\" + arg + \")\";\n  } else if (operator === 'ROUNDUP') {\n    code = \"Math.ceil(\" + arg + \")\";\n  } else if (operator === 'ROUNDDOWN') {\n    code = \"Math.floor(\" + arg + \")\";\n  } else if (operator === 'SIN') {\n    code = \"Math.sin(\" + arg + \" / 180 * Math.PI)\";\n  } else if (operator === 'COS') {\n    code = \"Math.cos(\" + arg + \" / 180 * Math.PI)\";\n  } else if (operator === 'TAN') {\n    code = \"Math.tan(\" + arg + \" / 180 * Math.PI)\";\n  }\n\n  if (code) {\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  } // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n\n\n  if (operator === 'LOG10') {\n    code = \"Math.log(\" + arg + \") / Math.log(10)\";\n  } else if (operator === 'ASIN') {\n    code = \"Math.asin(\" + arg + \") / Math.PI * 180\";\n  } else if (operator === 'ACOS') {\n    code = \"Math.acos(\" + arg + \") / Math.PI * 180\";\n  } else if (operator === 'ATAN') {\n    code = \"Math.atan(\" + arg + \") / Math.PI * 180\";\n  }\n\n  return [code, Blockly.JavaScript.ORDER_DIVISION];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.math_trig = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('%1 %2'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'OP',\n        options: [['sin', 'SIN'], ['cos', 'COS'], ['tan', 'TAN'], ['asin', 'ASIN'], ['acos', 'ACOS'], ['atan', 'ATAN']]\n      }, {\n        type: 'input_value',\n        name: 'NUM',\n        check: 'Number'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Mathematical Trig Tooltip'),\n      category: Blockly.Categories.Mathematical\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Mathematical Trig'),\n      'description': translate('Mathematical Trig Description')\n    };\n  }\n};\nBlockly.JavaScript.math_trig = Blockly.JavaScript.math_single;","import { translate } from '../../../utils/tools';\nBlockly.Blocks.text = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: '%1',\n      args0: [{\n        type: 'field_input',\n        name: 'TEXT'\n      }],\n      output: 'String',\n      outputShape: Blockly.OUTPUT_SHAPE_SQUARE,\n      colour: '#dedede',\n      colourSecondary: '#ffffff',\n      colourTertiary: '#ffffff',\n      tooltip: translate('Text Tooltip'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('text'),\n      'description': translate('Text Description')\n    };\n  }\n};\n\nBlockly.JavaScript.text = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var code = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.text_append = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('to %1 append text %2'),\n      args0: [{\n        type: 'field_variable',\n        name: 'VAR',\n        variable: translate('text')\n      }, {\n        type: 'input_value',\n        name: 'TEXT'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Text Append Tooltip'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Text Append'),\n      'description': translate('Text Append Description')\n    };\n  }\n};\n\nBlockly.JavaScript.text_append = function (block) {\n  var forceString = function forceString(value) {\n    var strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n    if (strRegExp.test(value)) {\n      return value;\n    }\n\n    return \"String(\" + value + \")\";\n  }; // eslint-disable-next-line no-underscore-dangle\n\n\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n  var value = Blockly.JavaScript.valueToCode(block, 'TEXT', Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\n  var code = varName + \" += \" + forceString(value) + \";\\n\";\n  return code;\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.text_changeCase = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('to %1 %2'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'CASE',\n        options: [[translate('UPPER CASE'), 'UPPERCASE'], [translate('lower case'), 'LOWERCASE'], [translate('Title Case'), 'TITLECASE']]\n      }, {\n        type: 'input_value',\n        name: 'TEXT'\n      }],\n      output: 'String',\n      outputShape: Blockly.OUTPUT_SHAPE_SQUARE,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Text Change Case Tooltip'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Text Change Case'),\n      'description': translate('Text Change Case Description')\n    };\n  }\n};\n\nBlockly.JavaScript.text_changeCase = function (block) {\n  var operators = {\n    UPPERCASE: '.toUpperCase()',\n    LOWERCASE: '.toLowerCase()',\n    TITLECASE: null\n  };\n  var operator = operators[block.getFieldValue('CASE')];\n  var textOrder = operator ? Blockly.JavaScript.ORDER_MEMBER : Blockly.JavaScript.ORDER_NONE;\n  var text = Blockly.JavaScript.valueToCode(block, 'TEXT', textOrder) || '\\'\\'';\n  var code;\n\n  if (operator) {\n    code = \"\" + text + operator;\n  } else {\n    // eslint-disable-next-line no-underscore-dangle\n    var functionName = Blockly.JavaScript.provideFunction_('textToTitleCase', [// eslint-disable-next-line no-underscore-dangle\n    \"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(str) {\\n                return str.toLowerCase().split(' ').map(function(word) {\\n                    return word.replace(word[0], word[0].toUpperCase());\\n                }).join(' ');\\n            }\"]);\n    code = functionName + \"(\" + text + \")\";\n  }\n\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.text_charAt = {\n  init: function init() {\n    var _this = this;\n\n    this.jsonInit(this.definition());\n    var dropdown = this.getField('WHERE');\n    dropdown.setValidator(function (value) {\n      var newAt = ['FROM_START', 'FROM_END'].includes(value);\n\n      if (newAt !== _this.isAt) {\n        _this.updateAt(newAt);\n\n        _this.setFieldValue(value, 'WHERE');\n\n        return null;\n      }\n\n      return undefined;\n    });\n    this.updateAt(true);\n  },\n  definition: function definition() {\n    return {\n      message0: translate('in text %1 get %2'),\n      args0: [{\n        type: 'input_value',\n        name: 'VALUE'\n      }, {\n        type: 'field_dropdown',\n        name: 'WHERE',\n        options: [[translate('letter #'), 'FROM_START'], [translate('letter # from end'), 'FROM_END'], [translate('first letter'), 'FIRST'], [translate('last letter'), 'LAST'], [translate('random letter'), 'RANDOM']]\n      }],\n      output: 'String',\n      outputShape: Blockly.OUTPUT_SHAPE_SQUARE,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Text Char At Tooltip'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Text Char At'),\n      'description': translate('Text Char At Description')\n    };\n  },\n  mutationToDom: function mutationToDom() {\n    var container = document.createElement('mutation');\n    container.setAttribute('at', !!this.isAt);\n    return container;\n  },\n  domToMutation: function domToMutation(xmlElement) {\n    var isAt = xmlElement.getAttribute('at') !== 'false';\n    this.updateAt(isAt);\n  },\n  updateAt: function updateAt(isAt) {\n    this.removeInput('AT', true);\n\n    if (isAt) {\n      this.appendValueInput('AT').setCheck('Number');\n    }\n\n    this.isAt = isAt;\n    this.initSvg();\n    this.render(false);\n  }\n};\n\nBlockly.JavaScript.text_charAt = function (block) {\n  var where = block.getFieldValue('WHERE') || 'FROM_START';\n  var textOrder = where === 'RANDOM' ? Blockly.JavaScript.ORDER_NONE : Blockly.JavaScript.ORDER_MEMBER;\n  var text = Blockly.JavaScript.valueToCode(block, 'VALUE', textOrder) || '\\'\\'';\n  var code;\n\n  if (where === 'FROM_START') {\n    var at = Blockly.JavaScript.getAdjusted(block, 'AT'); // Adjust index if using one-based indices\n\n    code = text + \".charAt(\" + at + \")\";\n  } else if (where === 'FROM_END') {\n    var _at = Blockly.JavaScript.getAdjusted(block, 'AT', 1, true);\n\n    code = text + \".slice(\" + _at + \").charAt(0)\";\n  } else if (where === 'FIRST') {\n    code = text + \".charAt(0)\";\n  } else if (where === 'LAST') {\n    code = text + \".slice(-1)\";\n  } else if (where === 'RANDOM') {\n    // eslint-disable-next-line no-underscore-dangle\n    var functionName = Blockly.JavaScript.provideFunction_('textRandomLetter', [// eslint-disable-next-line no-underscore-dangle\n    \"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(text) {\\n                var x = Math.floor(Math.random() * text.length);\\n                return text[x];\\n            }\"]);\n    code = functionName + \"(\" + text + \")\";\n  }\n\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.text_getSubstring = {\n  init: function init() {\n    this.WHERE_OPTIONS_1 = [[translate(\"letter\\xA0#\"), 'FROM_START'], [translate(\"letter\\xA0#\\xA0from end\"), 'FROM_END'], [translate('first'), 'FIRST']];\n    this.WHERE_OPTIONS_2 = [[translate(\"letter\\xA0#\"), 'FROM_START'], [translate(\"letter\\xA0#\\xA0from end\"), 'FROM_END'], [translate('last'), 'LAST']];\n    this.jsonInit(this.definition());\n    this.updateAt(1, true);\n    this.updateAt(2, true);\n  },\n  definition: function definition() {\n    return {\n      message0: translate('in text %1 get substring from %2 %3 to %4 %5'),\n      args0: [{\n        type: 'input_value',\n        name: 'STRING'\n      }, {\n        type: 'field_dropdown',\n        name: 'WHERE1',\n        options: this.WHERE_OPTIONS_1\n      }, {\n        type: 'input_dummy',\n        name: 'AT1'\n      }, {\n        type: 'field_dropdown',\n        name: 'WHERE2',\n        options: this.WHERE_OPTIONS_2\n      }, {\n        type: 'input_dummy',\n        name: 'AT2'\n      }],\n      output: 'String',\n      outputShape: Blockly.OUTPUT_SHAPE_SQUARE,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Text Substring tooltip'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Text Substring'),\n      'description': translate('Text Substring Description')\n    };\n  },\n  mutationToDom: function mutationToDom() {\n    var container = document.createElement('mutation');\n    var isAt1 = this.getInput('AT1').type === Blockly.INPUT_VALUE;\n    var isAt2 = this.getInput('AT2').type === Blockly.INPUT_VALUE;\n    container.setAttribute('at1', isAt1);\n    container.setAttribute('at2', isAt2);\n    return container;\n  },\n  domToMutation: function domToMutation(xmlElement) {\n    var isAt1 = xmlElement.getAttribute('at1') === 'true';\n    var isAt2 = xmlElement.getAttribute('at2') === 'true';\n    this.updateAt(1, isAt1);\n    this.updateAt(2, isAt2);\n  },\n  updateAt: function updateAt(n, isAt) {\n    var _this = this;\n\n    this.removeInput(\"AT\" + n, true);\n\n    if (isAt) {\n      this.appendValueInput(\"AT\" + n).setCheck('Number');\n    } else {\n      this.appendDummyInput(\"AT\" + n);\n    }\n\n    var menu = new Blockly.FieldDropdown(this[\"WHERE_OPTIONS_\" + n], function (value) {\n      var newAt = ['FROM_START', 'FROM_END'].includes(value);\n\n      if (newAt !== isAt) {\n        _this.updateAt(n, newAt);\n\n        _this.setFieldValue(value, \"WHERE\" + n);\n\n        return null;\n      }\n\n      return undefined;\n    });\n    this.getInput(\"AT\" + n).appendField(menu, \"WHERE\" + n);\n\n    if (n === 1) {\n      this.moveInputBefore('AT1', 'AT2');\n    }\n\n    this.initSvg();\n    this.render(false);\n  }\n};\n\nBlockly.JavaScript.text_getSubstring = function (block) {\n  var text = Blockly.JavaScript.valueToCode(block, 'STRING', Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\n  var where1 = block.getFieldValue('WHERE1');\n  var where2 = block.getFieldValue('WHERE2');\n  var at1, at2, code;\n\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = text;\n  } else if (text.match(/^'?\\w+'?$/) || where1 !== 'FROM_END' && where1 !== 'LAST' && where2 !== 'FROM_END' && where2 !== 'LAST') {\n    if (where1 === 'FROM_START') {\n      at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\n    } else if (where1 === 'FROM_END') {\n      at1 = Blockly.JavaScript.getAdjusted(block, 'AT1', 1, false, Blockly.JavaScript.ORDER_SUBTRACTION);\n      at1 = text + \".length - \" + at1;\n    } else if (where1 === 'FIRST') {\n      at1 = '0';\n    }\n\n    if (where2 === 'FROM_START') {\n      at2 = Blockly.JavaScript.getAdjusted(block, 'AT2');\n    } else if (where2 === 'FROM_END') {\n      at2 = Blockly.JavaScript.getAdjusted(block, 'AT2', 0, false, Blockly.JavaScript.ORDER_SUBTRACTION);\n      at2 = text + \".length - \" + at2;\n    } else if (where2 === 'LAST') {\n      at2 = text + \".length\";\n    }\n  } else {\n    at1 = Blockly.JavaScript.getAdjusted(block, 'AT1');\n    at2 = Blockly.JavaScript.getAdjusted(block, 'AT2'); // binary-bot: Blockly.JavaScript.text.getIndex_ (Blockly)\n\n    var getIndex = function getIndex(stringName, where, optAt) {\n      if (where === 'FIRST') {\n        return '0';\n      } else if (where === 'FROM_END') {\n        return stringName + \".length - 1 - \" + optAt;\n      } else if (where === 'LAST') {\n        return stringName + \".length - 1\";\n      }\n\n      return optAt;\n    };\n\n    var wherePascalCase = {\n      FIRST: 'First',\n      LAST: 'Last',\n      FROM_START: 'FromStart',\n      FROM_END: 'FromEnd'\n    }; // eslint-disable-next-line no-underscore-dangle\n\n    var functionName = Blockly.JavaScript.provideFunction_(\"subsequence\" + wherePascalCase[where1] + wherePascalCase[where2], [// eslint-disable-next-line no-underscore-dangle\n    \"function \" + Blockly.JavaScript.FUNCTION_NAME_PLACEHOLDER_ + \"(\\n                    sequence\\n                    \" + (where1 === 'FROM_END' || where1 === 'FROM_START' ? ', at1' : '') + \"\\n                    \" + (where2 === 'FROM_END' || where2 === 'FROM_START' ? ', at2' : '') + \"\\n                ) {\\n                    var start = \" + getIndex('sequence', where1, 'at1') + \";\\n                    var end = \" + getIndex('sequence', where2, 'at2') + \";\\n                    return sequence.slice(start, end);\\n                }\"]);\n    code = functionName + \"(\\n            \" + text + \"\\n            \" + (where1 === 'FROM_END' || where1 === 'FROM_START' ? \", \" + at1 : '') + \"\\n            \" + (where2 === 'FROM_END' || where2 === 'FROM_START' ? \", \" + at2 : '') + \"\\n        )\";\n  }\n\n  code = text + \".slice(\" + at1 + \", \" + at2 + \")\";\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.text_indexOf = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('in text %1 find %2 occurence of text %3'),\n      args0: [{\n        type: 'input_value',\n        name: 'VALUE' // check: 'String', Rendering looks off when check is enabled.\n\n      }, {\n        type: 'field_dropdown',\n        name: 'END',\n        options: [[translate('first'), 'FIRST'], [translate('last'), 'LAST']]\n      }, {\n        type: 'input_value',\n        name: 'FIND' // check: 'String',\n\n      }],\n      output: 'String',\n      outputShape: Blockly.OUTPUT_SHAPE_SQUARE,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Text Index of Tooltip'),\n      cateogry: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Text Index of'),\n      'description': translate('Text Index of Description')\n    };\n  }\n};\n\nBlockly.JavaScript.text_indexOf = function (block) {\n  var functionName = block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  var substring = Blockly.JavaScript.valueToCode(block, 'FIND', Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\n  var text = Blockly.JavaScript.valueToCode(block, 'VALUE', Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\n  var code = text + \".\" + functionName + \"(\" + substring + \")\";\n\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + \" + 1\", Blockly.JavaScript.ORDER_ADDITION];\n  }\n\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find-index\";\nimport { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.text_isEmpty = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('text %1 is empty'),\n      args0: [{\n        type: 'input_value',\n        name: 'VALUE',\n        check: ['String']\n      }],\n      output: 'Boolean',\n      outputShape: Blockly.OUTPUT_SHAPE_HEXAGONAL,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Text Is empty'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Text Is empty'),\n      'description': translate('Text Is empty')\n    };\n  }\n};\n\nBlockly.JavaScript.text_isEmpty = function (block) {\n  var text = Blockly.JavaScript.valueToCode(block, 'VALUE', Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\n  var isVariable = block.workspace.getAllVariables().findIndex(function (variable) {\n    return variable.name === text;\n  }) !== -1;\n  var code = isVariable ? \"!\" + text + \" || !\" + text + \".length\" : \"!\" + text + \".length\";\n  return [code, Blockly.JavaScript.ORDER_LOGICAL_NOT];\n};","import { plusIconDark } from '../images';\nimport { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.text_join = {\n  init: function init() {\n    this.jsonInit(this.definition());\n    var fieldImage = new Blockly.FieldImage(plusIconDark, 25, 25, '', this.onIconClick.bind(this));\n    this.appendDummyInput('ADD_ICON').appendField(fieldImage);\n    this.moveInputBefore('ADD_ICON', 'STACK');\n  },\n  definition: function definition() {\n    return {\n      message0: translate('set %1 to create text with'),\n      message1: '%1',\n      args0: [{\n        type: 'field_variable',\n        name: 'VARIABLE',\n        variable: translate('text')\n      }],\n      args1: [{\n        type: 'input_statement',\n        name: 'STACK'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Text Join Tooltip'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Text Join'),\n      'description': translate('Text Join Description')\n    };\n  },\n  onIconClick: function onIconClick() {\n    if (!this.workspace || this.isInFlyout) {\n      return;\n    }\n\n    Blockly.Events.setGroup(true);\n    var textBlock = this.workspace.newBlock('text_statement');\n    textBlock.requiredParentId = this.id;\n    textBlock.setMovable(false);\n    textBlock.initSvg();\n    textBlock.render();\n    var shadowBlock = this.workspace.newBlock('text');\n    shadowBlock.setShadow(true);\n    shadowBlock.setFieldValue('', 'TEXT');\n    shadowBlock.initSvg();\n    shadowBlock.render();\n    var textInput = textBlock.getInput('TEXT');\n    textInput.connection.connect(shadowBlock.outputConnection);\n    var connection = this.getLastConnectionInStatement('STACK');\n    connection.connect(textBlock.previousConnection);\n    Blockly.Events.setGroup(false); // TODO: Open editor and focus so user can add string right away?\n    // const inputField = shadowBlock.getField('TEXT');\n    // inputField.showEditor_();\n  },\n  enforceTextStatementType: function enforceTextStatementType() {\n    var currentBlock = this.getInputTargetBlock('STACK');\n\n    while (currentBlock !== null) {\n      if (currentBlock.type !== 'text_statement') {\n        currentBlock.unplug(false);\n      }\n\n      currentBlock = currentBlock.getNextBlock();\n    }\n  },\n  onchange: function onchange(event) {\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    if (event.type === Blockly.Events.END_DRAG) {\n      // Only allow `text_statement` type blocks\n      var blocksInStatement = this.getBlocksInStatement('STACK');\n      blocksInStatement.forEach(function (block) {\n        if (block.type !== 'text_statement') {\n          Blockly.Events.disable();\n          block.unplug();\n          Blockly.Events.enable();\n        }\n      });\n    }\n  }\n};\n\nBlockly.JavaScript.text_join = function (block) {\n  // eslint-disable-next-line no-underscore-dangle\n  var varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VARIABLE'), Blockly.Variables.NAME_TYPE);\n  var elements = [];\n  var currentBlock = block.getInputTargetBlock('STACK');\n\n  while (currentBlock !== null) {\n    var value = Blockly.JavaScript[currentBlock.type](currentBlock);\n\n    if (Array.isArray(value) && value.length === 2) {\n      elements.push(value[0]);\n    } else {\n      elements.push(value);\n    }\n\n    currentBlock = currentBlock.getNextBlock();\n  }\n\n  var code;\n\n  if (elements.length === 0) {\n    code = varName + \" = '';\\n\";\n  } else {\n    code = varName + \" = \" + elements.join(' + ') + \";\\n\";\n  }\n\n  return code;\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.text_length = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('length of %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'VALUE'\n      }],\n      output: 'Number',\n      outputShape: Blockly.OUTPUT_SHAPE_ROUND,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Text Length Tooltip'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Text Length'),\n      'description': translate('Text Length Description')\n    };\n  }\n};\n\nBlockly.JavaScript.text_length = function (block) {\n  var text = Blockly.JavaScript.valueToCode(block, 'VALUE', Blockly.JavaScript.ORDER_FUNCTION_CALL) || '\\'\\'';\n  var code = text + \".length\";\n  return [code, Blockly.JavaScript.ORDER_MEMBER];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.text_print = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('print %1'),\n      args0: [{\n        type: 'input_value',\n        name: 'TEXT'\n      }],\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Text Print Tooltip'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Text Print'),\n      'description': translate('Text Print Description')\n    };\n  }\n};\n\nBlockly.JavaScript.text_print = function (block) {\n  var msg = Blockly.JavaScript.valueToCode(block, 'TEXT', Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\n  var code = \"window.alert(\" + msg + \");\\n\";\n  return code;\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.text_prompt_ext = {\n  init: function init() {\n    var _this = this;\n\n    this.jsonInit(this.definition()); // Change shape based on selected type\n\n    var typeField = this.getField('TYPE');\n    typeField.setValidator(function (value) {\n      if (value === 'TEXT') {\n        _this.setOutputShape(Blockly.OUTPUT_SHAPE_SQUARE);\n\n        _this.setOutput(true, 'String');\n      } else if (value === 'NUMBER') {\n        _this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n\n        _this.setOutput(true, 'Number');\n      }\n\n      _this.initSvg();\n\n      _this.render(false);\n\n      return undefined;\n    });\n  },\n  definition: function definition() {\n    return {\n      message0: translate('prompt for %1 with message %2'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'TYPE',\n        options: [[translate('string'), 'TEXT'], [translate('number'), 'NUMBER']]\n      }, {\n        type: 'input_value',\n        name: 'TEXT'\n      }],\n      output: 'String',\n      outputShape: Blockly.OUTPUT_SHAPE_SQUARE,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Text Prompt Tooltip'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'trade_name': translate('Text Prompt'),\n      'description': translate('Text Prompt Description')\n    };\n  }\n};\n\nBlockly.JavaScript.text_prompt_ext = function (block) {\n  var msg, code;\n\n  if (block.getField('TEXT')) {\n    // Internal message\n    // eslint-disable-next-line no-underscore-dangle\n    msg = Blockly.JavaScript.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message\n    msg = Blockly.JavaScript.valueToCode(block, 'TEXT', Blockly.JavaScript.ORDER_NONE) || '\\'\\'';\n  }\n\n  if (block.getFieldValue('TYPE') === 'NUMBER') {\n    code = \"parseFloat(window.prompt(\" + msg + \"))\";\n  } else {\n    code = \"window.prompt(\" + msg + \")\";\n  }\n\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import \"core-js/modules/es6.array.find\";\nimport { minusIconDark } from '../images';\nimport { translate } from '../../../utils/tools';\nBlockly.Blocks.text_statement = {\n  init: function init() {\n    var _this = this;\n\n    this.requiredParentId = '';\n    this.jsonInit(this.definition());\n    var fieldImage = new Blockly.FieldImage(minusIconDark, 25, 25, '', function () {\n      return _this.onIconClick();\n    });\n    this.appendDummyInput('REMOVE_ICON').appendField(fieldImage);\n  },\n  definition: function definition() {\n    return {\n      message0: '%1',\n      args0: [{\n        type: 'input_value',\n        name: 'TEXT'\n      }],\n      colour: Blockly.Colours.BinaryLessGray.colour,\n      colourSecondary: Blockly.Colours.BinaryLessGray.colourSecondary,\n      colourTertiary: Blockly.Colours.BinaryLessGray.colourTertiary,\n      previousStatement: null,\n      nextStatement: null,\n      tooltip: translate('Text Statement Tooltip'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Text Statement'),\n      'description': translate('Text Statement Description')\n    };\n  },\n  onIconClick: function onIconClick() {\n    if (!this.workspace || this.isInFlyout) {\n      return;\n    }\n\n    this.unplug(true);\n    this.dispose();\n  },\n  onchange: function onchange(event) {\n    var _this2 = this;\n\n    if (!this.workspace || this.isInFlyout || this.workspace.isDragging()) {\n      return;\n    }\n\n    var surroundParent = this.getSurroundParent();\n\n    if (event.type === Blockly.Events.END_DRAG) {\n      if (!this.requiredParentId && surroundParent.type === 'text_join') {\n        this.requiredParentId = surroundParent.id;\n      } else if (!surroundParent || surroundParent.id !== this.requiredParentId) {\n        Blockly.Events.disable();\n        this.unplug(false);\n        var parentBlock = this.workspace.getAllBlocks().find(function (block) {\n          return block.id === _this2.requiredParentId;\n        });\n\n        if (parentBlock) {\n          var parentConnection = parentBlock.getLastConnectionInStatement('STACK');\n          parentConnection.connect(this.previousConnection);\n        } else {\n          this.dispose();\n        }\n\n        Blockly.Events.enable();\n      }\n    }\n  }\n};\n\nBlockly.JavaScript.text_statement = function (block) {\n  var code = Blockly.JavaScript.valueToCode(block, 'TEXT') || '';\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};","import { translate } from '../../../utils/lang/i18n';\nBlockly.Blocks.text_trim = {\n  init: function init() {\n    this.jsonInit(this.definition());\n  },\n  definition: function definition() {\n    return {\n      message0: translate('trim spaces from %1 of %2'),\n      args0: [{\n        type: 'field_dropdown',\n        name: 'MODE',\n        options: [[translate('both sides'), 'BOTH'], [translate('left side'), 'LEFT'], [translate('right side'), 'RIGHT']]\n      }, {\n        type: 'input_value',\n        name: 'TEXT'\n      }],\n      output: 'String',\n      outputShape: Blockly.OUTPUT_SHAPE_SQUARE,\n      colour: Blockly.Colours.Binary.colour,\n      colourSecondary: Blockly.Colours.Binary.colourSecondary,\n      colourTertiary: Blockly.Colours.Binary.colourTertiary,\n      tooltip: translate('Text Trim Tooltip'),\n      category: Blockly.Categories.Text\n    };\n  },\n  meta: function meta() {\n    return {\n      'display_name': translate('Text Trim'),\n      'description': translate('Text Trim Description')\n    };\n  }\n};\n\nBlockly.JavaScript.text_trim = function (block) {\n  var operators = {\n    LEFT: '.replace(/^[\\\\s\\\\xa0]+/, \\'\\')',\n    RIGHT: '.replace(/[\\\\s\\\\xa0]+$/, \\'\\')',\n    BOTH: '.trim()'\n  };\n  var operator = operators[block.getFieldValue('MODE')];\n  var text = Blockly.JavaScript.valueToCode(block, 'TEXT', Blockly.JavaScript.ORDER_MEMBER) || '\\'\\'';\n  var code = \"\" + text + operator;\n  return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n};","import \"core-js/modules/es6.array.find\";\n\n/* eslint-disable func-names, no-underscore-dangle */\nBlockly.Block.prototype.getDisplayName = function () {\n  if (this.meta) {\n    var block_meta = this.meta();\n    return block_meta && block_meta.display_name;\n  }\n\n  return this.type;\n};\n\nBlockly.Block.prototype.getDisplayName = function () {\n  if (this.meta) {\n    var block_meta = this.meta();\n    return block_meta && block_meta.display_name;\n  }\n\n  return this.type;\n};\n\nBlockly.Block.prototype.getSiblings = function () {\n  var _this = this;\n\n  var siblings = [this];\n  ['getPreviousBlock', 'getNextBlock'].forEach(function (functionName) {\n    var block = _this[functionName]();\n\n    while (block !== null) {\n      var parent = _this.getParent();\n\n      if (parent && parent.id === block.id) {\n        break;\n      }\n\n      siblings.push(block);\n      block = block[functionName]();\n    }\n  });\n  return siblings;\n};\n\nBlockly.Block.prototype.getChildByType = function (type) {\n  return this.getDescendants().find(function (child) {\n    return child.type === type;\n  });\n};\n\nBlockly.Block.prototype.getChildFieldValue = function (childType, childField) {\n  var childBlock = this.getChildByType(childType);\n\n  if (childBlock) {\n    var value = childBlock.getFieldValue(childField);\n    return value;\n  }\n\n  return null;\n};\n\nBlockly.Block.prototype.childValueToCode = function (childType, childField) {\n  var childBlock = this.getChildByType(childType);\n  return childBlock && Blockly.JavaScript.valueToCode(childBlock, childField, Blockly.JavaScript.ORDER_ATOMIC);\n};\n\nBlockly.Block.prototype.getBlocksInStatement = function (statementInputName) {\n  var blocksInStatement = [];\n  var firstBlock = this.getInputTargetBlock(statementInputName);\n\n  if (firstBlock) {\n    return firstBlock.getSiblings();\n  }\n\n  return blocksInStatement;\n};\n\nBlockly.Block.prototype.getLastConnectionInStatement = function (statementInputName) {\n  var firstBlockInStack = this.getInputTargetBlock(statementInputName);\n\n  if (firstBlockInStack) {\n    return firstBlockInStack.lastConnectionInStack();\n  }\n\n  var statementInput = this.getInput(statementInputName);\n  return statementInput.connection;\n};\n\nBlockly.Block.prototype.isDescendantOf = function (type) {\n  var parentBlock = this.getParent();\n\n  while (parentBlock !== null) {\n    if (parentBlock.type === type) {\n      return true;\n    }\n\n    parentBlock = parentBlock.getParent();\n  }\n\n  return false;\n};\n\nBlockly.Block.prototype.getTopParent = function () {\n  var parent = this.getParent();\n\n  while (parent !== null) {\n    var nextParent = parent.getParent();\n\n    if (!nextParent) {\n      return parent;\n    }\n\n    parent = nextParent;\n  }\n\n  return null;\n};\n\nBlockly.Block.getDimensions = function (block_node) {\n  // eslint-disable-next-line\n  var options = new Blockly.Options({\n    media: __webpack_public_path__ + \"media/\"\n  });\n  var fragment = document.createDocumentFragment();\n  var el_injection_div = document.createElement('div');\n  fragment.appendChild(el_injection_div); // Create a headless workspace to calculate xmlList block dimensions\n\n  var svg = Blockly.createDom_(el_injection_div, options);\n  var workspace = Blockly.createMainWorkspace_(svg, options, false, false);\n  var block = Blockly.Xml.domToBlock(block_node, workspace);\n  var block_hw = block.getHeightWidth();\n  workspace.dispose();\n  return block_hw;\n};","import { translate } from '../../utils/lang/i18n';\n/* eslint-disable func-names, no-underscore-dangle */\n// deriv-bot: Blockly value, Scratch resets this to 0, req for correct spacing in flyout.\n\nBlockly.BlockSvg.TAB_WIDTH = 8;\n/**\n * Set whether the block is disabled or not.\n * @param {boolean} disabled True if disabled.\n * deriv-bot: Call updateDisabled() when setDisabled is called.\n */\n\nBlockly.BlockSvg.prototype.setDisabled = function (disabled) {\n  if (this.disabled !== disabled) {\n    Blockly.BlockSvg.superClass_.setDisabled.call(this, disabled);\n\n    if (this.rendered) {\n      this.updateDisabled();\n    }\n  }\n};\n/**\n * Enable or disable a block.\n */\n\n\nBlockly.BlockSvg.prototype.updateDisabled = function () {\n  if (this.disabled || this.getInheritedDisabled()) {\n    var added = Blockly.utils.addClass(\n    /** @type {!Element} */\n    this.svgGroup_, 'blocklyDisabled');\n\n    if (added) {\n      this.svgPath_.setAttribute('fill', \"url(#\" + this.workspace.options.disabledPatternId + \")\");\n    }\n  } else {\n    var removed = Blockly.utils.removeClass(\n    /** @type {!Element} */\n    this.svgGroup_, 'blocklyDisabled');\n\n    if (removed) {\n      this.updateColour();\n    }\n  }\n\n  var children = this.getChildren(false);\n  children.forEach(function (child) {\n    child.updateDisabled();\n  });\n};\n/**\n * Show the context menu for this block.\n * @param {!Event} e Mouse event.\n * @private\n * deriv-bot: Restore contextMenu options from Blockly unavailable in Scratch\n */\n\n\nBlockly.BlockSvg.prototype.showContextMenu_ = function (e) {\n  if (this.workspace.options.readOnly || !this.contextMenu) {\n    return;\n  } // Save the current block in a variable for use in closures.\n\n\n  var block = this;\n  var menuOptions = [];\n\n  if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {\n    menuOptions.push(Blockly.ContextMenu.blockDuplicateOption(block, e));\n\n    if (this.isEditable() && this.workspace.options.comments) {\n      menuOptions.push(Blockly.ContextMenu.blockCommentOption(block));\n    }\n\n    menuOptions.push(Blockly.ContextMenu.blockDeleteOption(block));\n  } else if (this.parentBlock_ && this.isShadow_) {\n    this.parentBlock_.showContextMenu_(e);\n    return;\n  } // Option to collapse/expand block.\n\n\n  if (this.workspace.options.collapse) {\n    if (this.collapsed_) {\n      var expandOption = {\n        enabled: true\n      };\n      expandOption.text = translate('Expand Block');\n\n      expandOption.callback = function () {\n        block.setCollapsed(false);\n      };\n\n      menuOptions.push(expandOption);\n    } else {\n      var collapseOption = {\n        enabled: true\n      };\n      collapseOption.text = translate('Collapse Block');\n\n      collapseOption.callback = function () {\n        block.setCollapsed(true);\n      };\n\n      menuOptions.push(collapseOption);\n    }\n  } // Option to disable/enable block.\n\n\n  if (this.workspace.options.disable) {\n    var disableOption = {\n      text: this.disabled ? translate('Enable Block') : translate('Disable Block'),\n      enabled: !this.getInheritedDisabled(),\n      callback: function callback() {\n        var group = Blockly.Events.getGroup();\n\n        if (!group) {\n          Blockly.Events.setGroup(true);\n        }\n\n        block.setDisabled(!block.disabled);\n\n        if (!group) {\n          Blockly.Events.setGroup(false);\n        }\n      }\n    };\n    menuOptions.push(disableOption); // Allow the block to add or modify menuOptions.\n\n    if (this.customContextMenu) {\n      this.customContextMenu(menuOptions);\n    }\n\n    Blockly.ContextMenu.show(e, menuOptions, this.RTL);\n    Blockly.ContextMenu.currentBlock = this;\n  }\n};","Blockly.Colours.Binary = {\n  colour: '#dedede',\n  colourSecondary: '#e2e2e2',\n  colourTertiary: '#bababa'\n};\nBlockly.Colours.BinaryLessGray = {\n  colour: '#f3f3f3',\n  colourSecondary: '#e2e2e2',\n  colourTertiary: '#bababa'\n};\nBlockly.Colours.BinaryPurple = {\n  colour: '#dedede',\n  colourSecondary: '#e2e2e2',\n  colourTertiary: '#bababa'\n};\nBlockly.Colours.BinaryLessPurple = {\n  colour: '#dedede',\n  colourSecondary: '#e2e2e2',\n  colourTertiary: '#bababa'\n};\nBlockly.Colours.BinaryProcedures = {\n  colour: '#1876d2',\n  colourSecondary: '#0d47a1',\n  colourTertiary: '#0d47a1'\n};","import { translate } from '../../utils/lang/i18n';\n/**\n * ENUM for categories.\n * @const\n */\n\nBlockly.Categories = {\n  'Trade_Definition': translate('trade_parameters'),\n  'Before_Purchase': translate('purchase_conditions'),\n  'During_Purchase': translate('sell_conditions'),\n  'After_Purchase': translate('trade_results'),\n  'Mathematical': translate('math'),\n  'Logic': translate('logic'),\n  'Text': translate('text'),\n  'Variables': translate('variables'),\n  'Functions': translate('custom_functions'),\n  'List': translate('lists'),\n  'Indicators': translate('indicators'),\n  'Time': translate('time'),\n  'Tick_Analysis': translate('technical_analysis'),\n  'Candle': translate('candle'),\n  'Miscellaneous': translate('miscellaneous'),\n  'Loop': translate('loops')\n};\n/**\n * Number of pixels the mouse must move before a drag starts.\n */\n\nBlockly.DRAG_RADIUS = 3;\n/**\n * Number of pixels the mouse must move before a drag/scroll starts from the\n * flyout.  Because the drag-intention is determined when this is reached, it is\n * larger than Blockly.DRAG_RADIUS so that the drag-direction is clearer.\n */\n\nBlockly.FLYOUT_DRAG_RADIUS = 1;","import \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.search\";\nimport { translate } from '../../utils/lang/i18n';\n/* eslint-disable func-names, no-underscore-dangle */\n\n/**\n * Construct the blocks required by the flyout for the variable category.\n * @param {!Blockly.Workspace} workspace The workspace containing variables.\n * @return {!Array.<!Element>} Array of XML block elements.\n */\n\nBlockly.DataCategory = function (workspace) {\n  var variableModelList = workspace.getVariablesOfType('');\n  var xmlList = []; // `Create Variable`-button\n\n  Blockly.DataCategory.addCreateButton(xmlList, workspace);\n  var block_types = ['variables_set', 'variables_get', 'math_change'];\n  xmlList = xmlList.concat(Blockly.DataCategory.search(variableModelList, block_types));\n  return xmlList;\n};\n\nBlockly.DataCategory.search = function (variableModelList) {\n  var xmlList = [];\n\n  if (variableModelList.length > 0) {\n    var generateVariableFieldXmlString = function generateVariableFieldXmlString(variableModel) {\n      // The variable name may be user input, so it may contain characters that\n      // need to be escaped to create valid XML.\n      var escapedText = \"<field name=\\\"VAR\\\" id=\\\"\" + variableModel.getId() + \"\\\" variabletype=\\\"\" + goog.string.htmlEscape(variableModel.type) + \"\\\">\" + goog.string.htmlEscape(variableModel.name) + \"</field>\";\n      return escapedText;\n    };\n\n    var firstVariable = variableModelList[0]; // Create 'Set `var` to'-block\n\n    if (Blockly.Blocks.variables_set) {\n      var gap = Blockly.Blocks.math_change ? 8 : 24;\n      var setBlockText = \"<xml><block type=\\\"variables_set\\\" gap=\\\"\" + gap + \"\\\">\" + generateVariableFieldXmlString(firstVariable) + \"</block></xml>\";\n      var setBlock = Blockly.Xml.textToDom(setBlockText).firstChild;\n      xmlList.push(setBlock);\n    } // Create 'Change `var` by `1`'-block\n\n\n    if (Blockly.Blocks.math_change) {\n      var _gap = Blockly.Blocks.variables_get ? 20 : 8;\n\n      var changeBlockText = \"<xml><block type=\\\"math_change\\\" gap=\\\"\" + _gap + \"\\\">\" + generateVariableFieldXmlString(firstVariable) + \"<value name=\\\"DELTA\\\"><shadow type=\\\"math_number\\\"><field name=\\\"NUM\\\">1</field></shadow></value></block></xml>\";\n      var changeBlock = Blockly.Xml.textToDom(changeBlockText).firstChild;\n      xmlList.push(changeBlock);\n    } // Create `variable_get` block for each variable\n\n\n    if (Blockly.Blocks.variables_get) {\n      variableModelList.sort(Blockly.VariableModel.compareByName);\n      variableModelList.forEach(function (variable) {\n        var getBlockText = \"<xml><block type=\\\"variables_get\\\">\" + generateVariableFieldXmlString(variable) + \"</block></xml>\";\n        var getBlock = Blockly.Xml.textToDom(getBlockText).firstChild;\n        xmlList.push(getBlock);\n      });\n    }\n  }\n\n  return xmlList;\n};\n/**\n * Construct a create variable button and push it to the xmlList.\n * @param {!Array.<!Element>} xmlList Array of XML block elements.\n * @param {Blockly.Workspace} workspace Workspace to register callback to.\n * deriv-bot: We only use a single type of variable, so `type` arg was removed.\n */\n\n\nBlockly.DataCategory.addCreateButton = function (xmlList, workspace) {\n  var buttonXml = goog.dom.createDom('button'); // Set default msg, callbackKey, and callback values for type 'VARIABLE'\n\n  var msg = translate('Create variable');\n  var callbackKey = 'CREATE_VARIABLE';\n\n  var callback = function callback(button) {\n    var buttonWorkspace = button.getTargetWorkspace();\n    Blockly.Variables.createVariable(buttonWorkspace, null, '');\n    buttonWorkspace.toolbox_.showCategory_('Variables');\n  };\n\n  buttonXml.setAttribute('text', msg);\n  buttonXml.setAttribute('callbackKey', callbackKey);\n  workspace.registerButtonCallback(callbackKey, callback);\n  xmlList.push(buttonXml);\n};","import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find-index\";\n\n/* eslint-disable func-names, no-underscore-dangle */\nBlockly.FieldDropdown.prototype.updateOptions = function (options, optDefault, triggerEvent) {\n  if (optDefault === void 0) {\n    optDefault = null;\n  }\n\n  if (triggerEvent === void 0) {\n    triggerEvent = true;\n  }\n\n  var previousValue = this.getValue();\n  Blockly.Events.disable();\n  this.menuGenerator_ = options;\n\n  if (optDefault && this.menuGenerator_.findIndex(function (item) {\n    return item[1] === optDefault;\n  }) !== -1) {\n    this.setValue('');\n    this.setValue(optDefault);\n  } else if (this.menuGenerator_.length > 0) {\n    this.setValue('');\n    this.setValue(this.menuGenerator_[0][1]);\n  }\n\n  Blockly.Events.enable();\n\n  if (triggerEvent) {\n    var event = new Blockly.Events.BlockChange(this.sourceBlock_, 'field', this.name, previousValue, this.getValue());\n    Blockly.Events.fire(event);\n  }\n};","import \"core-js/modules/es6.number.constructor\";\n\n/* eslint-disable func-names, no-underscore-dangle */\n\n/**\n * Class for an image on a block.\n * deriv-bot: Blockly implementation vs. Scratch for click handlers\n * @param {string} src The URL of the image.\n * @param {number} width Width of the image.\n * @param {number} height Height of the image.\n * @param {string=} optAlt Optional alt text for when block is collapsed.\n * @param {Function=} optOnClick Optional function to be called when the image\n *     is clicked.  If optOnClick is defined, optAlt must also be defined.\n * @param {boolean=} optFlipRtl Whether to flip the icon in RTL.\n * @extends {Blockly.Field}\n * @constructor\n */\nBlockly.FieldImage = function (src, width, height, optAlt, optOnClick, optFlipRtl) {\n  this.sourceBlock_ = null; // Ensure height and width are numbers.  Strings are bad at math.\n\n  this.height_ = Number(height);\n  this.width_ = Number(width);\n  this.size_ = new goog.math.Size(this.width_, this.height_);\n  this.flipRtl_ = optFlipRtl;\n  this.tooltip_ = '';\n  this.setValue(src);\n  this.setText(optAlt);\n\n  if (typeof optOnClick === 'function') {\n    this.clickHandler_ = optOnClick;\n  }\n};\n\ngoog.inherits(Blockly.FieldImage, Blockly.Field);\n/**\n * Construct a FieldImage from a JSON arg object,\n * dereferencing any string table references.\n * @param {!Object} options A JSON object with options (src, width, height,\n *    alt, and flipRtl).\n * @return {!Blockly.FieldImage} The new field instance.\n * @package\n * @nocollapse\n */\n\nBlockly.FieldImage.fromJson = function (options) {\n  var src = Blockly.utils.replaceMessageReferences(options.src);\n  var width = Number(Blockly.utils.replaceMessageReferences(options.width));\n  var height = Number(Blockly.utils.replaceMessageReferences(options.height));\n  var alt = Blockly.utils.replaceMessageReferences(options.alt);\n  var flipRtl = !!options.flipRtl;\n  return new Blockly.FieldImage(src, width, height, alt, null, flipRtl);\n};\n/**\n * Editable fields are saved by the XML renderer, non-editable fields are not.\n */\n\n\nBlockly.FieldImage.prototype.EDITABLE = false;\n/**\n * Install this image on a block.\n */\n\nBlockly.FieldImage.prototype.init = function () {\n  if (this.fieldGroup_) {\n    // Image has already been initialized once.\n    return;\n  } // Build the DOM.\n\n  /** @type {SVGElement} */\n\n\n  this.fieldGroup_ = Blockly.utils.createSvgElement('g', {}, null);\n\n  if (!this.visible_) {\n    this.fieldGroup_.style.display = 'none';\n  }\n  /** @type {SVGElement} */\n\n\n  this.imageElement_ = Blockly.utils.createSvgElement('image', {\n    height: this.height_ + \"px\",\n    width: this.width_ + \"px\"\n  }, this.fieldGroup_);\n  this.setValue(this.src_);\n  this.setText(this.text_);\n  this.sourceBlock_.getSvgRoot().appendChild(this.fieldGroup_);\n\n  if (this.tooltip_) {\n    this.imageElement_.tooltip = this.tooltip_;\n  } else {\n    // Configure the field to be transparent with respect to tooltips.\n    this.setTooltip(this.sourceBlock_);\n  }\n\n  Blockly.Tooltip.bindMouseEvents(this.imageElement_);\n  this.maybeAddClickHandler_();\n};\n/**\n * Dispose of all DOM objects belonging to this text.\n */\n\n\nBlockly.FieldImage.prototype.dispose = function () {\n  goog.dom.removeNode(this.fieldGroup_);\n  this.fieldGroup_ = null;\n  this.imageElement_ = null;\n};\n/**\n * Bind events for a mouse down on the image, but only if a click handler has\n * been defined.\n * @private\n */\n\n\nBlockly.FieldImage.prototype.maybeAddClickHandler_ = function () {\n  if (this.clickHandler_) {\n    this.mouseDownWrapper_ = Blockly.bindEventWithChecks_(this.fieldGroup_, 'mousedown', this, this.clickHandler_); // pxtblockly & deriv-bot: if a click handler is attached to the image, change the cursor to a pointer\n\n    if (this.imageElement_) this.imageElement_.style.cursor = 'pointer';\n  }\n};\n/**\n * Change the tooltip text for this field.\n * @param {string|!Element} newTip Text for tooltip or a parent element to\n *     link to for its tooltip.\n */\n\n\nBlockly.FieldImage.prototype.setTooltip = function (newTip) {\n  this.tooltip_ = newTip;\n\n  if (this.imageElement_) {\n    this.imageElement_.tooltip = newTip;\n  }\n};\n/**\n * Get the source URL of this image.\n * @return {string} Current text.\n * @override\n */\n\n\nBlockly.FieldImage.prototype.getValue = function () {\n  return this.src_;\n};\n/**\n * Set the source URL of this image.\n * @param {?string} src New source.\n * @override\n */\n\n\nBlockly.FieldImage.prototype.setValue = function (src) {\n  if (src === null) {\n    // No change if null.\n    return;\n  }\n\n  this.src_ = src;\n\n  if (this.imageElement_) {\n    this.imageElement_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', src || '');\n  }\n};\n/**\n * Get whether to flip this image in RTL\n * @return {boolean} True if we should flip in RTL.\n */\n\n\nBlockly.FieldImage.prototype.getFlipRtl = function () {\n  return this.flipRtl_;\n};\n/**\n * Set the alt text of this image.\n * @param {?string} alt New alt text.\n * @override\n */\n\n\nBlockly.FieldImage.prototype.setText = function (alt) {\n  if (alt === null) {\n    // No change if null.\n    return;\n  }\n\n  this.text_ = alt;\n\n  if (this.imageElement_) {\n    this.imageElement_.setAttribute('alt', alt || '');\n  }\n};\n/**\n * Images are fixed width, no need to render.\n * @private\n */\n\n\nBlockly.FieldImage.prototype.render_ = function () {// NOP\n};\n/**\n * Images are fixed width, no need to render even if forced.\n */\n\n\nBlockly.FieldImage.prototype.forceRerender = function () {// NOP\n};\n/**\n * Images are fixed width, no need to update.\n * @private\n */\n\n\nBlockly.FieldImage.prototype.updateWidth = function () {// NOP\n};\n/**\n * If field click is called, and click handler defined,\n * call the handler.\n */\n\n\nBlockly.FieldImage.prototype.showEditor_ = function () {\n  if (this.clickHandler_) {\n    this.clickHandler_(this);\n  }\n};\n\nBlockly.Field.register('field_image', Blockly.FieldImage);","/* eslint-disable no-underscore-dangle */\n\n/**\n * Create a copy of this block on the workspace.\n * @param {!Blockly.BlockSvg} originalBlock The block to copy from the flyout.\n * @return {Blockly.BlockSvg} The newly created block, or null if something\n *     went wrong with deserialization.\n * @package\n */\nBlockly.Flyout.prototype.createBlock = function (event, originalBlock) {\n  Blockly.Events.disable();\n  var variablesBeforeCreation = this.targetWorkspace_.getAllVariables();\n  this.targetWorkspace_.setResizesEnabled(false);\n  var newBlock = null;\n\n  try {\n    newBlock = this.placeNewBlock_(event, originalBlock); // Close the flyout.\n\n    Blockly.hideChaff();\n  } finally {\n    Blockly.Events.enable();\n  }\n\n  var newVariables = Blockly.Variables.getAddedVariables(this.targetWorkspace_, variablesBeforeCreation);\n\n  if (Blockly.Events.isEnabled()) {\n    Blockly.Events.setGroup(true);\n    Blockly.Events.fire(new Blockly.Events.Create(newBlock)); // Fire a VarCreate event for each (if any) new variable created.\n\n    for (var i = 0; i < newVariables.length; i++) {\n      var thisVariable = newVariables[i];\n      Blockly.Events.fire(new Blockly.Events.VarCreate(thisVariable));\n    }\n  }\n\n  if (this.autoClose) {\n    this.hide();\n  }\n\n  Blockly.derivWorkspace.toolbox_.clearSelection();\n  newBlock.isInFlyout = false;\n  return newBlock;\n};\n/**\n * Copy a block from the flyout to the workspace and position it correctly.\n * @param {!Blockly.Block} oldBlock The flyout block to copy.\n * @return {!Blockly.Block} The new block in the main workspace.\n * @private\n */\n\n\nBlockly.Flyout.prototype.placeNewBlock_ = function (event, oldBlock) {\n  var targetWorkspace = this.targetWorkspace_;\n  var svgRootOld = oldBlock.getSvgRoot();\n\n  if (!svgRootOld) {\n    throw new Error('oldBlock is not rendered.');\n  } // Create the new block by cloning the block in the flyout (via XML).\n\n\n  var xml = Blockly.Xml.blockToDom(oldBlock); // The target workspace would normally resize during domToBlock, which will\n  // lead to weird jumps.  Save it for terminateDrag.\n\n  targetWorkspace.setResizesEnabled(false); // Using domToBlock instead of domToWorkspace means that the new block will be\n  // placed at position (0, 0) in main workspace units.\n\n  var block = Blockly.Xml.domToBlock(xml, targetWorkspace);\n  var svgRootNew = block.getSvgRoot();\n\n  if (!svgRootNew) {\n    throw new Error('block is not rendered.');\n  } // The offset in pixels between the main workspace's origin and the upper left\n  // corner of the injection div.\n\n\n  var mainOffsetPixels = targetWorkspace.getOriginOffsetInPixels(); // The offset in pixels between the flyout workspace's origin and the upper\n  // left corner of the injection div.\n\n  var flyoutOffsetPixels = this.workspace_.getOriginOffsetInPixels(); // The position of the old block in pixels relative to the flyout\n  // workspace's origin.\n\n  var oldBlockPosPixels = new goog.math.Coordinate(event.clientX - 50, event.clientY - 20); // The position of the old block in pixels relative to the upper left corner\n  // of the injection div.\n\n  var oldBlockOffsetPixels = goog.math.Coordinate.sum(flyoutOffsetPixels, oldBlockPosPixels); // The position of the old block in pixels relative to the origin of the\n  // main workspace.\n\n  var finalOffsetPixels = goog.math.Coordinate.difference(oldBlockOffsetPixels, mainOffsetPixels); // The position of the old block in main workspace coordinates.\n\n  var finalOffsetMainWs = finalOffsetPixels.scale(1 / targetWorkspace.scale);\n  block.moveBy(finalOffsetMainWs.x, finalOffsetMainWs.y);\n  return block;\n};","/* eslint-disable no-underscore-dangle */\n\n/**\n * Update this gesture to record whether a block is being dragged from the\n * flyout. This function should be called on a mouse/touch move event the first time the\n * drag radius is exceeded.  It should be called no more than once per gesture.\n * If a block should be dragged from the flyout this function creates the new\n * block on the main workspace and updates targetBlock_ and startWorkspace_.\n * @return {boolean} True if a block is being dragged from the flyout.\n * @private\n */\nBlockly.Gesture.prototype.updateIsDraggingFromFlyout_ = function () {\n  // Disabled blocks may not be dragged from the flyout.\n  if (this.targetBlock_.disabled) {\n    return false;\n  }\n\n  if (!this.flyout_.isScrollable() || this.flyout_.isDragTowardWorkspace(this.currentDragDeltaXY_)) {\n    this.startWorkspace_ = this.flyout_.targetWorkspace_;\n    this.startWorkspace_.updateScreenCalculationsIfScrolled(); // Start the event group now, so that the same event group is used for block\n    // creation and block dragging.\n\n    if (!Blockly.Events.getGroup()) {\n      Blockly.Events.setGroup(true);\n    } // The start block is no longer relevant, because this is a drag.\n\n\n    this.startBlock_ = null;\n    this.targetBlock_ = this.flyout_.createBlock(this.mostRecentEvent_, this.targetBlock_);\n    this.targetBlock_.select();\n    return true;\n  }\n\n  return false;\n};","/* eslint-disable func-names, no-underscore-dangle */\n\n/**\n * Render the icon.\n * @param {number} cursorX Horizontal offset at which to position the icon.\n * @return {number} Horizontal offset for next item to draw.\n */\nBlockly.Icon.prototype.renderIcon = function (cursorX) {\n  if (this.collapseHidden && this.block_.isCollapsed()) {\n    this.iconGroup_.setAttribute('display', 'none');\n    return cursorX;\n  }\n\n  this.iconGroup_.setAttribute('display', 'block');\n  var newCursorX = cursorX;\n  var TOP_MARGIN = 9;\n  var width = this.SIZE;\n\n  if (this.block_.RTL) {\n    newCursorX -= width;\n  }\n\n  this.iconGroup_.setAttribute('transform', \"translate(\" + newCursorX + \",\" + TOP_MARGIN + \")\");\n  this.computeIconLocation();\n\n  if (this.block_.RTL) {\n    newCursorX -= Blockly.BlockSvg.SEP_SPACE_X;\n  } else {\n    newCursorX += width + Blockly.BlockSvg.SEP_SPACE_X;\n  }\n\n  return newCursorX;\n};","/* eslint-disable func-names, no-underscore-dangle */\nimport { translate } from '../../utils/lang/i18n';\n/**\n * Construct the blocks required by the flyout for the procedure category.\n * @param {!Blockly.Workspace} workspace The workspace containing procedures.\n * @return {!Array.<!Element>} Array of XML block elements.\n */\n\nBlockly.Procedures.flyoutCategory = function (workspace) {\n  var xmlList = [];\n\n  if (Blockly.Blocks.procedures_defnoreturn) {\n    // <block type=\"procedures_defnoreturn\" gap=\"16\">\n    //     <field name=\"NAME\">do something</field>\n    // </block>\n    var block = document.createElement('block');\n    block.setAttribute('type', 'procedures_defnoreturn');\n    block.setAttribute('gap', 16); // TEMP\n\n    var nameField = document.createElement('field');\n    nameField.setAttribute('name', 'NAME');\n    nameField.appendChild(document.createTextNode(translate('do something')));\n    block.appendChild(nameField);\n    xmlList.push(block);\n  }\n\n  if (Blockly.Blocks.procedures_defreturn) {\n    // <block type=\"procedures_defreturn\" gap=\"16\">\n    //     <field name=\"NAME\">do something</field>\n    // </block>\n    var _block = document.createElement('block');\n\n    _block.setAttribute('type', 'procedures_defreturn');\n\n    _block.setAttribute('gap', 16);\n\n    var _nameField = document.createElement('field');\n\n    _nameField.setAttribute('name', 'NAME');\n\n    _nameField.appendChild(document.createTextNode(translate('do something')));\n\n    _block.appendChild(_nameField);\n\n    xmlList.push(_block);\n  }\n\n  if (Blockly.Blocks.procedures_ifreturn) {\n    // <block type=\"procedures_ifreturn\" gap=\"16\"></block>\n    var _block2 = document.createElement('block');\n\n    _block2.setAttribute('type', 'procedures_ifreturn');\n\n    _block2.setAttribute('gap', 16);\n\n    xmlList.push(_block2);\n  }\n\n  if (xmlList.length) {\n    // Add slightly larger gap between system blocks and user calls.\n    xmlList[xmlList.length - 1].setAttribute('gap', 24);\n  }\n\n  var tuple = Blockly.Procedures.allProcedures(workspace);\n  xmlList = xmlList.concat(Blockly.Procedures.populateDynamicProcedures(tuple));\n  return xmlList;\n};\n\nBlockly.Procedures.populateDynamicProcedures = function (tuple) {\n  var xmlList = [];\n\n  var populateProcedures = function populateProcedures(procedureList, templateName) {\n    var xml = [];\n\n    if (!procedureList) {\n      return xml;\n    }\n\n    var _loop = function _loop(i) {\n      var name = procedureList[i][0];\n      var args = procedureList[i][1]; // <block type=\"procedures_callnoreturn\" gap=\"16\">\n      //   <mutation name=\"do something\">\n      //     <arg name=\"x\"></arg>\n      //   </mutation>\n      // </block>\n\n      var block = document.createElement('block');\n      block.setAttribute('type', templateName);\n      block.setAttribute('gap', 16);\n      var mutation = document.createElement('mutation');\n      mutation.setAttribute('name', name);\n      block.appendChild(mutation);\n      args.forEach(function (argumentName) {\n        var arg = document.createElement('arg');\n        arg.setAttribute('name', argumentName);\n        mutation.appendChild(arg);\n      });\n      xml.push(block);\n    };\n\n    for (var i = 0; i < procedureList.length; i++) {\n      _loop(i);\n    }\n\n    return xml;\n  };\n\n  xmlList = xmlList.concat(populateProcedures(tuple[0], 'procedures_callnoreturn'));\n  xmlList = xmlList.concat(populateProcedures(tuple[1], 'procedures_callreturn'));\n  return xmlList;\n};\n/**\n * Find the definition block for the named procedure.\n * @param {string} name Name of procedure.\n * @param {!Blockly.Workspace} workspace The workspace to search.\n * @return {Blockly.Block} The procedure definition block, or null not found.\n */\n\n\nBlockly.Procedures.getDefinition = function (name, workspace) {\n  // Assume that a procedure definition is a top block.\n  var blocks = workspace.getTopBlocks(false);\n\n  for (var i = 0; i < blocks.length; i++) {\n    if (blocks[i].getProcedureDef) {\n      var tuple = blocks[i].getProcedureDef();\n\n      if (tuple && Blockly.Names.equals(tuple[0], name)) {\n        return blocks[i];\n      }\n    }\n  }\n\n  return null;\n}; // Scratch has a broken version where they return `false` if Blockly.Names.equals(procName[0], name).\n// https://github.com/LLK/scratch-blocks/pull/1930\n\n\nBlockly.Procedures.isNameUsed = function (name, workspace, optExclude) {\n  var blocks = workspace.getAllBlocks(false); // Iterate through every block and check the name.\n\n  return blocks.some(function (block) {\n    if (block !== optExclude && block.getProcedureDef) {\n      var procName = block.getProcedureDef();\n      return Blockly.Names.equals(procName[0], name);\n    }\n\n    return false;\n  });\n};\n/**\n * Move the workspace based on the most recent mouse movements.\n * @param {!goog.math.Coordinate} currentDragDeltaXY How far the pointer has\n *     moved from the position at the start of the drag, in pixel coordinates.\n * @package\n */\n\n\nBlockly.WorkspaceDragger.prototype.drag = function (currentDragDeltaXY) {\n  if (this.workspace_.isFlyout) {\n    return;\n  }\n\n  var metrics = this.startDragMetrics_;\n  var newXY = goog.math.Coordinate.sum(this.startScrollXY_, currentDragDeltaXY); // Bound the new XY based on workspace bounds.\n\n  var x = Math.min(newXY.x, -metrics.contentLeft);\n  var y = Math.min(newXY.y, -metrics.contentTop);\n  x = Math.max(x, metrics.viewWidth - metrics.contentLeft - metrics.contentWidth);\n  y = Math.max(y, metrics.viewHeight - metrics.contentTop - metrics.contentHeight);\n  x = -x - metrics.contentLeft;\n  y = -y - metrics.contentTop;\n  this.updateScroll_(x, y);\n};","import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.split\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ArrowIcon } from '../../components/Icons.jsx';\nimport { flyout } from '../../stores';\nimport { translate } from '../../utils/lang/i18n';\n/* eslint-disable func-names, no-underscore-dangle */\n\n/**\n * Initializes the toolbox.\n */\n\nBlockly.Toolbox.prototype.init = function () {\n  var workspace = this.workspace_;\n  var svg = this.workspace_.getParentSvg();\n  /**\n   * HTML container for the Toolbox menu.\n   * @type {Element}\n   */\n\n  this.HtmlDiv = goog.dom.createDom(goog.dom.TagName.DIV, 'toolbox');\n  this.HtmlDiv.setAttribute('dir', workspace.RTL ? 'RTL' : 'LTR'); // deriv-bot: Create Toolbox header\n\n  var el_toolbox_header = goog.dom.createDom(goog.dom.TagName.DIV, 'toolbox__header');\n  var el_toolbox_title = goog.dom.createDom(goog.dom.TagName.DIV, 'toolbox__title');\n  el_toolbox_title.textContent = translate('Blocks Library');\n  el_toolbox_header.appendChild(el_toolbox_title);\n  this.HtmlDiv.appendChild(el_toolbox_header);\n  var el_toolbox_search = goog.dom.createDom(goog.dom.TagName.INPUT, {\n    'id': 'search_input',\n    'placeholder': 'Search'\n  });\n  this.HtmlDiv.appendChild(el_toolbox_search);\n  ['keyup', 'click'].forEach(function (e) {\n    el_toolbox_search.addEventListener(e, function () {\n      var toolbox = workspace.toolbox_;\n      flyout.setVisibility(false);\n      toolbox.setSelectedItem('search');\n    });\n  });\n  svg.parentNode.insertBefore(this.HtmlDiv, svg); // Clicking on toolbox closes popups.\n\n  Blockly.bindEventWithChecks_(this.HtmlDiv, 'mousedown', this, function (e) {\n    // Cancel any gestures in progress.\n    this.workspace_.cancelCurrentGesture();\n\n    if (Blockly.utils.isRightButton(e) || e.target === this.HtmlDiv) {\n      // Close flyout.\n      Blockly.hideChaff(false);\n    } else {\n      // Just close popups.\n      Blockly.hideChaff(true);\n    }\n\n    Blockly.Touch.clearTouchIdentifier(); // Don't block future drags.\n  },\n  /* opt_noCaptureIdentifier */\n  false,\n  /* opt_noPreventDefault */\n  true);\n  this.createFlyout_();\n  this.categoryMenu_ = new Blockly.Toolbox.CategoryMenu(this, this.HtmlDiv);\n  this.populate_(workspace.options.languageTree);\n  this.position();\n};\n/**\n * Fill the toolbox with categories and blocks.\n * @param {!Node} newTree DOM tree of blocks.\n * @private\n * deriv-bot: We don't want to `showAll` or `setSelectedItem` here (like in Scratch)\n */\n\n\nBlockly.Toolbox.prototype.populate_ = function (newTree) {\n  this.categoryMenu_.populate(newTree);\n};\n/**\n * deriv-bot: Show blocks for a specific category in flyout\n * @private\n */\n\n\nBlockly.Toolbox.prototype.showCategory_ = function (category_id) {\n  var _this = this;\n\n  var flyout_content;\n\n  if (category_id === 'search') {\n    var search_term = document.getElementById('search_input').value;\n    var all_variables = this.flyout_.workspace_.getVariablesOfType('');\n    var all_procedures = Blockly.Procedures.allProcedures(Blockly.derivWorkspace);\n\n    if (search_term.length <= 1) {\n      flyout.setVisibility(false);\n      return;\n    }\n\n    flyout_content = {\n      type: 'search',\n      blocks: []\n    };\n\n    if (typeof search_term === 'string') {\n      search_term = search_term.trim().toLowerCase();\n      search_term = search_term.split(' ');\n    }\n\n    var blocks = Blockly.Blocks;\n    Object.keys(blocks).forEach(function (blockKey) {\n      var keywords = \" \" + blockKey;\n      var block = blocks[blockKey];\n      var block_meta = block.meta instanceof Function && block.meta();\n      var block_definition = block.definition instanceof Function && block.definition();\n\n      if (!block_meta) {\n        return;\n      }\n\n      Object.keys(block_meta).forEach(function (key) {\n        var meta = block_meta[key];\n        keywords += \" \" + meta;\n      });\n      Object.keys(block_definition).forEach(function (key) {\n        var definition = block_definition[key];\n\n        if (typeof definition === 'string') {\n          keywords += \" \" + definition;\n        } else if (definition instanceof Array) {\n          definition.forEach(function (def) {\n            if (def instanceof Object) {\n              keywords += !def.type.includes('image') ? \" \" + JSON.stringify(def) : '';\n            } else {\n              keywords += \" \" + def;\n            }\n          });\n        }\n      });\n      var block_category = block_definition && block_definition.category || block_meta && block_meta.category;\n\n      var category = _this.categoryMenu_.categories_.find(function (menuCategory) {\n        return menuCategory.id_ === block_category;\n      });\n\n      var contents = category && category.getContents();\n\n      if (typeof contents === 'string') {\n        var fnToApply = _this.workspace_.getToolboxCategoryCallback(contents);\n\n        contents = fnToApply(_this.workspace_);\n      }\n\n      if (contents) {\n        search_term.forEach(function (term) {\n          if (keywords.toLowerCase().includes(term)) {\n            var blockContents = contents.filter(function (content) {\n              return content.attributes[0].nodeValue === blockKey;\n            });\n\n            if (blockContents.length && flyout_content.blocks.indexOf(blockContents[0]) === -1) {\n              flyout_content.blocks.push(blockContents[0]);\n            }\n          }\n        });\n      }\n    });\n    var searched_variables = [];\n    all_variables.forEach(function (variable) {\n      search_term.forEach(function (term) {\n        if (variable.name.toLowerCase().includes(term)) {\n          searched_variables.push(variable);\n        }\n      });\n    });\n    var variables_blocks = Blockly.DataCategory.search(searched_variables);\n    /* eslint-disable-next-line consistent-return */\n\n    var uniqueVarBlocks = variables_blocks.map(function (variableBlock) {\n      if (flyout_content.blocks.indexOf(variableBlock) === -1) {\n        return variableBlock;\n      }\n    });\n    flyout_content.blocks = flyout_content.blocks.concat(uniqueVarBlocks);\n    var searched_procedures = {};\n    Object.keys(all_procedures).forEach(function (key) {\n      search_term.forEach(function (term) {\n        if (all_procedures[key].length && all_procedures[key][0][0].toLowerCase().includes(term)) {\n          searched_procedures[key] = all_procedures[key];\n        }\n      });\n    });\n    var procedures_blocks = Blockly.Procedures.populateDynamicProcedures(searched_procedures);\n    /* eslint-disable-next-line consistent-return */\n\n    var uniqueProceBlocks = procedures_blocks.map(function (procedureBlock) {\n      if (flyout_content.blocks.indexOf(procedureBlock) === -1) {\n        return procedureBlock;\n      }\n    });\n    flyout_content.blocks = flyout_content.blocks.concat(uniqueProceBlocks);\n  } else {\n    var selected_category = this.categoryMenu_.categories_.find(function (category) {\n      return category.id_ === category_id;\n    });\n    flyout_content = selected_category.getContents(); // Dynamic categories\n\n    if (typeof flyout_content === 'string') {\n      var fnToApply = this.workspace_.getToolboxCategoryCallback(flyout_content);\n      flyout_content = fnToApply(this.workspace_);\n    }\n  }\n\n  flyout.setContents(flyout_content);\n};\n/**\n * Used to determine the css classes for the menu item for this category\n * based on its current state.\n * @private\n * @param {boolean=} selected Indication whether the category is currently selected.\n * @return {string} The css class names to be applied, space-separated.\n * deriv-bot: Custom class names\n */\n\n\nBlockly.Toolbox.Category.prototype.getMenuItemClassName_ = function (selected) {\n  var classNames = ['toolbox__item', \"toolbox__category--\" + this.id_];\n\n  if (selected) {\n    classNames.push('toolbox__category--selected');\n  }\n\n  return classNames.join(' ');\n};\n/**\n * Opens the selected category\n * deriv-bot: Category-specific flyouts + removed opt_shouldScroll\n * @param {Blockly.Toolbox.Category} item The category to select.\n */\n\n\nBlockly.Toolbox.prototype.setSelectedItem = function (item) {\n  var _this2 = this;\n\n  var category_item = item;\n\n  if (category_item === 'search') {\n    if (this.selectedItem_) {\n      this.selectedItem_.setSelected(false);\n    }\n\n    this.selectedItem_ = null;\n    this.showCategory_('search');\n    return;\n  }\n\n  if (this.selectedItem_) {\n    // They selected a different category but one was already open.  Close it.\n    this.selectedItem_.setSelected(false); // Selecting the same category will close it.\n\n    if (category_item && !category_item.is_category_return_ && !category_item.has_child_category_ && this.selectedItem_.id_ === item.id_) {\n      this.selectedItem_ = null;\n\n      if (flyout.is_visible) {\n        flyout.setVisibility(false);\n      }\n\n      return;\n    }\n  }\n\n  this.selectedItem_ = item;\n\n  if (!item) {\n    flyout.setVisibility(false);\n  } else {\n    var getCategoryTree = function getCategoryTree(parent_name, parent_id, colour, children) {\n      var xml_document = document.implementation.createDocument(null, null, null);\n      var el_xml = xml_document.createElement('xml');\n      var parent_category = xml_document.createElement('category');\n      parent_category.setAttribute('name', parent_name);\n      parent_category.setAttribute('id', parent_id);\n      parent_category.setAttribute('is_category_return', true);\n      parent_category.setAttribute('colour', colour);\n      var el_separator = xml_document.createElement('sep');\n      var category_nodes = [parent_category, el_separator].concat(Array.from(children));\n      category_nodes.forEach(function (childNode) {\n        return el_xml.appendChild(childNode);\n      });\n      xml_document.appendChild(el_xml);\n      return el_xml;\n    };\n\n    if (this.selectedItem_.is_category_return_) {\n      // Go up a level if this is a return category\n      var findCategory = function findCategory(category_collection) {\n        // Finds a category based on `this.selectedItem_.id_` in the given `category_collection`\n        for (var i = 0; i < category_collection.length; i++) {\n          var el_category = category_collection[i];\n\n          var is_correct_child = el_category.tagName.toUpperCase() === 'CATEGORY' && el_category.getAttribute('id') === _this2.selectedItem_.id_;\n\n          if (is_correct_child) {\n            return el_category;\n          }\n\n          var category = findCategory(el_category.children);\n\n          if (category) {\n            return category;\n          }\n        }\n\n        return null;\n      };\n\n      var initial_toolbox_xml = this.workspace_.initial_toolbox_xml;\n      var toolboxDom = Blockly.Xml.textToDom(initial_toolbox_xml);\n      var selected_category = findCategory(toolboxDom.children);\n\n      if (selected_category) {\n        var el_parent = selected_category.parentElement;\n\n        if (el_parent.tagName === 'xml') {\n          flyout.setVisibility(false);\n          this.workspace_.updateToolbox(initial_toolbox_xml);\n        } else {\n          var newTree = getCategoryTree(el_parent.getAttribute('name'), el_parent.getAttribute('id'), el_parent.getAttribute('colour'), el_parent.children);\n          flyout.setVisibility(false);\n          this.workspace_.updateToolbox(newTree);\n        }\n      }\n    } else if (this.selectedItem_.has_child_category_) {\n      // Show categories in toolbox that are descendants of `this.selectedItem_`\n      var _newTree = getCategoryTree(this.selectedItem_.name_, this.selectedItem_.id_, this.selectedItem_.colour_, this.selectedItem_.contents_);\n\n      flyout.setVisibility(false);\n      this.workspace_.updateToolbox(_newTree);\n    } else {\n      // Show blocks that belong to this category.\n      this.selectedItem_.setSelected(true);\n      this.showCategory_(this.selectedItem_.id_);\n    }\n  }\n};\n/**\n * Update the flyout's contents without closing it.  Should be used in response\n * to a change in one of the dynamic categories, such as variables or\n * procedures.\n * deriv-bot: Calls showAll() in Scratch, we don't want that.\n */\n\n\nBlockly.Toolbox.prototype.refreshSelection = function () {};\n/**\n * Create the DOM for a category in the toolbox.\n * deriv-bot: Custom class names + injection of description\n */\n\n\nBlockly.Toolbox.Category.prototype.createDom = function () {\n  var toolbox = this.parent_.parent_;\n  var el_item = goog.dom.createDom('div', this.getMenuItemClassName_());\n  this.item_ = el_item;\n\n  if (this.is_category_return_) {\n    var el_return_arrow = goog.dom.createDom('div', 'toolbox__category-arrow toolbox__category-arrow--back');\n    ReactDOM.render(React.createElement(ArrowIcon, {\n      className: \"arrow\"\n    }), el_return_arrow);\n    el_item.appendChild(el_return_arrow);\n  } else {\n    var el_colour = goog.dom.createDom('div', 'toolbox__category-colour');\n    el_item.appendChild(el_colour);\n  }\n\n  var el_label = goog.dom.createDom('div', 'toolbox__label', this.name_);\n  var el_toolbox_text = goog.dom.createDom('div', 'toolbox__category-text');\n  this.label_ = el_label;\n  el_toolbox_text.appendChild(el_label);\n\n  if (this.description_) {\n    var el_description = goog.dom.createDom('div', 'toolbox__description', this.description_);\n    el_toolbox_text.appendChild(el_description);\n  }\n\n  el_item.appendChild(el_toolbox_text);\n\n  if (this.has_child_category_) {\n    var el_category_arrow = goog.dom.createDom('div', 'toolbox__category-arrow toolbox__category-arrow--open');\n    ReactDOM.render(React.createElement(ArrowIcon, {\n      className: \"arrow\"\n    }), el_category_arrow);\n    el_item.appendChild(el_category_arrow);\n  } else if (this.iconURI_) {\n    // If category has iconURI attribute, it refers to an entry in our bot-sprite.svg\n    var el_icon = goog.dom.createDom('div', {\n      class: 'toolbox__icon'\n    }); // eslint-disable-next-line\n\n    el_icon.innerHTML = \"<svg><use xlink:href=\\\"\" + __webpack_public_path__ + \"bot-sprite.svg#\" + this.iconURI_ + \"\\\"></use></svg>\";\n    el_item.appendChild(el_icon);\n  }\n\n  this.parentHtml_.appendChild(el_item);\n  Blockly.bindEvent_(el_item, 'mouseup', toolbox, toolbox.setSelectedItemFactory(this));\n};\n/**\n * Get the contents of this category.\n * @return {!Array|string} xmlList List of blocks to show, or a string with the\n * name of a custom category.\n * deriv-bot: Use this.dynamic_ rather than this.custom_ for dynamic categories\n * if we specify this.custom_, parseContents() is never called (see core/toolbox.js),\n * so we don't get extra props we require. See parseContents_\n */\n\n\nBlockly.Toolbox.Category.prototype.getContents = function () {\n  return this.custom_ || this.dynamic_ || this.contents_;\n};\n/**\n* Set the contents of this category from DOM.\n* @param {Node} domTree DOM tree of blocks.\n* @constructor\n* deriv-bot: Set some extra properties on the Blockly.Toolbox.Category\n*/\n\n\nBlockly.Toolbox.Category.prototype.parseContents_ = function (domTree) {\n  var _this3 = this;\n\n  this.description_ = domTree.getAttribute('description');\n  this.dynamic_ = domTree.getAttribute('dynamic');\n  this.is_category_return_ = !!domTree.getAttribute('is_category_return');\n  domTree.childNodes.forEach(function (child) {\n    if (child.tagName) {\n      var tag = child.tagName.toUpperCase();\n\n      if (tag === 'CATEGORY') {\n        _this3.has_child_category_ = true;\n      }\n\n      switch (tag) {\n        case 'BLOCK':\n        case 'SHADOW':\n        case 'LABEL':\n        case 'BUTTON':\n        case 'SEP':\n        case 'TEXT':\n        case 'CATEGORY':\n          _this3.contents_.push(child);\n\n          break;\n\n        default:\n          break;\n      }\n    }\n  });\n};\n/**\n * Set the colour of the category's background from a DOM node.\n * @param {Node} node DOM node with \"colour\" and \"secondaryColour\" attribute.\n *     Colours are a hex string or hue on a colour wheel (0-360).\n * deriv-bot: We don't need secondaryColour\n */\n\n\nBlockly.Toolbox.Category.prototype.setColour = function (node) {\n  var colour = node.getAttribute('colour');\n\n  if (goog.isString(colour)) {\n    if (colour.match(/^#[0-9a-fA-F]{6}$/)) {\n      this.colour_ = colour;\n    } else {\n      this.colour_ = Blockly.hueToRgb(colour);\n    }\n\n    this.hasColours_ = true;\n  } else {\n    this.colour_ = '#000000';\n  }\n};\n/**\n * Create the DOM for the category menu.\n * deriv-bot: Custom class names\n */\n\n\nBlockly.Toolbox.CategoryMenu.prototype.createDom = function () {\n  var className = this.parent_.horizontalLayout_ ? 'toolbox__horizontal-category-menu' : 'toolbox__category-menu';\n  this.table = goog.dom.createDom('div', className);\n  this.parentHtml_.appendChild(this.table);\n};\n/**\n * Fill the toolbox with categories and blocks by creating a new\n * {Blockly.Toolbox.Category} for every category tag in the toolbox xml.\n * @param {Node} domTree DOM tree of blocks, or null.\n */\n\n\nBlockly.Toolbox.CategoryMenu.prototype.populate = function (domTree, isSubCategory) {\n  var _this4 = this;\n\n  if (isSubCategory === void 0) {\n    isSubCategory = false;\n  }\n\n  if (!domTree) {\n    return;\n  } // Remove old categories\n\n\n  if (!isSubCategory) {\n    this.dispose();\n    this.createDom();\n  }\n\n  domTree.childNodes.forEach(function (childNode) {\n    var is_category = function is_category() {\n      return childNode.tagName && childNode.tagName.toUpperCase() === 'CATEGORY';\n    };\n\n    var is_separator = function is_separator() {\n      return childNode.tagName && childNode.tagName.toUpperCase() === 'SEP';\n    };\n\n    if (is_category()) {\n      var row_class = childNode.getAttribute('is_category_return') ? 'toolbox__category-return' : 'toolbox__row';\n      var el_row = goog.dom.createDom('div', {\n        class: row_class\n      }); // Convert xml web-class attributes to class attributes in el_row\n\n      var web_classes = childNode.getAttribute('web-class');\n\n      if (web_classes) {\n        web_classes.split(' ').forEach(function (className) {\n          return el_row.classList.add(className);\n        });\n      }\n\n      var toolbox_category = new Blockly.Toolbox.Category(_this4, el_row, childNode);\n      var child = childNode.children;\n      /* eslint-disable consistent-return */\n\n      var subCategory = Object.keys(child).map(function (key) {\n        if (child[key].tagName === 'category') {\n          return child[key];\n        }\n      });\n\n      if (subCategory.length) {\n        _this4.populate(childNode, true);\n      }\n\n      if (!isSubCategory) {\n        _this4.table.appendChild(el_row);\n      }\n\n      _this4.categories_.push(toolbox_category);\n    } else if (is_separator()) {\n      var el_separator = goog.dom.createDom('div', {\n        class: 'toolbox__separator'\n      });\n\n      _this4.table.appendChild(el_separator);\n    }\n  });\n  this.height_ = this.table.offsetHeight;\n};","import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\n\n/* eslint-disable func-names */\n\n/**\n * Find all user-created variables that are in use in the workspace.\n * For use by generators.\n * To get a list of all variables on a workspace, including unused variables,\n * call Workspace.getAllVariables.\n * deriv-bot: Required for JS generator to work.\n * @param {!Blockly.Workspace} ws The workspace to search for variables.\n * @return {!Array.<!Blockly.VariableModel>} Array of variable models.\n */\nBlockly.Variables.allUsedVarModels = function (ws) {\n  var blocks = ws.getAllBlocks(false);\n  var variableHash = Object.create(null); // Iterate through every block and add each variable to the hash.\n\n  blocks.forEach(function (block) {\n    var blockVariables = block.getVarModels();\n\n    if (blockVariables) {\n      blockVariables.forEach(function (blockVariable) {\n        var id = blockVariable.getId();\n\n        if (id) {\n          variableHash[id] = blockVariable;\n        }\n      });\n    }\n  }); // Flatten the hash into a list.\n\n  var variableList = [];\n  Object.keys(variableHash).forEach(function (id) {\n    variableList.push(variableHash[id]);\n  });\n  return variableList;\n};","Blockly.WorkspaceAudio.prototype.preload = function () {};","/* eslint-disable */\n\n/**\n * Scroll the workspace to center on the given block.\n * @param {?string} id ID of block center on.\n * @public\n */\nBlockly.WorkspaceSvg.prototype.centerOnBlock = function (id, hideChaff) {\n  if (hideChaff === void 0) {\n    hideChaff = true;\n  }\n\n  if (!this.scrollbar) {\n    console.warn('Tried to scroll a non-scrollable workspace.');\n    return;\n  }\n\n  var block = this.getBlockById(id);\n\n  if (!block) {\n    return;\n  } // XY is in workspace coordinates.\n\n\n  var xy = block.getRelativeToSurfaceXY(); // Height/width is in workspace units.\n\n  var heightWidth = block.getHeightWidth(); // Find the enter of the block in workspace units.\n\n  var blockCenterY = xy.y + heightWidth.height / 2; // In RTL the block's position is the top right of the block, not top left.\n\n  var multiplier = this.RTL ? -1 : 1;\n  var blockCenterX = xy.x + multiplier * heightWidth.width / 2; // Workspace scale, used to convert from workspace coordinates to pixels.\n\n  var scale = this.scale; // Center in pixels.  0, 0 is at the workspace origin.  These numbers may\n  // be negative.\n\n  var pixelX = blockCenterX * scale;\n  var pixelY = blockCenterY * scale;\n  var metrics = this.getMetrics(); // Scrolling to here would put the block in the top-left corner of the\n  // visible workspace.\n\n  var scrollToBlockX = pixelX - metrics.contentLeft;\n  var scrollToBlockY = pixelY - metrics.contentTop; // viewHeight and viewWidth are in pixels.\n\n  var halfViewWidth = metrics.viewWidth / 2;\n  var halfViewHeight = metrics.viewHeight / 2; // Put the block in the center of the visible workspace instead.\n\n  var scrollToCenterX = scrollToBlockX - halfViewWidth;\n  var scrollToCenterY = scrollToBlockY - halfViewHeight;\n\n  if (hideChaff) {\n    Blockly.hideChaff();\n  }\n\n  this.scrollbar.set(scrollToCenterX, scrollToCenterY);\n};\n/**\n * Creates a copy of passed block_node on main workspace and positions it\n * below the lowest block on the canvas.\n * @static\n * @param {Element} block_node\n * @public\n */\n\n\nBlockly.WorkspaceSvg.prototype.addBlockNode = function (block_node) {\n  var block = Blockly.Xml.domToBlock(block_node, this);\n  var top_blocks = this.getTopBlocks(true);\n\n  if (top_blocks.length) {\n    var last_block = top_blocks[top_blocks.length - 1];\n    var last_block_xy = last_block.getRelativeToSurfaceXY();\n    var extra_spacing = last_block.startHat_ ? Blockly.BlockSvg.START_HAT_HEIGHT : 0;\n    var y = last_block_xy.y + last_block.getHeightWidth().height + extra_spacing + 30;\n    block.moveBy(last_block_xy.x, y);\n  }\n\n  this.centerOnBlock(block.id, false);\n};","Blockly.Xml.NODE_BLOCK = 'BLOCK';\nBlockly.Xml.NODE_BUTTON = 'BUTTON';\nBlockly.Xml.NODE_LABEL = 'LABEL';\nBlockly.Xml.NODE_SHADOW = 'SHADOW';","import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"regenerator-runtime/runtime\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport './blocks';\nimport './hooks';\nimport { isMainBlock, save as _save, disable, addLoadersFirst, cleanUpOnLoad, addDomAsBlock, backwardCompatibility, fixCollapsedBlocks, fixArgumentAttribute, removeUnavailableMarkets, strategyHasValidTradeTypeCategory, cleanBeforeExport } from './utils';\nimport { showDialog } from '../services/tradeEngine/utils/helpers';\nimport Interpreter from '../services/tradeEngine/utils/interpreter';\nimport GTM from '../utils/gtm';\nimport createError from '../utils/error';\nimport { translate, xml as translateXml } from '../utils/lang/i18n';\nimport { getLanguage } from '../utils/lang/lang';\nimport { observer as globalObserver } from '../utils/observer';\nexport var scratchWorkspaceInit =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(scratch_area_name, scratch_div_name) {\n    var el_scratch_div, el_app_contents, toolbox_xml, main_xml, workspace, el_blockly_svg, onWorkspaceResize;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            el_scratch_div = document.getElementById(scratch_div_name);\n            el_app_contents = document.getElementById('app_contents'); // eslint-disable-next-line\n\n            _context.next = 5;\n            return fetch(__webpack_public_path__ + \"xml/toolbox.xml\").then(function (response) {\n              return response.text();\n            });\n\n          case 5:\n            toolbox_xml = _context.sent;\n            _context.next = 8;\n            return fetch(__webpack_public_path__ + \"xml/main.xml\").then(function (response) {\n              return response.text();\n            });\n\n          case 8:\n            main_xml = _context.sent;\n            workspace = Blockly.inject(el_scratch_div, {\n              grid: {\n                spacing: 40,\n                length: 11,\n                colour: '#ebebeb'\n              },\n              media: __webpack_public_path__ + \"media/\",\n              // eslint-disable-line\n              toolbox: toolbox_xml,\n              trashcan: true,\n              zoom: {\n                wheel: true\n              }\n            });\n            Blockly.derivWorkspace = workspace;\n            Blockly.derivWorkspace.blocksXmlStr = main_xml;\n            Blockly.derivWorkspace.toolbox_.addStyle('hidden'); // Ensure flyout closes on click in workspace.\n\n            el_blockly_svg = document.querySelector('.blocklySvg');\n            document.addEventListener('click', function (event) {\n              if (el_blockly_svg.contains(event.target)) {\n                Blockly.derivWorkspace.toolbox_.clearSelection(); // eslint-disable-line\n              }\n            }); // Keep in memory to allow category browsing\n\n            workspace.initial_toolbox_xml = toolbox_xml;\n            Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(main_xml), workspace);\n\n            onWorkspaceResize = function onWorkspaceResize() {\n              var x = 0;\n              var y = document.getElementById('toolbar').clientHeight; // Position scratch_div over scratch_area.\n\n              el_scratch_div.style.left = x + \"px\";\n              el_scratch_div.style.top = y + \"px\";\n              el_scratch_div.style.width = el_app_contents.offsetWidth + \"px\";\n              el_scratch_div.style.height = el_app_contents.offsetHeight + \"px\";\n              Blockly.svgResize(workspace); // eslint-disable-next-line no-underscore-dangle\n\n              workspace.toolbox_.flyout_.position(); // Center on first root block, if applicable.\n\n              var top_blocks = workspace.getTopBlocks(true);\n\n              if (top_blocks.length > 0) {\n                workspace.centerOnBlock(top_blocks[0].id);\n              }\n            };\n\n            window.addEventListener('resize', onWorkspaceResize);\n            onWorkspaceResize();\n            _context.next = 25;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](0);\n            throw _context.t0;\n\n          case 25:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 22]]);\n  }));\n\n  return function scratchWorkspaceInit(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar setBeforeUnload = function setBeforeUnload(off) {\n  if (off) {\n    window.onbeforeunload = null;\n  } else {\n    window.onbeforeunload = function () {\n      return 'You have some unsaved blocks, do you want to save them before you exit?';\n    };\n  }\n};\n\nvar disableStrayBlocks = function disableStrayBlocks() {\n  var topBlocks = Blockly.mainWorkspace.getTopBlocks();\n  topBlocks.forEach(function (block) {\n    if (!isMainBlock(block.type) && ['block_holder', 'tick_analysis', 'loader', 'procedures_defreturn', 'procedures_defnoreturn'].indexOf(block.type) < 0 && !block.disabled) {\n      disable(block, translate('Blocks must be inside block holders, main blocks or functions'));\n    }\n  });\n};\n\nvar marketsWereRemoved = function marketsWereRemoved(xml) {\n  if (!Array.from(xml.children).every(function (block) {\n    return !removeUnavailableMarkets(block);\n  })) {\n    if (window.trackJs) {\n      trackJs.track('Invalid financial market');\n    }\n\n    showDialog({\n      title: translate('Warning'),\n      text: [translate('This strategy is not available in your country.')],\n      buttons: [{\n        text: translate('OK'),\n        class: 'button-primary',\n        click: function click() {\n          $(this).dialog('close');\n        }\n      }]\n    }).then(function () {}).catch(function () {});\n    return true;\n  }\n\n  return false;\n};\n\nexport var loadWorkspace = function loadWorkspace(xml) {\n  if (!strategyHasValidTradeTypeCategory(xml)) return;\n  if (marketsWereRemoved(xml)) return;\n  Blockly.Events.setGroup('load');\n  Blockly.mainWorkspace.clear();\n  Array.from(xml.children).forEach(function (block) {\n    backwardCompatibility(block);\n  });\n  fixArgumentAttribute(xml);\n  Blockly.Xml.domToWorkspace(xml, Blockly.mainWorkspace);\n  addLoadersFirst(xml).then(function () {\n    fixCollapsedBlocks();\n    Blockly.Events.setGroup(false);\n    globalObserver.emit('ui.log.success', translate('Blocks are loaded successfully'));\n  }, function (e) {\n    Blockly.Events.setGroup(false);\n    throw e;\n  });\n};\nexport var loadBlocks = function loadBlocks(xml, dropEvent) {\n  if (dropEvent === void 0) {\n    dropEvent = {};\n  }\n\n  if (!strategyHasValidTradeTypeCategory(xml)) return;\n  if (marketsWereRemoved(xml)) return;\n  var variables = xml.getElementsByTagName('variables');\n\n  if (variables.length > 0) {\n    Blockly.Xml.domToVariables(variables[0], Blockly.mainWorkspace);\n  }\n\n  Blockly.Events.setGroup('load');\n  addLoadersFirst(xml).then(function (loaders) {\n    var addedBlocks = [].concat(loaders, Array.from(xml.children).map(function (block) {\n      return addDomAsBlock(block);\n    }).filter(function (b) {\n      return b;\n    }));\n    cleanUpOnLoad(addedBlocks, dropEvent);\n    fixCollapsedBlocks();\n    globalObserver.emit('ui.log.success', translate('Blocks are loaded successfully'));\n  }, function (e) {\n    throw e;\n  });\n};\n\nvar xmlToStr = function xmlToStr(xml) {\n  var serializer = new XMLSerializer();\n  return serializer.serializeToString(xml);\n};\n\nvar addBlocklyTranslation = function addBlocklyTranslation() {\n  $.ajaxPrefilter(function (options) {\n    options.async = true; // eslint-disable-line no-param-reassign\n  });\n  var lang = getLanguage();\n\n  if (lang === 'ach') {\n    lang = 'en';\n  } else if (lang === 'zh_cn') {\n    lang = 'zh-hans';\n  } else if (lang === 'zh_tw') {\n    lang = 'zh-hant';\n  }\n\n  return new Promise(function (resolve) {\n    $.getScript(\"translations/\" + lang + \".js\", resolve);\n  });\n};\n\nvar onresize = function onresize() {\n  var element = document.getElementById('blocklyArea');\n  var blocklyArea = element;\n  var blocklyDiv = document.getElementById('blocklyDiv');\n  var x = 0;\n  var y = 0;\n\n  do {\n    x += element.offsetLeft;\n    y += element.offsetTop;\n    element = element.offsetParent;\n  } while (element); // Position blocklyDiv over blocklyArea.\n\n\n  blocklyDiv.style.left = x + \"px\";\n  blocklyDiv.style.top = y + \"px\";\n  blocklyDiv.style.width = blocklyArea.offsetWidth + \"px\";\n  blocklyDiv.style.height = blocklyArea.offsetHeight + \"px\";\n};\n\nvar render = function render(workspace) {\n  return function () {\n    onresize();\n    Blockly.svgResize(workspace);\n  };\n};\n\nvar overrideBlocklyDefaultShape = function overrideBlocklyDefaultShape() {\n  var addDownloadToMenu = function addDownloadToMenu(block) {\n    if (block instanceof Object) {\n      // eslint-disable-next-line no-param-reassign, max-len\n      block.customContextMenu = function (options) {\n        var _this = this;\n\n        options.push({\n          text: translate('Download'),\n          enabled: true,\n          callback: function callback() {\n            var xml = Blockly.Xml.textToDom('<xml xmlns=\"http://www.w3.org/1999/xhtml\" collection=\"false\"></xml>');\n            xml.appendChild(Blockly.Xml.blockToDom(_this));\n\n            _save('deriv-bot-block', true, xml);\n          }\n        });\n      };\n    }\n  };\n\n  Object.keys(Blockly.Blocks).forEach(function (blockName) {\n    var downloadDisabledBlocks = ['controls_forEach', 'controls_for', 'variables_get', 'variables_set'];\n\n    if (!downloadDisabledBlocks.includes(blockName)) {\n      addDownloadToMenu(Blockly.Blocks[blockName]);\n    }\n  });\n};\n\nvar repaintDefaultColours = function repaintDefaultColours() {\n  Blockly.Msg.LOGIC_HUE = '#DEDEDE';\n  Blockly.Msg.LOOPS_HUE = '#DEDEDE';\n  Blockly.Msg.MATH_HUE = '#DEDEDE';\n  Blockly.Msg.TEXTS_HUE = '#DEDEDE';\n  Blockly.Msg.LISTS_HUE = '#DEDEDE';\n  Blockly.Msg.COLOUR_HUE = '#DEDEDE';\n  Blockly.Msg.VARIABLES_HUE = '#DEDEDE';\n  Blockly.Msg.VARIABLES_DYNAMIC_HUE = '#DEDEDE';\n  Blockly.Msg.PROCEDURES_HUE = '#DEDEDE'; // Blockly.Blocks.logic.HUE = '#DEDEDE';\n  // Blockly.Blocks.loops.HUE = '#DEDEDE';\n  // Blockly.Blocks.math.HUE = '#DEDEDE';\n  // Blockly.Blocks.texts.HUE = '#DEDEDE';\n  // Blockly.Blocks.lists.HUE = '#DEDEDE';\n  // Blockly.Blocks.colour.HUE = '#DEDEDE';\n  // Blockly.Blocks.variables.HUE = '#DEDEDE';\n  // Blockly.Blocks.procedures.HUE = '#DEDEDE';\n};\n\nvar _Blockly =\n/*#__PURE__*/\nfunction () {\n  function _Blockly() {\n    var _this2 = this;\n\n    this.blocksXmlStr = '';\n    this.generatedJs = ''; // eslint-disable-next-line no-underscore-dangle\n    // Blockly.WorkspaceSvg.prototype.preloadAudio_ = () => {}; // https://github.com/google/blockly/issues/299\n\n    this.initPromise = new Promise(function (resolve) {\n      $.get('xml/toolbox.xml', function (toolboxXml) {\n        var workspace = Blockly.inject('blocklyDiv', {\n          toolbox: xmlToStr(translateXml(toolboxXml.getElementsByTagName('xml')[0])),\n          zoom: {\n            wheel: true,\n            startScale: 1.1\n          },\n          trashcan: true,\n          scrollbars: true,\n          media: 'image/scratch/'\n        });\n        workspace.addChangeListener(function (event) {\n          if (event.type === Blockly.Events.BLOCK_CREATE) {\n            event.ids.forEach(function (id) {\n              var block = workspace.getBlockById(id);\n\n              if (block) {\n                GTM.pushDataLayer({\n                  event: 'Block Event',\n                  blockEvent: event.type,\n                  blockType: block.type\n                });\n              }\n            });\n          } else if (event.type === Blockly.Events.BLOCK_DELETE) {\n            var dom = Blockly.Xml.textToDom(\"<xml>\" + event.oldXml.outerHTML + \"</xml>\");\n            var blockNodes = dom.getElementsByTagName('block');\n            Array.from(blockNodes).forEach(function (blockNode) {\n              GTM.pushDataLayer({\n                event: 'Block Event',\n                blockEvent: event.type,\n                blockType: blockNode.getAttribute('type')\n              });\n            });\n          }\n        });\n        var renderInstance = render(workspace);\n        window.addEventListener('resize', renderInstance, false);\n        renderInstance();\n        addBlocklyTranslation().then(function () {\n          $.get('xml/main.xml', function (main) {\n            repaintDefaultColours();\n            overrideBlocklyDefaultShape();\n            _this2.blocksXmlStr = Blockly.Xml.domToPrettyText(main);\n            Blockly.Xml.domToWorkspace(main.getElementsByTagName('xml')[0], workspace);\n\n            _this2.zoomOnPlusMinus();\n\n            setTimeout(function () {\n              setBeforeUnload(true);\n              Blockly.mainWorkspace.cleanUp();\n              Blockly.mainWorkspace.clearUndo();\n            }, 0);\n            resolve();\n          });\n        });\n      });\n    });\n  }\n  /* eslint-disable class-methods-use-this */\n\n\n  var _proto = _Blockly.prototype;\n\n  _proto.zoomOnPlusMinus = function zoomOnPlusMinus(zoomIn) {\n    var metrics = Blockly.mainWorkspace.getMetrics();\n\n    if (zoomIn) {\n      Blockly.mainWorkspace.zoom(metrics.viewWidth / 2, metrics.viewHeight / 2, 1);\n    } else {\n      Blockly.mainWorkspace.zoom(metrics.viewWidth / 2, metrics.viewHeight / 2, -1);\n    }\n  };\n\n  _proto.resetWorkspace = function resetWorkspace() {\n    Blockly.Events.setGroup('reset');\n    Blockly.mainWorkspace.clear();\n    Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(this.blocksXmlStr), Blockly.mainWorkspace);\n    Blockly.Events.setGroup(false);\n  }\n  /* eslint-disable class-methods-use-this */\n  ;\n\n  _proto.cleanUp = function cleanUp() {\n    Blockly.Events.setGroup(true);\n    var topBlocks = Blockly.mainWorkspace.getTopBlocks(true);\n    var cursorY = 0;\n    topBlocks.forEach(function (block) {\n      if (block.getSvgRoot().style.display !== 'none') {\n        var xy = block.getRelativeToSurfaceXY();\n        block.moveBy(-xy.x, cursorY - xy.y);\n        block.snapToGrid();\n        cursorY = block.getRelativeToSurfaceXY().y + block.getHeightWidth().height + Blockly.BlockSvg.MIN_BLOCK_Y;\n      }\n    });\n    Blockly.Events.setGroup(false); // Fire an event to allow scrollbars to resize.\n\n    Blockly.mainWorkspace.resizeContents();\n  }\n  /* eslint-disable class-methods-use-this */\n  ;\n\n  _proto.load = function load(blockStr, dropEvent) {\n    if (blockStr === void 0) {\n      blockStr = '';\n    }\n\n    if (dropEvent === void 0) {\n      dropEvent = {};\n    }\n\n    var xml;\n\n    try {\n      xml = Blockly.Xml.textToDom(blockStr);\n    } catch (e) {\n      throw createError('FileLoad', translate('Unrecognized file format'));\n    }\n\n    try {\n      if (xml.hasAttribute('collection') && xml.getAttribute('collection') === 'true') {\n        loadBlocks(xml, dropEvent);\n      } else {\n        loadWorkspace(xml);\n      }\n    } catch (e) {\n      throw createError('FileLoad', translate('Unable to load the block file'));\n    }\n  }\n  /* eslint-disable class-methods-use-this */\n  ;\n\n  _proto.save = function save(arg) {\n    var filename = arg.filename,\n        collection = arg.collection;\n    setBeforeUnload(true);\n    var xml = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);\n    cleanBeforeExport(xml);\n\n    _save(filename, collection, xml);\n  };\n\n  _proto.run = function run(limitations) {\n    var _this3 = this;\n\n    if (limitations === void 0) {\n      limitations = {};\n    }\n\n    disableStrayBlocks();\n    var code;\n\n    try {\n      code = \"\\nvar BinaryBotPrivateInit, BinaryBotPrivateStart, BinaryBotPrivateBeforePurchase, BinaryBotPrivateDuringPurchase, BinaryBotPrivateAfterPurchase;\\nvar BinaryBotPrivateLastTickTime\\nvar BinaryBotPrivateTickAnalysisList = [];\\nfunction BinaryBotPrivateRun(f, arg) {\\n if (f) return f(arg);\\n return false;\\n}\\nfunction BinaryBotPrivateTickAnalysis() {\\n var currentTickTime = Bot.getLastTick(true).epoch\\n if (currentTickTime === BinaryBotPrivateLastTickTime) {\\n   return\\n }\\n BinaryBotPrivateLastTickTime = currentTickTime\\n for (var BinaryBotPrivateI = 0; BinaryBotPrivateI < BinaryBotPrivateTickAnalysisList.length; BinaryBotPrivateI++) {\\n   BinaryBotPrivateRun(BinaryBotPrivateTickAnalysisList[BinaryBotPrivateI]);\\n }\\n}\\nvar BinaryBotPrivateLimitations = \" + JSON.stringify(limitations) + \";\\n\" + Blockly.JavaScript.workspaceToCode(Blockly.mainWorkspace) + \"\\nBinaryBotPrivateRun(BinaryBotPrivateInit);\\nwhile(true) {\\n BinaryBotPrivateTickAnalysis();\\n BinaryBotPrivateRun(BinaryBotPrivateStart)\\n while(watch('before')) {\\n   BinaryBotPrivateTickAnalysis();\\n   BinaryBotPrivateRun(BinaryBotPrivateBeforePurchase);\\n }\\n while(watch('during')) {\\n   BinaryBotPrivateTickAnalysis();\\n   BinaryBotPrivateRun(BinaryBotPrivateDuringPurchase);\\n }\\n BinaryBotPrivateTickAnalysis();\\n if(!BinaryBotPrivateRun(BinaryBotPrivateAfterPurchase)) {\\n   break;\\n }\\n}\\n       \";\n      this.generatedJs = code;\n\n      if (code) {\n        this.stop(true);\n        this.interpreter = new Interpreter();\n        this.interpreter.run(code).catch(function (e) {\n          globalObserver.emit('Error', e);\n\n          _this3.stop();\n        });\n      }\n    } catch (e) {\n      globalObserver.emit('Error', e);\n      this.stop();\n    }\n  };\n\n  _proto.stop = function stop(stopBeforeStart) {\n    if (!stopBeforeStart) {\n      var $runButtons = $('#runButton, #summaryRunButton');\n      var $stopButtons = $('#stopButton, #summaryStopButton');\n\n      if ($runButtons.is(':visible') || $stopButtons.is(':visible')) {\n        $runButtons.show();\n        $stopButtons.hide();\n      }\n    }\n\n    if (this.interpreter) {\n      this.interpreter.stop();\n      this.interpreter = null;\n    }\n  }\n  /* eslint-disable class-methods-use-this */\n  ;\n\n  _proto.undo = function undo() {\n    Blockly.Events.setGroup('undo');\n    Blockly.mainWorkspace.undo();\n    Blockly.Events.setGroup(false);\n  }\n  /* eslint-disable class-methods-use-this */\n  ;\n\n  _proto.redo = function redo() {\n    Blockly.mainWorkspace.undo(true);\n  }\n  /* eslint-disable class-methods-use-this */\n  ;\n\n  _proto.hasStarted = function hasStarted() {\n    return this.interpreter && this.interpreter.hasStarted();\n  }\n  /* eslint-enable */\n  ;\n\n  return _Blockly;\n}();\n\nexport { _Blockly as default };","import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.promise\";\nimport \"regenerator-runtime/runtime\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport filesaver from 'file-saver';\nimport { oppositesToDropdown } from './utils';\nimport config from '../constants/const';\nimport { generateLiveApiInstance } from '../services/api/appId';\nimport { symbolApi } from '../services/api/shared';\nimport { translate } from '../utils/lang/i18n';\nimport { observer as globalObserver } from '../utils/observer';\nimport { getTokenList, removeAllTokens } from '../utils/tokenHelper';\nvar purchaseChoices = [[translate('Click to select'), '']];\nexport var saveAs = function saveAs(_ref) {\n  var data = _ref.data,\n      filename = _ref.filename,\n      type = _ref.type;\n  var blob = new Blob([data], {\n    type: type\n  });\n  filesaver.saveAs(blob, filename);\n};\nexport var getPurchaseChoices = function getPurchaseChoices() {\n  return purchaseChoices;\n};\n\nvar filterPurchaseChoices = function filterPurchaseChoices(contractType, oppositesName) {\n  var tradeTypes = config.opposites[oppositesName];\n  var tmpPurchaseChoices = tradeTypes.filter(function (k) {\n    return contractType === 'both' ? true : contractType === Object.keys(k)[0];\n  });\n\n  if (!tmpPurchaseChoices.length) {\n    tmpPurchaseChoices = tradeTypes;\n  }\n\n  return oppositesToDropdown(tmpPurchaseChoices);\n};\n\nexport var updatePurchaseChoices = function updatePurchaseChoices(contractType, oppositesName) {\n  purchaseChoices = filterPurchaseChoices(contractType, oppositesName);\n  var purchases = Blockly.mainWorkspace.getAllBlocks().filter(function (r) {\n    return ['purchase', 'payout', 'ask_price'].indexOf(r.type) >= 0;\n  });\n  Blockly.Events.recordUndo = false;\n  purchases.forEach(function (purchase) {\n    var value = purchase.getField('PURCHASE_LIST').getValue();\n    Blockly.WidgetDiv.hideIfOwner(purchase.getField('PURCHASE_LIST'));\n\n    if (value === purchaseChoices[0][1]) {\n      purchase.getField('PURCHASE_LIST').setText(purchaseChoices[0][0]);\n    } else if (purchaseChoices.length === 2 && value === purchaseChoices[1][1]) {\n      purchase.getField('PURCHASE_LIST').setText(purchaseChoices[1][0]);\n    } else {\n      purchase.getField('PURCHASE_LIST').setValue(purchaseChoices[0][1]);\n      purchase.getField('PURCHASE_LIST').setText(purchaseChoices[0][0]);\n    }\n  });\n  Blockly.Events.recordUndo = true;\n};\nexport var expectValue = function expectValue(block, field) {\n  var value = Blockly.JavaScript.valueToCode(block, field, Blockly.JavaScript.ORDER_ATOMIC);\n\n  if (!value) {\n    throw Error(translate(field + \" cannot be empty\"));\n  }\n\n  return value;\n};\nexport var fieldGeneratorMapping = {};\n\nvar getActiveSymbols = function getActiveSymbols(symbols) {\n  return Object.keys(symbols).reduce(function (acc, symbol) {\n    var _objectSpread2;\n\n    return symbolApi.getAllowedCategories(symbol).length ? _objectSpread({}, acc, (_objectSpread2 = {}, _objectSpread2[symbol] = symbols[symbol], _objectSpread2)) : _objectSpread({}, acc);\n  }, {});\n};\n\nvar getActiveSubMarket = function getActiveSubMarket(submarkets) {\n  return Object.keys(submarkets).reduce(function (acc, submarket) {\n    var _objectSpread3;\n\n    return Object.keys(getActiveSymbols(submarkets[submarket].symbols)).length ? _objectSpread({}, acc, (_objectSpread3 = {}, _objectSpread3[submarket] = submarkets[submarket], _objectSpread3)) : _objectSpread({}, acc);\n  }, {});\n};\n\nvar getActiveMarket = function getActiveMarket(markets) {\n  return Object.keys(markets).reduce(function (acc, market) {\n    var _objectSpread4;\n\n    return Object.keys(getActiveSubMarket(markets[market].submarkets)).length ? _objectSpread({}, acc, (_objectSpread4 = {}, _objectSpread4[market] = markets[market], _objectSpread4)) : _objectSpread({}, acc);\n  }, {});\n};\n/* eslint-disable no-unreachable */\n\n\nfieldGeneratorMapping.MARKET_LIST = function () {\n  return [['', '']];\n  var markets = getActiveMarket(symbolApi.activeSymbols.getMarkets());\n  return Object.keys(markets).map(function (e) {\n    return [markets[e].name, e];\n  });\n};\n\nfieldGeneratorMapping.SUBMARKET_LIST = function (block) {\n  return function () {\n    return [['', '']];\n    var markets = getActiveMarket(symbolApi.activeSymbols.getMarkets());\n    var marketName = block.getFieldValue('MARKET_LIST');\n\n    if (!marketName || marketName === 'Invalid') {\n      return [['', 'Invalid']];\n    }\n\n    var submarkets = getActiveSubMarket(markets[marketName].submarkets);\n    return Object.keys(submarkets).map(function (e) {\n      return [submarkets[e].name, e];\n    }) // Filter out markets we don't have contracts for\n    .filter(function (submarket) {\n      return !['energy'].includes(submarket[1]);\n    });\n  };\n};\n\nfieldGeneratorMapping.SYMBOL_LIST = function (block) {\n  return function () {\n    return [['', '']];\n    var markets = getActiveMarket(symbolApi.activeSymbols.getMarkets());\n    var submarketName = block.getFieldValue('SUBMARKET_LIST');\n\n    if (!submarketName || submarketName === 'Invalid') {\n      return [['', '']];\n    }\n\n    var marketName = block.getFieldValue('MARKET_LIST');\n    var submarkets = getActiveSubMarket(markets[marketName].submarkets);\n    var symbols = getActiveSymbols(submarkets[submarketName].symbols);\n    return Object.keys(symbols).map(function (e) {\n      return [symbols[e].display, symbols[e].symbol];\n    }) // Filter out symbols we don't have contracts for (these symbols have only forward-starting)\n    .filter(function (symbol) {\n      return !['frxGBPNOK', 'frxUSDNOK', 'frxUSDNEK', 'frxUSDSEK'].includes(symbol[1]);\n    });\n  };\n};\n/* eslint-enable */\n\n\nfieldGeneratorMapping.TRADETYPECAT_LIST = function (block) {\n  return function () {\n    var symbol = block.getFieldValue('SYMBOL_LIST');\n\n    if (!symbol) {\n      return [['', '']];\n    }\n\n    var allowedCategories = symbolApi.getAllowedCategories(symbol.toLowerCase());\n    return Object.keys(config.conditionsCategoryName).filter(function (e) {\n      return allowedCategories.indexOf(e) >= 0;\n    }).map(function (e) {\n      return [config.conditionsCategoryName[e], e];\n    });\n  };\n};\n\nfieldGeneratorMapping.TRADETYPE_LIST = function (block) {\n  return function () {\n    var tradeTypeCat = block.getFieldValue('TRADETYPECAT_LIST');\n\n    if (!tradeTypeCat) {\n      return [['', '']];\n    }\n\n    return config.conditionsCategory[tradeTypeCat].map(function (e) {\n      return [config.opposites[e.toUpperCase()].map(function (c) {\n        return c[Object.keys(c)[0]];\n      }).join('/'), e];\n    }) // Filter out trade types we don't offer\n    .filter(function (tradeType) {\n      return !(block.getFieldValue('SUBMARKET_LIST') === 'smart_fx' && tradeType[1] === 'higherlower');\n    });\n  };\n};\n\nexport var dependentFieldMapping = {\n  MARKET_LIST: 'SUBMARKET_LIST',\n  SUBMARKET_LIST: 'SYMBOL_LIST',\n  SYMBOL_LIST: 'TRADETYPECAT_LIST',\n  TRADETYPECAT_LIST: 'TRADETYPE_LIST'\n};\nvar contractsForStore = JSON.parse(localStorage.getItem('contractsForStore') || '[]');\n\nvar getContractCategory = function getContractCategory(input) {\n  return Object.keys(config.conditionsCategory).find(function (c) {\n    return c === input || config.conditionsCategory[c].includes(input);\n  });\n};\n\nvar matchesBarrierCategory = function matchesBarrierCategory(contract, contractCategory) {\n  var conditions = [];\n  Object.keys(config.barrierCategories).some(function (barrierCategory) {\n    if (config.barrierCategories[barrierCategory].includes(contractCategory)) {\n      conditions.push(contract.barrier_category === barrierCategory);\n    }\n\n    return conditions.length;\n  }); // If `barrierCategory` for `contractCategory` not found fallback to all contracts\n\n  return !conditions.includes(false);\n};\n\nvar filterContractsByCategory = function filterContractsByCategory(contracts, contractCategory, contractType) {\n  if (!contracts) return [];\n  return contracts.filter(function (contract) {\n    // We don't offer forward-starting contracts in deriv-bot, remove these\n    if (contract.start_type === 'forward') {\n      return false;\n    }\n\n    return contract.contract_category === contractCategory && matchesBarrierCategory(contract, contractType);\n  });\n};\n\nexport var getDurationsForContracts = function getDurationsForContracts(contractsAvailable, selectedContractType) {\n  var defaultDurations = [[translate('Ticks'), 't'], [translate('Seconds'), 's'], [translate('Minutes'), 'm'], [translate('Hours'), 'h'], [translate('Days'), 'd']];\n  var noDurationsAvailable = [{\n    label: translate('Not available'),\n    unit: 'na',\n    minimum: 0\n  }];\n  if (!contractsAvailable) return noDurationsAvailable;\n\n  var getMinimumAmount = function getMinimumAmount(input) {\n    return input.replace(/\\D/g, '');\n  };\n\n  var getDurationIndex = function getDurationIndex(input) {\n    return defaultDurations.findIndex(function (d) {\n      return d[1] === input.replace(/\\d+/g, '');\n    });\n  };\n\n  var offeredDurations = [];\n  var contractsForContractCategory = filterContractsByCategory(contractsAvailable, getContractCategory(selectedContractType), selectedContractType);\n  contractsForContractCategory.forEach(function (c) {\n    if (!c.min_contract_duration || !c.max_contract_duration) return;\n    var startIndex = getDurationIndex(c.min_contract_duration);\n    var endIndex = getDurationIndex(c.max_contract_duration === '1d' ? '24h' : c.max_contract_duration);\n    defaultDurations.slice(startIndex, endIndex + 1).forEach(function (duration, index) {\n      if (!offeredDurations.find(function (offeredDuration) {\n        return offeredDuration.unit === duration[1];\n      })) {\n        offeredDurations.push({\n          label: duration[0],\n          unit: duration[1],\n          minimum: index === 0 ? getMinimumAmount(c.min_contract_duration) : 1\n        });\n      }\n    });\n  }); // If only intraday contracts available remove day-durations\n\n  if (contractsForContractCategory.every(function (c) {\n    return c.expiry_type === 'intraday';\n  })) {\n    var dayDurationIndex = offeredDurations.findIndex(function (d) {\n      return d[1] === 'd';\n    });\n\n    if (dayDurationIndex !== -1) {\n      offeredDurations.splice(dayDurationIndex, 1);\n    }\n  }\n\n  if (!offeredDurations.length) {\n    return noDurationsAvailable;\n  }\n\n  return offeredDurations // Maintain order based on duration unit\n  .sort(function (a, b) {\n    return getDurationIndex(a.unit) - getDurationIndex(b.unit);\n  });\n};\nexport var haveContractsForSymbol = function haveContractsForSymbol(underlyingSymbol) {\n  var contractsForSymbol = contractsForStore.find(function (c) {\n    return c.symbol === underlyingSymbol;\n  });\n\n  if (!contractsForSymbol) {\n    return false;\n  }\n\n  var tokenList = getTokenList();\n\n  var isDifferentAccount = function isDifferentAccount() {\n    return tokenList.length && contractsForSymbol.accountName !== tokenList[0].accountName;\n  };\n\n  if (isDifferentAccount()) {\n    return false;\n  } // Data expired, return cached data, retrieve updated data in background (if not already doing so)\n\n\n  var isExpiredData = function isExpiredData() {\n    return Math.floor((Date.now() - contractsForSymbol.timestamp) / 1000) > 600;\n  };\n\n  if (isExpiredData()) {\n    var event = \"contractsLoaded.\" + underlyingSymbol;\n\n    if (!globalObserver.isRegistered(event)) {\n      globalObserver.register(event);\n      getContractsAvailableForSymbolFromApi(underlyingSymbol);\n    }\n  }\n\n  return contractsForSymbol;\n};\nexport var getContractsAvailableForSymbol =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee(underlyingSymbol) {\n    var contractsForSymbol, contractsAvailableForSymbol;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            contractsForSymbol = haveContractsForSymbol(underlyingSymbol);\n\n            if (contractsForSymbol) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 4;\n            return getContractsAvailableForSymbolFromApi(underlyingSymbol);\n\n          case 4:\n            contractsAvailableForSymbol = _context.sent;\n            return _context.abrupt(\"return\", Promise.resolve(contractsAvailableForSymbol.available));\n\n          case 6:\n            return _context.abrupt(\"return\", Promise.resolve(contractsForSymbol.available));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getContractsAvailableForSymbol(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getContractsAvailableForSymbolFromApi =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee2(underlyingSymbol) {\n    var api, tokenList, contractsForSymbol, response;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            api = generateLiveApiInstance();\n            tokenList = getTokenList();\n\n            if (!tokenList.length) {\n              _context2.next = 12;\n              break;\n            }\n\n            _context2.prev = 3;\n            _context2.next = 6;\n            return api.authorize(tokenList[0].token);\n\n          case 6:\n            _context2.next = 12;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](3);\n            removeAllTokens();\n            tokenList = [];\n\n          case 12:\n            contractsForSymbol = {};\n            _context2.prev = 13;\n            _context2.next = 16;\n            return api.getContractsForSymbol(underlyingSymbol);\n\n          case 16:\n            response = _context2.sent;\n\n            if (response.contracts_for) {\n              Object.assign(contractsForSymbol, {\n                symbol: underlyingSymbol,\n                available: response.contracts_for.available,\n                timestamp: Date.now()\n              });\n\n              if (tokenList.length) {\n                Object.assign(contractsForSymbol, {\n                  accountName: tokenList[0].accountName\n                });\n              } // Avoid duplicate symbols in contractsForStore\n\n\n              contractsForStore.filter(function (c) {\n                return c.symbol === underlyingSymbol;\n              }).forEach(function () {\n                return contractsForStore.splice(contractsForStore.findIndex(function (c) {\n                  return c.symbol === underlyingSymbol;\n                }), 1);\n              });\n              contractsForStore.push(contractsForSymbol);\n              localStorage.setItem('contractsForStore', JSON.stringify(contractsForStore));\n              globalObserver.unregisterAll(\"contractsLoaded.\" + underlyingSymbol);\n            }\n\n            _context2.next = 23;\n            break;\n\n          case 20:\n            _context2.prev = 20;\n            _context2.t1 = _context2[\"catch\"](13);\n\n            if (window.trackJs) {\n              trackJs.addMetadata('getContractsAvailableForSymbolFromApi Error', _context2.t1.message);\n            }\n\n          case 23:\n            if (typeof api.disconnect === 'function') {\n              api.disconnect();\n            }\n\n            return _context2.abrupt(\"return\", contractsForSymbol);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 8], [13, 20]]);\n  }));\n\n  return function getContractsAvailableForSymbolFromApi(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getBarriersForContracts = function getBarriersForContracts(contracts, selectedContractType, selectedDuration, selectedBarrierTypes) {\n  var barriers = {\n    values: []\n  };\n  var category = getContractCategory(selectedContractType);\n  var contractsForContractCategory = filterContractsByCategory(contracts, category, selectedContractType);\n  var offsetRegex = new RegExp('^[-|+]([0-9]+.[0-9]+)$');\n\n  var isOffset = function isOffset(input) {\n    return input && offsetRegex.test(input.toString());\n  };\n\n  if (contractsForContractCategory) {\n    var barrierProps = ['high_barrier', 'low_barrier'];\n    selectedBarrierTypes.forEach(function (barrierType, index) {\n      var selectedOffset = ['+', '-'].includes(barrierType); // Find barriers based on selected duration & by selected barrier type\n      // i.e. Hours & days can have different barrier values, offset + absolute sometimes have different values\n\n      var contract;\n      contract = contractsForContractCategory.find(function (c) {\n        var durations = getDurationsForContracts([c], selectedContractType);\n\n        if (durations.map(function (duration) {\n          return duration.unit;\n        }).includes(selectedDuration)) {\n          var barrierIsOffset = function barrierIsOffset() {\n            return isOffset(c.barrier || c[barrierProps[index]]);\n          };\n\n          return selectedOffset && barrierIsOffset() || !selectedOffset && !barrierIsOffset();\n        }\n\n        return false;\n      });\n\n      if (!contract) {\n        contract = contractsForContractCategory.find(function (c) {\n          return barrierType === 'absolute' && !isOffset(c.barrier || c.high_barrier);\n        });\n      } // Fallback to contract with smallest barriers\n\n\n      if (!contract) {\n        contract = contractsForContractCategory.sort(function (a, b) {\n          var c = a.barrier || a.high_barrier;\n          var d = b.barrier || b.high_barrier;\n          return parseFloat(c) - parseFloat(d);\n        }).shift();\n      }\n\n      var barrierlessCategories = ['reset', 'runs'];\n\n      if (contract && !barrierlessCategories.includes(contract.contract_category)) {\n        var propName = contract.barriers === 1 ? 'barrier' : barrierProps[index];\n\n        if (contract[propName]) {\n          var barrierMatch = contract[propName].toString().match(offsetRegex);\n          barriers.values[index] = barrierMatch ? barrierMatch[1] : contract[propName];\n        }\n\n        if (['intraday', 'tick'].includes(contract.expiry_type) && isOffset(contract[propName])) {\n          barriers.allowBothTypes = true; // Allow both offset + absolute barriers\n        } else if (barrierType === 'absolute' && !isOffset(contract[propName])) {\n          barriers.allowAbsoluteType = true;\n        }\n\n        if (contract.barriers === 1) {\n          selectedBarrierTypes.splice(index + 1, 1);\n        }\n      }\n    });\n\n    if (barriers.values.length === 2 && selectedBarrierTypes.every(function (val) {\n      return val === selectedBarrierTypes[0];\n    }) && barriers.values.every(function (val) {\n      return val === barriers.values[0];\n    })) {\n      // Set distinct values if equal barrier types have equal values\n      barriers.values[1] = (barriers.values[0] * 0.95).toFixed(1);\n    }\n  }\n\n  return barriers;\n};\nexport var getPredictionForContracts = function getPredictionForContracts(contracts, selectedContractType) {\n  var category = getContractCategory(selectedContractType);\n  var contractsForContractCategory = filterContractsByCategory(contracts, category, selectedContractType);\n  var contractMapping = {};\n\n  if (category === 'digits') {\n    contractMapping.matchesdiffers = ['DIGITMATCH', 'DIGITDIFF'];\n    contractMapping.overunder = ['DIGITOVER', 'DIGITUNDER'];\n  } else if (category === 'highlowticks') {\n    contractMapping.highlowticks = ['TICKHIGH', 'TICKLOW'];\n  }\n\n  var predictionRange = [];\n\n  if (contractMapping[selectedContractType]) {\n    var contract = contractsForContractCategory.find(function (c) {\n      return contractMapping[selectedContractType].includes(c.contract_type);\n    });\n\n    if (contract && contract.last_digit_range) {\n      predictionRange.push.apply(predictionRange, contract.last_digit_range);\n    } else {\n      predictionRange.push(0);\n    }\n  }\n\n  return predictionRange;\n};\nexport var pollForContracts = function pollForContracts(symbol) {\n  return new Promise(function (resolve) {\n    var contractsForSymbol = haveContractsForSymbol(symbol);\n\n    if (!contractsForSymbol) {\n      // Register an event and use as a lock to avoid spamming API\n      var event = \"contractsLoaded.\" + symbol;\n\n      if (!globalObserver.isRegistered(event)) {\n        globalObserver.register(event, function () {});\n        getContractsAvailableForSymbol(symbol).then(function (contracts) {\n          globalObserver.unregisterAll(event); // Release the lock\n\n          resolve(contracts);\n        });\n      } else {\n        // Request in progress, start polling localStorage until contracts are available.\n        var pollingFn = setInterval(function () {\n          var contracts = haveContractsForSymbol(symbol);\n\n          if (contracts) {\n            clearInterval(pollingFn);\n            resolve(contracts.available);\n          }\n        }, 100);\n        setTimeout(function () {\n          clearInterval(pollingFn);\n          resolve([]);\n        }, 10000);\n      }\n    } else {\n      resolve(contractsForSymbol.available);\n    }\n  });\n};","import \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es7.object.entries\";\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nimport { fieldGeneratorMapping, saveAs } from './shared';\nimport config from '../constants/const';\nimport { translate } from '../utils/lang/i18n';\nimport { observer as globalObserver } from '../utils/observer';\nexport var isMainBlock = function isMainBlock(blockType) {\n  return config.mainBlocks.indexOf(blockType) >= 0;\n};\nexport var oppositesToDropdown = function oppositesToDropdown(op) {\n  return op.map(function (k) {\n    return Object.entries(k)[0].reverse();\n  });\n};\nexport var backwardCompatibility = function backwardCompatibility(block) {\n  if (block.getAttribute('type') === 'on_strategy') {\n    block.setAttribute('type', 'before_purchase');\n  } else if (block.getAttribute('type') === 'on_finish') {\n    block.setAttribute('type', 'after_purchase');\n  }\n\n  Array.from(block.getElementsByTagName('statement')).forEach(function (statement) {\n    if (statement.getAttribute('name') === 'STRATEGY_STACK') {\n      statement.setAttribute('name', 'BEFOREPURCHASE_STACK');\n    } else if (statement.getAttribute('name') === 'FINISH_STACK') {\n      statement.setAttribute('name', 'AFTERPURCHASE_STACK');\n    }\n  });\n\n  if (isMainBlock(block.getAttribute('type'))) {\n    block.removeAttribute('deletable');\n  }\n};\nexport var removeUnavailableMarkets = function removeUnavailableMarkets(block) {\n  var containsUnavailableMarket = Array.from(block.getElementsByTagName('field')).some(function (field) {\n    return field.getAttribute('name') === 'MARKET_LIST' && !fieldGeneratorMapping.MARKET_LIST().map(function (markets) {\n      return markets[1];\n    }).includes(field.innerText);\n  });\n\n  if (containsUnavailableMarket) {\n    var nodesToRemove = ['MARKET_LIST', 'SUBMARKET_LIST', 'SYMBOL_LIST', 'TRADETYPECAT_LIST', 'TRADETYPE_LIST'];\n    Array.from(block.getElementsByTagName('field')).forEach(function (field) {\n      if (nodesToRemove.includes(field.getAttribute('name'))) {\n        block.removeChild(field);\n      }\n    });\n  }\n\n  return containsUnavailableMarket;\n}; // Checks for a valid tradeTypeCategory, and attempts to fix if invalid\n// Some tradeTypes were moved to new tradeTypeCategories, this function allows older strategies to keep functioning\n\nexport var strategyHasValidTradeTypeCategory = function strategyHasValidTradeTypeCategory(xml) {\n  var isTradeTypeListBlock = function isTradeTypeListBlock(block) {\n    return block.getAttribute('type') === 'trade' && Array.from(block.getElementsByTagName('field')).some(function (field) {\n      return field.getAttribute('name') === 'TRADETYPE_LIST';\n    });\n  };\n\n  var xmlBlocks = Array.from(xml.children);\n  var containsTradeTypeBlock = xmlBlocks.some(function (block) {\n    return isTradeTypeListBlock(block);\n  });\n\n  if (!containsTradeTypeBlock) {\n    return true;\n  }\n\n  var validTradeTypeCategory = xmlBlocks.some(function (block) {\n    if (isTradeTypeListBlock(block)) {\n      var xmlFields = Array.from(block.getElementsByTagName('field'));\n      return xmlFields.some(function (xmlField) {\n        if (xmlField.getAttribute('name') === 'TRADETYPE_LIST') {\n          // Retrieves the correct TRADETYPECAT_LIST for this TRADETYPE_LIST e.g. 'risefallequals' = 'callputequal'\n          var tradeTypeCategory = Object.keys(config.conditionsCategory).find(function (c) {\n            return config.conditionsCategory[c].includes(xmlField.innerText);\n          }); // Check if the current TRADETYPECAT_LIST is equal to the tradeTypeCategory\n\n          var tradeTypeCategoryIsEqual = xmlFields.some(function (f) {\n            return f.getAttribute('name') === 'TRADETYPECAT_LIST' && f.textContent === tradeTypeCategory;\n          }); // If the Trade Type Category is invalid, try to fix it\n\n          if (!tradeTypeCategoryIsEqual) {\n            try {\n              var tempWorkspace = new Blockly.Workspace({});\n              var blocklyBlock = Blockly.Xml.domToBlock(block, tempWorkspace);\n              var availableCategories = fieldGeneratorMapping.TRADETYPECAT_LIST(blocklyBlock)();\n              return xmlFields.some(function (f) {\n                return f.getAttribute('name') === 'TRADETYPECAT_LIST' && availableCategories.some(function (category) {\n                  return category[1] === tradeTypeCategory && Object.assign(f, {\n                    textContent: tradeTypeCategory\n                  });\n                });\n              });\n            } catch (e) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    return false;\n  });\n\n  if (!validTradeTypeCategory) {\n    var errorMessage = translate('The strategy you tried to import is invalid.');\n    globalObserver.emit('ui.log.error', errorMessage);\n\n    if (window.trackJs) {\n      trackJs.track(errorMessage);\n    }\n  }\n\n  return validTradeTypeCategory;\n};\n\nvar getCollapsedProcedures = function getCollapsedProcedures() {\n  return Blockly.mainWorkspace.getTopBlocks() // eslint-disable-next-line no-underscore-dangle\n  .filter(function (block) {\n    return !isMainBlock(block.type) && block.collapsed_ && block.type.indexOf('procedures_def') === 0;\n  });\n};\n\nexport var fixCollapsedBlocks = function fixCollapsedBlocks() {\n  return getCollapsedProcedures().forEach(function (block) {\n    block.setCollapsed(false);\n    block.setCollapsed(true);\n  });\n};\nexport var cleanUpOnLoad = function cleanUpOnLoad(blocksToClean, dropEvent) {\n  var _ref = dropEvent || {},\n      _ref$clientX = _ref.clientX,\n      clientX = _ref$clientX === void 0 ? 0 : _ref$clientX,\n      _ref$clientY = _ref.clientY,\n      clientY = _ref$clientY === void 0 ? 0 : _ref$clientY;\n\n  var blocklyMetrics = Blockly.mainWorkspace.getMetrics();\n  var scaleCancellation = 1 / Blockly.mainWorkspace.scale;\n  var blocklyLeft = blocklyMetrics.absoluteLeft - blocklyMetrics.viewLeft;\n  var blocklyTop = document.body.offsetHeight - blocklyMetrics.viewHeight - blocklyMetrics.viewTop;\n  var cursorX = clientX ? (clientX - blocklyLeft) * scaleCancellation : 0;\n  var cursorY = clientY ? (clientY - blocklyTop) * scaleCancellation : 0;\n  blocksToClean.forEach(function (block) {\n    block.moveBy(cursorX, cursorY);\n    block.snapToGrid();\n    cursorY += block.getHeightWidth().height + Blockly.BlockSvg.MIN_BLOCK_Y;\n  }); // Fire an event to allow scrollbars to resize.\n\n  Blockly.mainWorkspace.resizeContents();\n};\nexport var deleteBlockIfExists = function deleteBlockIfExists(block) {\n  Blockly.Events.recordUndo = false;\n  var existed = Blockly.mainWorkspace.getTopBlocks().filter(function (mainBlock) {\n    return !block.isInFlyout && mainBlock.id !== block.id && mainBlock.type === block.type;\n  }).map(function (b) {\n    return b.dispose();\n  }).length;\n  Blockly.Events.recordUndo = true;\n  return existed;\n};\nexport var setBlockTextColor = function setBlockTextColor(block) {\n  Blockly.Events.recordUndo = false;\n\n  if (block.inputList instanceof Array) {\n    Array.from(block.inputList).forEach(function (inp) {\n      return inp.fieldRow.forEach(function (field) {\n        if (field instanceof Blockly.FieldLabel) {\n          var svgElement = field.getSvgRoot();\n\n          if (svgElement) {\n            svgElement.style.setProperty('fill', 'white', 'important');\n          }\n        }\n      });\n    });\n  }\n\n  var field = block.getField();\n\n  if (field) {\n    var svgElement = field.getSvgRoot();\n\n    if (svgElement) {\n      svgElement.style.setProperty('fill', 'white', 'important');\n    }\n  }\n\n  Blockly.Events.recordUndo = true;\n};\nexport var configMainBlock = function configMainBlock(ev, type) {\n  if (ev.type === 'create') {\n    ev.ids.forEach(function (blockId) {\n      var block = Blockly.mainWorkspace.getBlockById(blockId);\n\n      if (block && block.type === type) {\n        deleteBlockIfExists(block);\n      }\n    });\n  }\n};\nexport var getBlockByType = function getBlockByType(type) {\n  return Blockly.mainWorkspace.getAllBlocks().find(function (block) {\n    return type === block.type;\n  });\n};\nexport var getBlocksByType = function getBlocksByType(type) {\n  return Blockly.mainWorkspace.getAllBlocks().filter(function (block) {\n    return type === block.type;\n  });\n};\nexport var getTopBlocksByType = function getTopBlocksByType(type) {\n  return Blockly.mainWorkspace.getTopBlocks().filter(function (block) {\n    return type === block.type;\n  });\n};\nexport var getMainBlocks = function getMainBlocks() {\n  return config.mainBlocks.map(function (blockType) {\n    return getBlockByType(blockType);\n  }).filter(function (b) {\n    return b;\n  });\n};\nexport var findTopParentBlock = function findTopParentBlock(b) {\n  var block = b; // eslint-disable-next-line no-underscore-dangle\n\n  var pblock = block.parentBlock_;\n\n  if (pblock === null) {\n    return null;\n  }\n\n  while (pblock !== null) {\n    if (pblock.type === 'trade') {\n      return pblock;\n    }\n\n    block = pblock; // eslint-disable-next-line no-underscore-dangle\n\n    pblock = block.parentBlock_;\n  }\n\n  return block;\n};\nexport var insideMainBlocks = function insideMainBlocks(block) {\n  var parent = findTopParentBlock(block);\n\n  if (!parent) {\n    return false;\n  }\n\n  return parent.type && isMainBlock(parent.type);\n};\nexport var save = function save(filename, collection, xmlDom) {\n  if (filename === void 0) {\n    filename = 'deriv-bot';\n  }\n\n  if (collection === void 0) {\n    collection = false;\n  }\n\n  xmlDom.setAttribute('collection', collection ? 'true' : 'false');\n  var data = Blockly.Xml.domToPrettyText(xmlDom);\n  saveAs({\n    data: data,\n    type: 'text/xml;charset=utf-8',\n    filename: filename + \".xml\"\n  });\n};\nexport var disable = function disable(blockObj, message) {\n  if (!blockObj.disabled) {\n    if (message) {\n      globalObserver.emit('ui.log.warn', message);\n    }\n  }\n\n  Blockly.Events.recordUndo = false;\n  blockObj.setDisabled(true);\n  Blockly.Events.recordUndo = true;\n};\nexport var enable = function enable(blockObj) {\n  Blockly.Events.recordUndo = false;\n  blockObj.setDisabled(false);\n  Blockly.Events.recordUndo = true;\n};\nexport var expandDuration = function expandDuration(duration) {\n  return duration.replace(/t/g, ' tick').replace(/s/g, ' second').replace(/m/g, ' minute').replace(/h/g, ' hour').replace(/d/g, ' day') + \"(s)\";\n};\n\nvar isProcedure = function isProcedure(blockType) {\n  return ['procedures_defreturn', 'procedures_defnoreturn'].indexOf(blockType) >= 0;\n}; // dummy event to recover deleted blocks loaded by loader\n\n\nvar DeleteStray =\n/*#__PURE__*/\nfunction (_Blockly$Events$Abstr) {\n  _inheritsLoose(DeleteStray, _Blockly$Events$Abstr);\n\n  function DeleteStray(block) {\n    var _this;\n\n    _this = _Blockly$Events$Abstr.call(this, block) || this;\n\n    _this.run(true);\n\n    return _this;\n  }\n\n  var _proto = DeleteStray.prototype;\n\n  _proto.run = function run(redo) {\n    var recordUndo = Blockly.Events.recordUndo;\n    Blockly.Events.recordUndo = false;\n    var sourceBlock = Blockly.mainWorkspace.getBlockById(this.blockId);\n\n    if (!sourceBlock) {\n      return;\n    }\n\n    if (redo) {\n      sourceBlock.setFieldValue(sourceBlock.getFieldValue('NAME') + \" (deleted)\", 'NAME');\n      sourceBlock.setDisabled(true);\n    } else {\n      sourceBlock.setFieldValue(sourceBlock.getFieldValue('NAME').replace(' (deleted)', ''), 'NAME');\n      sourceBlock.setDisabled(false);\n    }\n\n    Blockly.Events.recordUndo = recordUndo;\n  };\n\n  return DeleteStray;\n}(Blockly.Events.Abstract);\n\nDeleteStray.prototype.type = 'deletestray'; // dummy event to hide the element after creation\n\nvar Hide =\n/*#__PURE__*/\nfunction (_Blockly$Events$Abstr2) {\n  _inheritsLoose(Hide, _Blockly$Events$Abstr2);\n\n  function Hide(block, header) {\n    var _this2;\n\n    _this2 = _Blockly$Events$Abstr2.call(this, block) || this;\n    _this2.sourceHeaderId = header.id;\n\n    _this2.run(true);\n\n    return _this2;\n  }\n\n  var _proto2 = Hide.prototype;\n\n  _proto2.run = function run() {\n    var recordUndo = Blockly.Events.recordUndo;\n    Blockly.Events.recordUndo = false;\n    var sourceBlock = Blockly.mainWorkspace.getBlockById(this.blockId);\n    var sourceHeader = Blockly.mainWorkspace.getBlockById(this.sourceHeaderId);\n    sourceBlock.loaderId = sourceHeader.id;\n    sourceHeader.loadedByMe.push(sourceBlock.id);\n    sourceBlock.getSvgRoot().style.display = 'none';\n    Blockly.Events.recordUndo = recordUndo;\n  };\n\n  return Hide;\n}(Blockly.Events.Abstract);\n\nHide.prototype.type = 'hide';\nexport var deleteBlocksLoadedBy = function deleteBlocksLoadedBy(id, eventGroup) {\n  if (eventGroup === void 0) {\n    eventGroup = true;\n  }\n\n  Blockly.Events.setGroup(eventGroup);\n  Blockly.mainWorkspace.getTopBlocks().forEach(function (block) {\n    if (block.loaderId === id) {\n      if (isProcedure(block.type)) {\n        if (block.getFieldValue('NAME').indexOf('deleted') < 0) {\n          Blockly.Events.fire(new DeleteStray(block));\n        }\n      } else {\n        block.dispose();\n      }\n    }\n  });\n  Blockly.Events.setGroup(false);\n};\nexport var fixArgumentAttribute = function fixArgumentAttribute(xml) {\n  Array.from(xml.getElementsByTagName('arg')).forEach(function (o) {\n    if (o.hasAttribute('varid')) o.setAttribute('varId', o.getAttribute('varid'));\n  });\n};\nexport var addDomAsBlock = function addDomAsBlock(blockXml) {\n  if (blockXml.tagName === 'variables') {\n    return Blockly.Xml.domToVariables(blockXml, Blockly.mainWorkspace);\n  }\n\n  backwardCompatibility(blockXml);\n  var blockType = blockXml.getAttribute('type');\n\n  if (isMainBlock(blockType)) {\n    Blockly.mainWorkspace.getTopBlocks().filter(function (b) {\n      return b.type === blockType;\n    }).forEach(function (b) {\n      return b.dispose();\n    });\n  }\n\n  if (isProcedure(blockType)) {\n    fixArgumentAttribute(blockXml);\n  }\n\n  return Blockly.Xml.domToBlock(blockXml, Blockly.mainWorkspace);\n};\n/* const replaceDeletedBlock = block => {\n    const procedureName = block.getFieldValue('NAME');\n    const oldProcedure = Blockly.Procedures.getDefinition(`${procedureName} (deleted)`, Blockly.mainWorkspace);\n    if (oldProcedure) {\n        const { recordUndo } = Blockly.Events;\n        Blockly.Events.recordUndo = false;\n        const f = block.getField('NAME');\n        // eslint-disable-next-line no-underscore-dangle\n        f.text_ = `${procedureName} (deleted)`;\n        oldProcedure.dispose();\n        block.setFieldValue(`${procedureName}`, 'NAME');\n        Blockly.Events.recordUndo = recordUndo;\n    }\n}; */\n\nexport var recoverDeletedBlock = function recoverDeletedBlock(block) {\n  var recordUndo = Blockly.Events.recordUndo;\n  Blockly.Events.recordUndo = false;\n  block.setFieldValue(block.getFieldValue('NAME').replace(' (deleted)', ''), 'NAME');\n  block.setDisabled(false);\n  Blockly.Events.recordUndo = recordUndo;\n};\n\nvar addDomAsBlockFromHeader = function addDomAsBlockFromHeader(blockXml\n/* , header = null */\n) {\n  // const oldVars = [...Blockly.mainWorkspace.variableList];\n  var block = Blockly.Xml.domToBlock(blockXml, Blockly.mainWorkspace);\n  /* Blockly.mainWorkspace.variableList = Blockly.mainWorkspace.variableList.filter(v => {\n      if (oldVars.indexOf(v) >= 0) {\n          return true;\n      }\n      header.loadedVariables.push(v);\n      return false;\n  });\n  replaceDeletedBlock(block);\n  Blockly.Events.fire(new Hide(block, header)); */\n\n  return block;\n};\n\nvar processLoaders = function processLoaders(xml, header) {\n  if (header === void 0) {\n    header = null;\n  }\n\n  var promises = [];\n  Array.from(xml.children).forEach(function (block) {\n    if (block.getAttribute('type') === 'loader') {\n      block.remove();\n      var loader = header ? addDomAsBlockFromHeader(block, header) : Blockly.Xml.domToBlock(block, Blockly.mainWorkspace);\n      promises.push(loadRemote(loader)); // eslint-disable-line no-use-before-define\n    }\n  });\n  return promises;\n};\n\nexport var addLoadersFirst = function addLoadersFirst(xml, header) {\n  if (header === void 0) {\n    header = null;\n  }\n\n  return new Promise(function (resolve, reject) {\n    var promises = processLoaders(xml, header);\n\n    if (promises.length) {\n      Promise.all(promises).then(resolve, reject);\n    } else {\n      resolve([]);\n    }\n  });\n};\n\nvar loadBlocksFromHeader = function loadBlocksFromHeader(blockStr, header) {\n  if (blockStr === void 0) {\n    blockStr = '';\n  }\n\n  return new Promise(function (resolve, reject) {\n    var xml;\n\n    try {\n      xml = Blockly.Xml.textToDom(blockStr);\n    } catch (e) {\n      reject(translate('Unrecognized file format.'));\n    }\n\n    try {\n      if (xml.hasAttribute('collection') && xml.getAttribute('collection') === 'true') {\n        var recordUndo = Blockly.Events.recordUndo;\n        Blockly.Events.recordUndo = false;\n        addLoadersFirst(xml, header).then(function () {\n          Array.from(xml.children).filter(function (block) {\n            return block.getAttribute('type') === 'tick_analysis' || isProcedure(block.getAttribute('type'));\n          }).forEach(function (block) {\n            return addDomAsBlockFromHeader(block, header);\n          });\n          Blockly.Events.recordUndo = recordUndo;\n          resolve();\n        }, function (e) {\n          Blockly.Events.recordUndo = recordUndo;\n          reject(e);\n        });\n      } else {\n        reject(translate('Remote blocks to load must be a collection.'));\n      }\n    } catch (e) {\n      reject(translate('Unable to load the block file.'));\n    }\n  });\n};\n\nexport var loadRemote = function loadRemote(blockObj) {\n  return new Promise(function (resolve, reject) {\n    var url = blockObj.getFieldValue('URL');\n\n    if (url.indexOf('http') !== 0) {\n      url = \"http://\" + url;\n    }\n\n    if (!url.match(/[^/]*\\.[a-zA-Z]{3}$/) && url.slice(-1)[0] !== '/') {\n      reject(translate('Target must be an xml file'));\n    } else {\n      if (url.slice(-1)[0] === '/') {\n        url += 'index.xml';\n      }\n\n      var isNew = true;\n      getTopBlocksByType('loader').forEach(function (block) {\n        if (block.id !== blockObj.id && block.url === url) {\n          isNew = false;\n        }\n      });\n\n      if (!isNew) {\n        disable(blockObj);\n        reject(translate('This url is already loaded'));\n      } else {\n        $.ajax({\n          type: 'GET',\n          url: url\n        }).fail(function (e) {\n          if (e.status) {\n            reject(Error(translate('An error occurred while trying to load the url') + \": \" + e.status + \" \" + e.statusText));\n          } else {\n            reject(Error(translate('Make sure \\'Access-Control-Allow-Origin\\' exists in the response from the server')));\n          }\n\n          deleteBlocksLoadedBy(blockObj.id);\n        }).done(function (xml) {\n          loadBlocksFromHeader(xml, blockObj).then(function () {\n            enable(blockObj);\n            blockObj.url = url; // eslint-disable-line no-param-reassign\n\n            resolve(blockObj);\n          }, reject);\n        });\n      }\n    }\n  });\n};\nexport var hideInteractionsFromBlockly = function hideInteractionsFromBlockly(callback) {\n  Blockly.Events.recordUndo = false;\n  callback();\n  Blockly.Events.recordUndo = true;\n};\nexport var cleanBeforeExport = function cleanBeforeExport(xml) {\n  Array.from(xml.children).forEach(function (blockDom) {\n    var blockId = blockDom.getAttribute('id');\n    if (!blockId) return;\n    var block = Blockly.mainWorkspace.getBlockById(blockId);\n\n    if ('loaderId' in block) {\n      blockDom.remove();\n    }\n  });\n};","import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.parse-int\";\n\nvar _dec, _dec2, _dec3, _dec4, _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }\n\n/* eslint-disable no-underscore-dangle */\nimport { observable, action } from 'mobx';\nimport { translate } from '../utils/lang/i18n';\nvar FlyoutStore = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, _dec4 = action.bound, (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  function FlyoutStore() {\n    this.block_listeners = [];\n    this.block_workspaces = [];\n    this.flyout_min_width = 400;\n\n    _initializerDefineProperty(this, \"flyout_content\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"flyout_width\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"is_visible\", _descriptor3, this);\n  }\n\n  var _proto = FlyoutStore.prototype;\n\n  /**\n   * Parses XML contents passed by Blockly.Toolbox. Supports all default\n   * Blockly.Flyout elements i.e. <block>, <label>, <button> in their\n   * original format, e.g. <label text=\"Hello World\" />\n   * @param {Element[]} xml_list list of XML nodes\n   * @memberof FlyoutStore\n   */\n  _proto.setContents = function setContents(xml_list) {\n    var _this$flyout_content;\n\n    var processed_xml = xml_list;\n    this.block_listeners.forEach(function (listener) {\n      return Blockly.unbindEvent_(listener);\n    });\n    this.block_workspaces.forEach(function (workspace) {\n      return workspace.dispose();\n    });\n    this.block_listeners = [];\n    this.block_workspaces = [];\n\n    if (xml_list.type === 'search') {\n      var blocks = xml_list.blocks;\n      var no_result = !blocks.length;\n      processed_xml = [];\n\n      if (no_result) {\n        var label = document.createElement('label');\n        label.setAttribute('text', translate('No Block Found'));\n        processed_xml.push(label);\n      } else {\n        var _label = document.createElement('label');\n\n        _label.setAttribute('text', translate('Result(s)'));\n\n        processed_xml.push(_label);\n      }\n\n      processed_xml = processed_xml.concat(blocks);\n    }\n\n    this.flyout_content = observable([]);\n\n    (_this$flyout_content = this.flyout_content).push.apply(_this$flyout_content, processed_xml);\n\n    this.setFlyoutWidth(processed_xml);\n    this.setVisibility(true);\n  }\n  /**\n   * Sets whether the flyout is visible or not.\n   * @param {boolean} is_visible\n   * @memberof FlyoutStore\n   */\n  ;\n\n  _proto.setVisibility = function setVisibility(is_visible) {\n    this.is_visible = is_visible;\n\n    if (!is_visible) {\n      this.flyout_content = observable([]);\n    }\n  }\n  /**\n   * Intialises a workspace unique to the passed block_node\n   * @param {Element} el_block_workspace Element where Blockly.Workspace will be mounted on\n   * @param {Element} block_node DOM of a Blockly.Block\n   * @memberof FlyoutStore\n   */\n  ;\n\n  _proto.initBlockWorkspace = function initBlockWorkspace(el_block_workspace, block_node) {\n    var workspace = Blockly.inject(el_block_workspace, {\n      css: false,\n      media: __webpack_public_path__ + \"media/\",\n      // eslint-disable-line\n      move: {\n        scrollbars: false,\n        drag: true,\n        wheel: false\n      },\n      sounds: false\n    });\n    workspace.isFlyout = true;\n    workspace.targetWorkspace = Blockly.derivWorkspace;\n    var block = Blockly.Xml.domToBlock(block_node, workspace);\n    block.isInFlyout = true; // Some blocks have hats, consider their height.\n\n    var extra_spacing = block.startHat_ ? Blockly.BlockSvg.START_HAT_HEIGHT : 0;\n    var block_workspace_height = Number.parseInt(block_node.getAttribute('height')) + extra_spacing + 10; // Update block workspace widths to accommodate block widths.\n\n    el_block_workspace.style.height = block_workspace_height + \"px\";\n    el_block_workspace.style.width = this.flyout_width - 55 + \"px\"; // Move block away from side so it's displayed completely.\n\n    var dx = 1;\n    var dy = 5 + extra_spacing;\n    block.moveBy(dx, dy); // Use original Blockly flyout functionality to create block on drag.\n\n    var blockly_flyout = Blockly.derivWorkspace.toolbox_.flyout_;\n    this.block_listeners.push(Blockly.bindEventWithChecks_(block.getSvgRoot(), 'mousedown', null, function (event) {\n      blockly_flyout.blockMouseDown_(block)(event);\n    }));\n    this.block_workspaces.push(workspace);\n    this.block_workspaces.forEach(Blockly.svgResize);\n  }\n  /**\n   * Walks through xmlList and finds width of the longest block while setting\n   * height and width (in workspace pixels) attributes on each of the block nodes.\n   * @param {Element[]} xmlList\n   * @memberof FlyoutStore\n   */\n  ;\n\n  _proto.setFlyoutWidth = function setFlyoutWidth(xmlList) {\n    var longest_block_width = 0;\n    xmlList.forEach(function (node) {\n      var tag_name = node.tagName.toUpperCase();\n\n      if (tag_name === Blockly.Xml.NODE_BLOCK) {\n        var block_hw = Blockly.Block.getDimensions(node);\n        node.setAttribute('width', block_hw.width);\n        node.setAttribute('height', block_hw.height);\n        longest_block_width = Math.max(longest_block_width, block_hw.width);\n      }\n    });\n    this.flyout_width = Math.max(this.flyout_min_width, longest_block_width + 60);\n  };\n\n  return FlyoutStore;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"flyout_content\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"flyout_width\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return this.flyout_min_width;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"is_visible\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setContents\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"setContents\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setVisibility\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \"setVisibility\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"initBlockWorkspace\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \"initBlockWorkspace\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setFlyoutWidth\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \"setFlyoutWidth\"), _class.prototype)), _class));\nexport { FlyoutStore as default };","import \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"regenerator-runtime/runtime\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _temp;\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }\n\nimport filesaver from 'file-saver';\nimport { observable, action, computed } from 'mobx';\nimport { createErrorAndEmit } from '../utils/error';\nimport { observer as globalObserver } from '../utils/observer';\nimport { strategyHasValidTradeTypeCategory, addLoadersFirst, cleanUpOnLoad, fixCollapsedBlocks, addDomAsBlock, backwardCompatibility, fixArgumentAttribute, removeUnavailableMarkets, cleanBeforeExport } from '../scratch/utils';\nimport { translate } from '../utils/tools';\nvar ToolbarStore = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, _dec4 = action.bound, _dec5 = action.bound, _dec6 = action.bound, _dec7 = action.bound, _dec8 = action.bound, _dec9 = action.bound, _dec10 = action.bound, _dec11 = action.bound, _dec12 = action.bound, _dec13 = action.bound, _dec14 = action.bound, _dec15 = action.bound, _dec16 = action.bound, (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  function ToolbarStore(ws) {\n    var _this = this;\n\n    _initializerDefineProperty(this, \"has_flyout_open\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"load_modal_open\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"save_modal_open\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"saveload_type\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"file_name\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"onStartClick\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"onSaveLoadTypeChange\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"onResetClick\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"onBrowseClick\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"onLoadClick\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"handleFileChange\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"closeLoadModal\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"onSaveClick\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"onConfirmSave\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"closeSaveModal\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"onGoogleDriveClick\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"onUndoClick\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"onRedoClick\", _descriptor18, this);\n\n    _initializerDefineProperty(this, \"onZoomInClick\", _descriptor19, this);\n\n    _initializerDefineProperty(this, \"onZoomOutClick\", _descriptor20, this);\n\n    _initializerDefineProperty(this, \"onSortClick\", _descriptor21, this);\n\n    this.zoomOnPlusMinus = function (zoomIn) {\n      var metrics = Blockly.derivWorkspace.getMetrics();\n\n      if (zoomIn) {\n        Blockly.derivWorkspace.zoom(metrics.viewWidth / 2, metrics.viewHeight / 2, 1);\n      } else {\n        Blockly.derivWorkspace.zoom(metrics.viewWidth / 2, metrics.viewHeight / 2, -1);\n      }\n    };\n\n    this.loadBlocks = function (xml, dropEvent) {\n      if (dropEvent === void 0) {\n        dropEvent = {};\n      }\n\n      if (!strategyHasValidTradeTypeCategory(xml)) return;\n      if (_this.marketsWereRemoved(xml)) return;\n      var variables = xml.getElementsByTagName('variables');\n\n      if (variables.length > 0) {\n        Blockly.Xml.domToVariables(variables[0], Blockly.mainWorkspace);\n      }\n\n      Blockly.Events.setGroup('load');\n      addLoadersFirst(xml).then(function (loaders) {\n        var addedBlocks = [].concat(loaders, Array.from(xml.children).map(function (block) {\n          return addDomAsBlock(block);\n        }).filter(function (b) {\n          return b;\n        }));\n        cleanUpOnLoad(addedBlocks, dropEvent);\n        fixCollapsedBlocks();\n        globalObserver.emit('ui.log.success', translate('Blocks are loaded successfully'));\n      }, function (e) {\n        throw e;\n      });\n    };\n\n    this.loadWorkspace = function (xml) {\n      if (!strategyHasValidTradeTypeCategory(xml)) return;\n      if (_this.marketsWereRemoved(xml)) return;\n      Blockly.Events.setGroup('load');\n      Blockly.mainWorkspace.clear();\n      Array.from(xml.children).forEach(function (block) {\n        backwardCompatibility(block);\n      });\n      fixArgumentAttribute(xml);\n      Blockly.Xml.domToWorkspace(xml, Blockly.mainWorkspace);\n      addLoadersFirst(xml).then(function () {\n        fixCollapsedBlocks();\n        Blockly.Events.setGroup(false);\n        globalObserver.emit('ui.log.success', translate('Blocks are loaded successfully'));\n      }, function (e) {\n        Blockly.Events.setGroup(false);\n        throw e;\n      });\n    };\n\n    this.marketsWereRemoved = function (xml) {\n      if (!Array.from(xml.children).every(function (block) {\n        return !removeUnavailableMarkets(block);\n      })) {\n        if (window.trackJs) {\n          trackJs.track('Invalid financial market');\n        }\n\n        alert('This strategy is not available in your country');\n        return true;\n      }\n\n      return false;\n    };\n\n    this.readFile = function (f, dropEvent) {\n      if (dropEvent === void 0) {\n        dropEvent = {};\n      }\n\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        return _this.load(e.target.result, dropEvent);\n      };\n\n      reader.readAsText(f);\n    };\n\n    this.ws = ws;\n  }\n\n  var _proto = ToolbarStore.prototype;\n\n  /* eslint-disable class-methods-use-this */\n  _proto.load = function load(blockStr, dropEvent) {\n    if (blockStr === void 0) {\n      blockStr = '';\n    }\n\n    if (dropEvent === void 0) {\n      dropEvent = {};\n    }\n\n    var unrecognisedMsg = function unrecognisedMsg() {\n      return translate('Unrecognized file format');\n    };\n\n    try {\n      var xmlDoc = new DOMParser().parseFromString(blockStr, 'application/xml');\n\n      if (xmlDoc.getElementsByTagName('parsererror').length) {\n        throw new Error();\n      }\n    } catch (err) {\n      throw createErrorAndEmit('FileLoad', unrecognisedMsg());\n    }\n\n    var xml;\n\n    try {\n      xml = Blockly.Xml.textToDom(blockStr);\n    } catch (e) {\n      throw createErrorAndEmit('FileLoad', unrecognisedMsg());\n    }\n\n    var blocklyXml = xml.querySelectorAll('block');\n\n    if (!blocklyXml.length) {\n      throw createErrorAndEmit('FileLoad', 'XML file contains unsupported elements. Please check or modify file.');\n    }\n\n    blocklyXml.forEach(function (block) {\n      var blockType = block.getAttribute('type');\n\n      if (!Object.keys(Blockly.Blocks).includes(blockType)) {\n        throw createErrorAndEmit('FileLoad', 'XML file contains unsupported elements. Please check or modify file');\n      }\n    });\n\n    try {\n      if (xml.hasAttribute('collection') && xml.getAttribute('collection') === 'true') {\n        this.loadBlocks(xml, dropEvent);\n      } else {\n        this.loadWorkspace(xml);\n      }\n    } catch (e) {\n      throw createErrorAndEmit('FileLoad', translate('Unable to load the block file'));\n    }\n  };\n\n  _createClass(ToolbarStore, [{\n    key: \"openLoadModal\",\n    get: function get() {\n      return this.load_modal_open;\n    }\n  }, {\n    key: \"openSaveModal\",\n    get: function get() {\n      return this.save_modal_open;\n    }\n  }]);\n\n  return ToolbarStore;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"has_flyout_open\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"load_modal_open\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"save_modal_open\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"saveload_type\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 'local';\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"file_name\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 'binary-bot';\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"onStartClick\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this2 = this;\n\n    return function () {\n      _this2.has_flyout_open = !_this2.has_flyout_open;\n\n      if (_this2.has_flyout_open) {\n        Blockly.derivWorkspace.toolbox_.removeStyle('hidden');\n      } else {\n        Blockly.derivWorkspace.toolbox_.addStyle('hidden');\n      }\n    };\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"onSaveLoadTypeChange\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this3 = this;\n\n    return function (e) {\n      var value = e.target.value;\n      _this3.saveload_type = value;\n    };\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"onResetClick\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return (\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var workspace;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                workspace = Blockly.derivWorkspace; // eslint-disable-next-line\n\n                Blockly.Events.setGroup('reset');\n                workspace.clear();\n                Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(workspace.blocksXmlStr), workspace);\n                Blockly.Events.setGroup(false);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))\n    );\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"onBrowseClick\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this4 = this;\n\n    return function () {\n      _this4.load_modal_open = true;\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"onLoadClick\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this5 = this;\n\n    return function () {\n      if (_this5.saveload_type === 'google-drive') {// TO DO\n      } else if (_this5.saveload_type === 'local') {\n        var upload = document.getElementById('files');\n        upload.click();\n      }\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"handleFileChange\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this6 = this;\n\n    return function (e) {\n      var files, dropEvent;\n\n      if (e.type === 'drop') {\n        e.stopPropagation();\n        e.preventDefault();\n        files = e.dataTransfer.files;\n        dropEvent = e;\n      } else {\n        files = e.target.files;\n      }\n\n      files = Array.from(files);\n      files.forEach(function (file) {\n        if (file.type.match('text/xml')) {\n          _this6.readFile(file, dropEvent);\n        } else {\n          globalObserver.emit('ui.log.info', translate('File is not supported:') + \" \" + file.name);\n        }\n      });\n      e.target.value = '';\n\n      _this6.closeLoadModal();\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"closeLoadModal\", [_dec7], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this7 = this;\n\n    return function () {\n      _this7.load_modal_open = false;\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"onSaveClick\", [_dec8], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this8 = this;\n\n    return function () {\n      _this8.save_modal_open = true;\n    };\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"onConfirmSave\", [_dec9], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this9 = this;\n\n    return function () {\n      if (_this9.saveload_type === 'google-drive') {// TO DO\n      } else if (_this9.saveload_type === 'local') {\n        var file_name = document.getElementById('save-filename').value || 'binary-bot';\n        var xml = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);\n        cleanBeforeExport(xml);\n        var data = Blockly.Xml.domToPrettyText(xml);\n        var blob = new Blob([data], {\n          type: 'text/xml;charset=utf-8'\n        });\n        filesaver.saveAs(blob, file_name);\n      }\n\n      _this9.closeSaveModal();\n    };\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"closeSaveModal\", [_dec10], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this10 = this;\n\n    return function () {\n      _this10.save_modal_open = false;\n    };\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"onGoogleDriveClick\", [_dec11], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this11 = this;\n\n    return function () {\n      var symbol = _this11.ws.activeSymbols({\n        skip_cache_update: true\n      }); // eslint-disable-next-line\n\n\n      console.log(symbol);\n    };\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"onUndoClick\", [_dec12], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return function () {\n      Blockly.Events.setGroup('undo');\n      Blockly.mainWorkspace.undo();\n      Blockly.Events.setGroup(false);\n    };\n  }\n}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"onRedoClick\", [_dec13], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return function () {\n      Blockly.mainWorkspace.undo(true);\n    };\n  }\n}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, \"onZoomInClick\", [_dec14], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this12 = this;\n\n    return function () {\n      _this12.zoomOnPlusMinus(true);\n    };\n  }\n}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, \"onZoomOutClick\", [_dec15], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this13 = this;\n\n    return function () {\n      _this13.zoomOnPlusMinus(false);\n    };\n  }\n}), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, \"onSortClick\", [_dec16], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return function () {\n      Blockly.Events.setGroup(true);\n      var topBlocks = Blockly.derivWorkspace.getTopBlocks(true);\n      var cursorY = 0;\n      topBlocks.forEach(function (block) {\n        if (block.getSvgRoot().style.display !== 'none') {\n          var xy = block.getRelativeToSurfaceXY();\n          block.moveBy(-xy.x, cursorY - xy.y);\n          block.snapToGrid();\n          cursorY = block.getRelativeToSurfaceXY().y + block.getHeightWidth().height + Blockly.BlockSvg.MIN_BLOCK_Y;\n        }\n      });\n      Blockly.Events.setGroup(false); // Fire an event to allow scrollbars to resize.\n\n      Blockly.derivWorkspace.resizeContents();\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"openLoadModal\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"openLoadModal\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"openSaveModal\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"openSaveModal\"), _class.prototype)), _class));\nexport { ToolbarStore as default };"],"sourceRoot":""}