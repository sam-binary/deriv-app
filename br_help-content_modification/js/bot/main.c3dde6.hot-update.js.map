{"version":3,"sources":["webpack://deriv-bot/./src/stores/flyout-store.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACE;AACE;AACL;AACO;AACF;;AAE9C;;AAEA,4EAA4E,yBAAyB,0CAA0C,yLAAyL,EAAE;;AAE1U,uFAAuF,eAAe,iDAAiD,6BAA6B,EAAE,EAAE,qCAAqC,yCAAyC,2CAA2C,sBAAsB,EAAE,wEAAwE,kDAAkD,EAAE,QAAQ,8CAA8C,yEAAyE,8BAA8B,EAAE,mCAAmC,+CAA+C,aAAa,EAAE,aAAa;;AAEltB,yDAAyD,iRAAiR;;AAE1U;AAC0C;AACK;AAC/C,0BAA0B,2CAAM,gBAAgB,2CAAM,gBAAgB,2CAAM,gBAAgB,2CAAM,gBAAgB,2CAAM;AACxH;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;;AAEA,0BAA0B;;AAE1B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,kEAAS;AAC5C;AACA,OAAO;AACP;;AAEA,oCAAoC,kEAAS;;AAE7C;AACA;;AAEA;AACA;;AAEA,0BAA0B,uDAAU;;AAEpC;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4BAA4B,uDAAU;AACtC;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,qBAAuB;AACpC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;AACA;AACA;AACA,4BAA4B;;AAE5B;AACA,yGAAyG;;AAEzG;AACA,mEAAmE;;AAEnE;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,CAAC,0FAA0F,+CAAU;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,+EAA+E,+CAAU;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,6EAA6E,+CAAU;AACxF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,mFAAmF,+CAAU;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","file":"main.c3dde6.hot-update.js","sourcesContent":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.parse-int\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }\n\n/* eslint-disable no-underscore-dangle */\nimport { observable, action } from 'mobx';\nimport { translate } from '../utils/lang/i18n';\nvar FlyoutStore = (_dec = action.bound, _dec2 = action.bound, _dec3 = action.bound, _dec4 = action.bound, _dec5 = action.bound, (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  function FlyoutStore() {\n    this.block_listeners = [];\n    this.block_workspaces = [];\n    this.flyout_min_width = 400;\n\n    _initializerDefineProperty(this, \"flyout_content\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"flyout_width\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"is_visible\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"is_search_flyout\", _descriptor4, this);\n  }\n\n  var _proto = FlyoutStore.prototype;\n\n  /**\n   * Parses XML contents passed by Blockly.Toolbox. Supports all default\n   * Blockly.Flyout elements i.e. <block>, <label>, <button> in their\n   * original format, e.g. <label text=\"Hello World\" />\n   * @param {Element[]} xml_list list of XML nodes\n   * @memberof FlyoutStore\n   */\n  _proto.setContents = function setContents(xml_list) {\n    var _this$flyout_content;\n\n    console.log(xml_list); // eslint-disable-line\n\n    var processed_xml = xml_list;\n    this.block_listeners.forEach(function (listener) {\n      return Blockly.unbindEvent_(listener);\n    });\n    this.block_workspaces.forEach(function (workspace) {\n      return workspace.dispose();\n    });\n    this.block_listeners = [];\n    this.block_workspaces = [];\n\n    if (this.is_search_flyout) {\n      var no_result = !xml_list.length;\n      processed_xml = [];\n\n      if (no_result) {\n        var label = document.createElement('label');\n        label.setAttribute('text', translate('No Block Found'));\n        processed_xml.push(label);\n      } else {\n        var _label = document.createElement('label');\n\n        _label.setAttribute('text', translate('Result(s)'));\n\n        processed_xml.push(_label);\n      }\n\n      processed_xml = processed_xml.concat(xml_list);\n    }\n\n    this.flyout_content = observable([]);\n\n    (_this$flyout_content = this.flyout_content).push.apply(_this$flyout_content, processed_xml);\n\n    this.setFlyoutWidth(processed_xml);\n    this.setVisibility(true);\n  }\n  /**\n   * Sets whether the flyout is visible or not.\n   * @param {boolean} is_visible\n   * @memberof FlyoutStore\n   */\n  ;\n\n  _proto.setVisibility = function setVisibility(is_visible) {\n    this.is_visible = is_visible;\n\n    if (!is_visible) {\n      this.flyout_content = observable([]);\n    }\n  }\n  /**\n   * Sets whether the flyout is search or not.\n   * @param {boolean} is_visible\n   * @memberof FlyoutStore\n   */\n  ;\n\n  _proto.setIsSearchFlyout = function setIsSearchFlyout(is_search) {\n    this.is_search = is_search;\n  }\n  /**\n   * Intialises a workspace unique to the passed block_node\n   * @param {Element} el_block_workspace Element where Blockly.Workspace will be mounted on\n   * @param {Element} block_node DOM of a Blockly.Block\n   * @memberof FlyoutStore\n   */\n  ;\n\n  _proto.initBlockWorkspace = function initBlockWorkspace(el_block_workspace, block_node) {\n    var workspace = Blockly.inject(el_block_workspace, {\n      css: false,\n      media: __webpack_public_path__ + \"media/\",\n      // eslint-disable-line\n      move: {\n        scrollbars: false,\n        drag: true,\n        wheel: false\n      },\n      sounds: false\n    });\n    workspace.isFlyout = true;\n    workspace.targetWorkspace = Blockly.derivWorkspace;\n    var block = Blockly.Xml.domToBlock(block_node, workspace);\n    block.isInFlyout = true; // Some blocks have hats, consider their height.\n\n    var extra_spacing = block.startHat_ ? Blockly.BlockSvg.START_HAT_HEIGHT : 0;\n    var block_workspace_height = Number.parseInt(block_node.getAttribute('height')) + extra_spacing + 10; // Update block workspace widths to accommodate block widths.\n\n    el_block_workspace.style.height = block_workspace_height + \"px\";\n    el_block_workspace.style.width = this.flyout_width - 55 + \"px\"; // Move block away from side so it's displayed completely.\n\n    var dx = 1;\n    var dy = 5 + extra_spacing;\n    block.moveBy(dx, dy); // Use original Blockly flyout functionality to create block on drag.\n\n    var blockly_flyout = Blockly.derivWorkspace.toolbox_.flyout_;\n    this.block_listeners.push(Blockly.bindEventWithChecks_(block.getSvgRoot(), 'mousedown', null, function (event) {\n      blockly_flyout.blockMouseDown_(block)(event);\n    }));\n    this.block_workspaces.push(workspace);\n    this.block_workspaces.forEach(Blockly.svgResize);\n  }\n  /**\n   * Walks through xmlList and finds width of the longest block while setting\n   * height and width (in workspace pixels) attributes on each of the block nodes.\n   * @param {Element[]} xmlList\n   * @memberof FlyoutStore\n   */\n  ;\n\n  _proto.setFlyoutWidth = function setFlyoutWidth(xmlList) {\n    var longest_block_width = 0;\n    xmlList.forEach(function (node) {\n      var tag_name = node.tagName.toUpperCase();\n\n      if (tag_name === Blockly.Xml.NODE_BLOCK) {\n        var block_hw = Blockly.Block.getDimensions(node);\n        node.setAttribute('width', block_hw.width);\n        node.setAttribute('height', block_hw.height);\n        longest_block_width = Math.max(longest_block_width, block_hw.width);\n      }\n    });\n    this.flyout_width = Math.max(this.flyout_min_width, longest_block_width + 60);\n  };\n\n  return FlyoutStore;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"flyout_content\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"flyout_width\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return this.flyout_min_width;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"is_visible\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"is_search_flyout\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setContents\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \"setContents\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setVisibility\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \"setVisibility\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setIsSearchFlyout\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \"setIsSearchFlyout\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"initBlockWorkspace\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \"initBlockWorkspace\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"setFlyoutWidth\", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, \"setFlyoutWidth\"), _class.prototype)), _class));\nexport { FlyoutStore as default };"],"sourceRoot":""}