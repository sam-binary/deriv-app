{"version":3,"sources":["webpack://deriv-bot/./src/scratch/hooks/toolbox.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AACA;AACG;AACL;AACG;AACA;AACD;AACE;AACE;AACL;AACD;AACI;AACC;AACnB;AACO;AACsB;AACjB;AACY;AAClD;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA,kEAAkE;;AAElE;AACA;AACA,iCAAiC,mEAAS;AAC1C;AACA;AACA,iDAAiD;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,yCAAyC;AACzC,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI,+CAAM;AACV;AACA;;AAEA;AACA,+EAA+E;;AAE/E;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;;AAGL,8EAA8E;;AAE9E;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+CAA+C;;AAE/C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,GAAG,EAAE;;AAEL;AACA;AACA,GAAG;AACH,wEAAwE;;AAExE;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH,4FAA4F;;AAE5F;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA,EAAE,+CAAM;AACR;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,GAAG;AACH,uDAAuD;;AAEvD;AACA;AACA;AACA;;AAEA,EAAE,+CAAM;AACR;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,YAAY,OAAO;AACnB;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,yBAAyB;AACpC;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAA0C;;AAE1C;AACA;;AAEA,UAAU,+CAAM;AAChB,QAAQ,+CAAM;AACd;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI,+CAAM;AACV,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,gCAAgC;AACvD;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU,+CAAM;AAChB;AACA,SAAS;AACT;AACA,UAAU,+CAAM;AAChB;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,MAAM,+CAAM;AACZ;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI,iDAAQ,QAAQ,6CAAK,eAAe,gEAAS;AACjD;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAI,iDAAQ,QAAQ,6CAAK,eAAe,gEAAS;AACjD;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK,EAAE;;AAEP,oDAAoD,qBAAuB;AAC3E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,UAAU,KAAK;AACf;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;;;AAGA;AACA;;AAEA;AACA,oCAAoC,EAAE;AACtC;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,yBAAyB;AAC7B,WAAW,KAAK;AAChB;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,EAAE;;AAET;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA,OAAO;;AAEP;AACA;AACA,GAAG;AACH;AACA,E","file":"main.43be5c.hot-update.js","sourcesContent":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ArrowIcon } from '../../components/Icons.jsx';\nimport { flyout } from '../../stores';\nimport { translate } from '../../utils/lang/i18n';\n/* eslint-disable func-names, no-underscore-dangle */\n\n/**\n * Initializes the toolbox.\n */\n\nBlockly.Toolbox.prototype.init = function () {\n  var workspace = this.workspace_;\n  var svg = this.workspace_.getParentSvg();\n  /**\n   * HTML container for the Toolbox menu.\n   * @type {Element}\n   */\n\n  this.HtmlDiv = goog.dom.createDom(goog.dom.TagName.DIV, 'toolbox');\n  this.HtmlDiv.setAttribute('dir', workspace.RTL ? 'RTL' : 'LTR'); // deriv-bot: Create Toolbox header\n\n  var el_toolbox_header = goog.dom.createDom(goog.dom.TagName.DIV, 'toolbox__header');\n  var el_toolbox_title = goog.dom.createDom(goog.dom.TagName.DIV, 'toolbox__title');\n  el_toolbox_title.textContent = translate('Blocks Library');\n  el_toolbox_header.appendChild(el_toolbox_title);\n  this.HtmlDiv.appendChild(el_toolbox_header);\n  svg.parentNode.insertBefore(this.HtmlDiv, svg); // Clicking on toolbox closes popups.\n\n  Blockly.bindEventWithChecks_(this.HtmlDiv, 'mousedown', this, function (e) {\n    // Cancel any gestures in progress.\n    this.workspace_.cancelCurrentGesture();\n\n    if (Blockly.utils.isRightButton(e) || e.target === this.HtmlDiv) {\n      // Close flyout.\n      Blockly.hideChaff(false);\n    } else {\n      // Just close popups.\n      Blockly.hideChaff(true);\n    }\n\n    Blockly.Touch.clearTouchIdentifier(); // Don't block future drags.\n  },\n  /* opt_noCaptureIdentifier */\n  false,\n  /* opt_noPreventDefault */\n  true);\n  this.createFlyout_();\n  this.categoryMenu_ = new Blockly.Toolbox.CategoryMenu(this, this.HtmlDiv);\n  this.populate_(workspace.options.languageTree);\n  this.position();\n};\n/**\n * Fill the toolbox with categories and blocks.\n * @param {!Node} newTree DOM tree of blocks.\n * @private\n * deriv-bot: We don't want to `showAll` or `setSelectedItem` here (like in Scratch)\n */\n\n\nBlockly.Toolbox.prototype.populate_ = function (newTree) {\n  this.categoryMenu_.populate(newTree);\n};\n\nBlockly.Toolbox.prototype.showSearch_ = function (search_term) {\n  var flyout_content = [];\n  var all_variables = Blockly.derivWorkspace.getVariablesOfType('');\n  var all_procedures = Blockly.Procedures.allProcedures(Blockly.derivWorkspace);\n  is_search = true;\n\n  if (search_term.length <= 1) {\n    flyout.setVisibility(false);\n    return;\n  }\n\n  var _Blockly = Blockly,\n      categories_ = _Blockly.derivWorkspace.toolbox_.categoryMenu_.categories_; // eslint-disable-next-line consistent-return\n\n  var block_contents = categories_.filter(function (category) {\n    return !category.has_child_category_;\n  }).map(function (category) {\n    var contents = category.getContents();\n\n    if (typeof contents === 'string') {\n      var fnToApply = Blockly.derivWorkspace.getToolboxCategoryCallback(contents);\n      contents = fnToApply(Blockly.derivWorkspace);\n    }\n\n    var only_block_contents = contents.filter(function (content) {\n      return content.tagName.toUpperCase() === 'BLOCK';\n    });\n    return only_block_contents;\n  }).flat();\n  block_contents.forEach(function (block_content) {\n    var block_type = block_content.getAttribute('type');\n    var block = Blockly.Blocks[block_type];\n    var block_meta = block.meta instanceof Function && block.meta();\n    var block_definitions = block.definition instanceof Function && block.definition();\n\n    if (!block_meta) {\n      return;\n    } // block_name matched\n\n\n    if (block_type.toUpperCase().includes(search_term)) {\n      flyout_content.unshift(block_content);\n      return;\n    } // block_meta matched\n\n\n    var matched_meta = Object.keys(block_meta).find(function (key) {\n      return block_meta[key].toUpperCase().includes(search_term);\n    });\n\n    if (matched_meta && matched_meta.length) {\n      flyout_content.push(block_content);\n      return;\n    } // block_definition matched\n\n\n    var definition_key_to_search = /^((message)|(tooltip)|(field_dropdown$))/; // eslint-disable-next-line consistent-return\n\n    var matched_definition = Object.keys(block_definitions).filter(function (key) {\n      var definition = block_definitions[key];\n\n      if (definition_key_to_search.test(key) && definition.toUpperCase().includes(search_term)) {\n        return true;\n      }\n\n      if (definition instanceof Array) {\n        var has_dropdown_and_in_search = false; // eslint-disable-next-line consistent-return\n\n        definition.forEach(function (def) {\n          if (def.type === 'field_dropdown' && JSON.stringify(def).toUpperCase().includes(search_term)) {\n            has_dropdown_and_in_search = true;\n          }\n        });\n        return has_dropdown_and_in_search;\n      }\n\n      return false;\n    });\n\n    if (matched_definition && matched_definition.length) {\n      flyout_content.push(block_content);\n    }\n  }); // block_variable_name matched\n\n  var matched_variables = all_variables.filter(function (variable) {\n    return variable.name.toUpperCase().includes(search_term);\n  });\n  var variables_blocks = Blockly.DataCategory.search(matched_variables); // eslint-disable-next-line consistent-return\n\n  var uniqueVarBlocks = variables_blocks.filter(function (variable_block) {\n    return flyout_content.indexOf(variable_block) === -1;\n  });\n\n  if (uniqueVarBlocks && uniqueVarBlocks.length) {\n    flyout_content.push.apply(flyout_content, uniqueVarBlocks);\n  } // block_procedure_name matched\n\n\n  var searched_procedures = {\n    '0': [],\n    '1': []\n  };\n  var procedures_callnoreturn = all_procedures[0];\n  var procedures_callreturn = all_procedures[1];\n  Object.keys(procedures_callnoreturn).forEach(function (key) {\n    var procedure = procedures_callnoreturn[key];\n\n    if (procedure[0].toUpperCase().includes(search_term)) {\n      searched_procedures['0'].push(procedure);\n    }\n  });\n  Object.keys(procedures_callreturn).forEach(function (key) {\n    var procedure = procedures_callreturn[key];\n\n    if (procedure[0].toUpperCase().includes(search_term)) {\n      searched_procedures['1'].push(procedure);\n    }\n  });\n  var procedures_blocks = Blockly.Procedures.populateDynamicProcedures(searched_procedures); // eslint-disable-next-line consistent-return\n\n  var uniqueProceBlocks = procedures_blocks.filter(function (procedure_block) {\n    return flyout_content.indexOf(procedure_block) === -1;\n  });\n\n  if (uniqueProceBlocks.length) {\n    flyout_content.push.apply(flyout_content, uniqueProceBlocks);\n  }\n\n  flyout.setContents(flyout_content, true);\n};\n/**\n * deriv-bot: Show blocks for a specific category in flyout\n * @private\n */\n\n\nBlockly.Toolbox.prototype.showCategory_ = function (category_id) {\n  var selected_category = this.categoryMenu_.categories_.find(function (category) {\n    return category.id_ === category_id;\n  });\n  var flyout_content = selected_category.getContents(); // Dynamic categories\n\n  if (typeof flyout_content === 'string') {\n    var fnToApply = this.workspace_.getToolboxCategoryCallback(flyout_content);\n    flyout_content = fnToApply(this.workspace_);\n  }\n\n  flyout.setContents(flyout_content);\n};\n/**\n * Used to determine the css classes for the menu item for this category\n * based on its current state.\n * @private\n * @param {boolean=} selected Indication whether the category is currently selected.\n * @return {string} The css class names to be applied, space-separated.\n * deriv-bot: Custom class names\n */\n\n\nBlockly.Toolbox.Category.prototype.getMenuItemClassName_ = function (selected) {\n  var classNames = ['toolbox__item', \"toolbox__category--\" + this.id_];\n\n  if (selected) {\n    classNames.push('toolbox__category--selected');\n  }\n\n  return classNames.join(' ');\n};\n/**\n * Opens the selected category\n * deriv-bot: Category-specific flyouts + removed opt_shouldScroll\n * @param {Blockly.Toolbox.Category} item The category to select.\n */\n\n\nBlockly.Toolbox.prototype.setSelectedItem = function (item) {\n  var _this = this;\n\n  var category_item = item;\n\n  if (category_item === 'search') {\n    if (this.selectedItem_) {\n      this.selectedItem_.setSelected(false);\n    }\n\n    this.selectedItem_ = null;\n    this.showCategory_('search');\n    return;\n  }\n\n  if (this.selectedItem_) {\n    // They selected a different category but one was already open.  Close it.\n    this.selectedItem_.setSelected(false); // Selecting the same category will close it.\n\n    if (category_item && !category_item.is_category_return_ && !category_item.has_child_category_ && this.selectedItem_.id_ === item.id_) {\n      this.selectedItem_ = null;\n\n      if (flyout.is_visible) {\n        flyout.setVisibility(false);\n      }\n\n      return;\n    }\n  }\n\n  this.selectedItem_ = item;\n\n  if (!item) {\n    flyout.setVisibility(false);\n  } else {\n    var getCategoryTree = function getCategoryTree(parent_name, parent_id, colour, children) {\n      var xml_document = document.implementation.createDocument(null, null, null);\n      var el_xml = xml_document.createElement('xml');\n      var parent_category = xml_document.createElement('category');\n      parent_category.setAttribute('name', parent_name);\n      parent_category.setAttribute('id', parent_id);\n      parent_category.setAttribute('is_category_return', true);\n      parent_category.setAttribute('colour', colour);\n      var el_separator = xml_document.createElement('sep');\n      var category_nodes = [parent_category, el_separator].concat(Array.from(children));\n      category_nodes.forEach(function (childNode) {\n        return el_xml.appendChild(childNode);\n      });\n      xml_document.appendChild(el_xml);\n      return el_xml;\n    };\n\n    if (this.selectedItem_.is_category_return_) {\n      // Go up a level if this is a return category\n      var findCategory = function findCategory(category_collection) {\n        // Finds a category based on `this.selectedItem_.id_` in the given `category_collection`\n        for (var i = 0; i < category_collection.length; i++) {\n          var el_category = category_collection[i];\n\n          var is_correct_child = el_category.tagName.toUpperCase() === 'CATEGORY' && el_category.getAttribute('id') === _this.selectedItem_.id_;\n\n          if (is_correct_child) {\n            return el_category;\n          }\n\n          var category = findCategory(el_category.children);\n\n          if (category) {\n            return category;\n          }\n        }\n\n        return null;\n      };\n\n      var initial_toolbox_xml = this.workspace_.initial_toolbox_xml;\n      var toolboxDom = Blockly.Xml.textToDom(initial_toolbox_xml);\n      var selected_category = findCategory(toolboxDom.children);\n\n      if (selected_category) {\n        var el_parent = selected_category.parentElement;\n\n        if (el_parent.tagName === 'xml') {\n          flyout.setVisibility(false);\n          this.workspace_.updateToolbox(initial_toolbox_xml);\n        } else {\n          var newTree = getCategoryTree(el_parent.getAttribute('name'), el_parent.getAttribute('id'), el_parent.getAttribute('colour'), el_parent.children);\n          flyout.setVisibility(false);\n          this.workspace_.updateToolbox(newTree);\n        }\n      }\n    } else if (this.selectedItem_.has_child_category_) {\n      // Show categories in toolbox that are descendants of `this.selectedItem_`\n      var _newTree = getCategoryTree(this.selectedItem_.name_, this.selectedItem_.id_, this.selectedItem_.colour_, this.selectedItem_.contents_);\n\n      flyout.setVisibility(false);\n      this.workspace_.updateToolbox(_newTree);\n    } else {\n      // Show blocks that belong to this category.\n      this.selectedItem_.setSelected(true);\n      this.showCategory_(this.selectedItem_.id_);\n    }\n  }\n};\n/**\n * Update the flyout's contents without closing it.  Should be used in response\n * to a change in one of the dynamic categories, such as variables or\n * procedures.\n * deriv-bot: Calls showAll() in Scratch, we don't want that.\n */\n\n\nBlockly.Toolbox.prototype.refreshSelection = function () {};\n/**\n * Create the DOM for a category in the toolbox.\n * deriv-bot: Custom class names + injection of description\n */\n\n\nBlockly.Toolbox.Category.prototype.createDom = function () {\n  var toolbox = this.parent_.parent_;\n  var el_item = goog.dom.createDom('div', this.getMenuItemClassName_());\n  this.item_ = el_item;\n\n  if (this.is_category_return_) {\n    var el_return_arrow = goog.dom.createDom('div', 'toolbox__category-arrow toolbox__category-arrow--back');\n    ReactDOM.render(React.createElement(ArrowIcon, {\n      className: \"arrow\"\n    }), el_return_arrow);\n    el_item.appendChild(el_return_arrow);\n  } else {\n    var el_colour = goog.dom.createDom('div', 'toolbox__category-colour');\n    el_item.appendChild(el_colour);\n  }\n\n  var el_label = goog.dom.createDom('div', 'toolbox__label', this.name_);\n  var el_toolbox_text = goog.dom.createDom('div', 'toolbox__category-text');\n  this.label_ = el_label;\n  el_toolbox_text.appendChild(el_label);\n\n  if (this.description_) {\n    var el_description = goog.dom.createDom('div', 'toolbox__description', this.description_);\n    el_toolbox_text.appendChild(el_description);\n  }\n\n  el_item.appendChild(el_toolbox_text);\n\n  if (this.has_child_category_) {\n    var el_category_arrow = goog.dom.createDom('div', 'toolbox__category-arrow toolbox__category-arrow--open');\n    ReactDOM.render(React.createElement(ArrowIcon, {\n      className: \"arrow\"\n    }), el_category_arrow);\n    el_item.appendChild(el_category_arrow);\n  } else if (this.iconURI_) {\n    // If category has iconURI attribute, it refers to an entry in our bot-sprite.svg\n    var el_icon = goog.dom.createDom('div', {\n      class: 'toolbox__icon'\n    }); // eslint-disable-next-line\n\n    el_icon.innerHTML = \"<svg><use xlink:href=\\\"\" + __webpack_public_path__ + \"bot-sprite.svg#\" + this.iconURI_ + \"\\\"></use></svg>\";\n    el_item.appendChild(el_icon);\n  }\n\n  this.parentHtml_.appendChild(el_item);\n  Blockly.bindEvent_(el_item, 'mouseup', toolbox, toolbox.setSelectedItemFactory(this));\n};\n/**\n * Get the contents of this category.\n * @return {!Array|string} xmlList List of blocks to show, or a string with the\n * name of a custom category.\n * deriv-bot: Use this.dynamic_ rather than this.custom_ for dynamic categories\n * if we specify this.custom_, parseContents() is never called (see core/toolbox.js),\n * so we don't get extra props we require. See parseContents_\n */\n\n\nBlockly.Toolbox.Category.prototype.getContents = function () {\n  return this.custom_ || this.dynamic_ || this.contents_;\n};\n/**\n* Set the contents of this category from DOM.\n* @param {Node} domTree DOM tree of blocks.\n* @constructor\n* deriv-bot: Set some extra properties on the Blockly.Toolbox.Category\n*/\n\n\nBlockly.Toolbox.Category.prototype.parseContents_ = function (domTree) {\n  var _this2 = this;\n\n  this.description_ = domTree.getAttribute('description');\n  this.dynamic_ = domTree.getAttribute('dynamic');\n  this.is_category_return_ = !!domTree.getAttribute('is_category_return');\n  domTree.childNodes.forEach(function (child) {\n    if (child.tagName) {\n      var tag = child.tagName.toUpperCase();\n\n      if (tag === 'CATEGORY') {\n        _this2.has_child_category_ = true;\n      }\n\n      switch (tag) {\n        case 'BLOCK':\n        case 'SHADOW':\n        case 'LABEL':\n        case 'BUTTON':\n        case 'SEP':\n        case 'TEXT':\n        case 'CATEGORY':\n          _this2.contents_.push(child);\n\n          break;\n\n        default:\n          break;\n      }\n    }\n  });\n};\n/**\n * Set the colour of the category's background from a DOM node.\n * @param {Node} node DOM node with \"colour\" and \"secondaryColour\" attribute.\n *     Colours are a hex string or hue on a colour wheel (0-360).\n * deriv-bot: We don't need secondaryColour\n */\n\n\nBlockly.Toolbox.Category.prototype.setColour = function (node) {\n  var colour = node.getAttribute('colour');\n\n  if (goog.isString(colour)) {\n    if (colour.match(/^#[0-9a-fA-F]{6}$/)) {\n      this.colour_ = colour;\n    } else {\n      this.colour_ = Blockly.hueToRgb(colour);\n    }\n\n    this.hasColours_ = true;\n  } else {\n    this.colour_ = '#000000';\n  }\n};\n/**\n * Create the DOM for the category menu.\n * deriv-bot: Custom class names\n */\n\n\nBlockly.Toolbox.CategoryMenu.prototype.createDom = function () {\n  var className = this.parent_.horizontalLayout_ ? 'toolbox__horizontal-category-menu' : 'toolbox__category-menu';\n  this.table = goog.dom.createDom('div', className);\n  this.parentHtml_.appendChild(this.table);\n};\n/**\n * Fill the toolbox with categories and blocks by creating a new\n * {Blockly.Toolbox.Category} for every category tag in the toolbox xml.\n * @param {Node} domTree DOM tree of blocks, or null.\n */\n\n\nBlockly.Toolbox.CategoryMenu.prototype.populate = function (domTree, isSubCategory) {\n  var _this3 = this;\n\n  if (isSubCategory === void 0) {\n    isSubCategory = false;\n  }\n\n  if (!domTree) {\n    return;\n  } // Remove old categories\n\n\n  if (!isSubCategory) {\n    this.dispose();\n    this.createDom();\n  }\n\n  domTree.childNodes.forEach(function (childNode) {\n    var is_category = function is_category() {\n      return childNode.tagName && childNode.tagName.toUpperCase() === 'CATEGORY';\n    };\n\n    var is_separator = function is_separator() {\n      return childNode.tagName && childNode.tagName.toUpperCase() === 'SEP';\n    };\n\n    if (is_category()) {\n      var row_class = childNode.getAttribute('is_category_return') ? 'toolbox__category-return' : 'toolbox__row';\n      var el_row = goog.dom.createDom('div', {\n        class: row_class\n      }); // Convert xml web-class attributes to class attributes in el_row\n\n      var web_classes = childNode.getAttribute('web-class');\n\n      if (web_classes) {\n        web_classes.split(' ').forEach(function (className) {\n          return el_row.classList.add(className);\n        });\n      }\n\n      var toolbox_category = new Blockly.Toolbox.Category(_this3, el_row, childNode);\n      var child = childNode.children;\n      /* eslint-disable consistent-return */\n\n      var subCategory = Object.keys(child).map(function (key) {\n        if (child[key].tagName === 'category') {\n          return child[key];\n        }\n      });\n\n      if (subCategory.length) {\n        _this3.populate(childNode, true);\n      }\n\n      if (!isSubCategory) {\n        _this3.table.appendChild(el_row);\n      }\n\n      _this3.categories_.push(toolbox_category);\n    } else if (is_separator()) {\n      var el_separator = goog.dom.createDom('div', {\n        class: 'toolbox__separator'\n      });\n\n      _this3.table.appendChild(el_separator);\n    }\n  });\n  this.height_ = this.table.offsetHeight;\n};"],"sourceRoot":""}