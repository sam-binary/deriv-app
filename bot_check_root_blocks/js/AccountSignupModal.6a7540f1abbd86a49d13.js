(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["AccountSignupModal"],{

/***/ "../../components/lib/autocomplete.css":
/*!***********************************************************************************************!*\
  !*** /Users/samyong/Documents/Source_code/deriv-app/packages/components/lib/autocomplete.css ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvYXV0b2NvbXBsZXRlLmNzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8vVXNlcnMvc2FteW9uZy9Eb2N1bWVudHMvU291cmNlX2NvZGUvZGVyaXYtYXBwL3BhY2thZ2VzL2NvbXBvbmVudHMvbGliL2F1dG9jb21wbGV0ZS5jc3M/MzY4ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../components/lib/autocomplete.css\n");

/***/ }),

/***/ "../../components/lib/autocomplete.js":
/*!**********************************************************************************************!*\
  !*** /Users/samyong/Documents/Source_code/deriv-app/packages/components/lib/autocomplete.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(e,t){ true?module.exports=t(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../../components/node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! react-transition-group */ \"../../components/node_modules/react-transition-group/esm/index.js\"),__webpack_require__(/*! tt-react-custom-scrollbars */ \"../../components/node_modules/tt-react-custom-scrollbars/lib/index.js\")):undefined}(window,function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__3__,__WEBPACK_EXTERNAL_MODULE__6__){return function(e){var t={};function n(g){if(t[g])return t[g].exports;var I=t[g]={i:g,l:!1,exports:{}};return e[g].call(I.exports,I,I.exports,n),I.l=!0,I.exports}return n.m=e,n.c=t,n.d=function(e,t,g){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:g})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var g=Object.create(null);if(n.r(g),Object.defineProperty(g,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var I in e)n.d(g,I,function(t){return e[t]}.bind(null,I));return g},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=43)}([function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__3__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCI/ZGRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzNfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///3\\n\")},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// CONCATENATED MODULE: ./src/components/field-error/field-error.jsx\\n\\n\\n\\n\\nvar field_error_FieldError = function FieldError(_ref) {\\n  var message = _ref.message,\\n      className = _ref.className;\\n  return external_react_default.a.createElement(\"p\", {\\n    className: external_classnames_default()(\\'dc-field-error\\', className)\\n  }, message);\\n};\\n\\nfield_error_FieldError.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  message: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.node, external_prop_types_default.a.bool])\\n};\\n/* harmony default export */ var field_error = (field_error_FieldError);\\n// EXTERNAL MODULE: ./src/components/field-error/field-error.scss\\nvar field_error_field_error = __webpack_require__(5);\\n\\n// CONCATENATED MODULE: ./src/components/field-error/index.js\\n\\n\\n/* harmony default export */ var components_field_error = __webpack_exports__[\"default\"] = (field_error);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9maWVsZC1lcnJvci9maWVsZC1lcnJvci5qc3g/MzNmMSIsIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvZmllbGQtZXJyb3IvaW5kZXguanM/Mzc4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0ICAgICAgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBGaWVsZEVycm9yID0gKHsgbWVzc2FnZSwgY2xhc3NOYW1lIH0pID0+IChcbiAgICA8cCBjbGFzc05hbWU9eyBjbGFzc05hbWVzKCdkYy1maWVsZC1lcnJvcicsIGNsYXNzTmFtZSkgfT5cbiAgICAgICAgeyBtZXNzYWdlIH1cbiAgICA8L3A+XG4pO1xuXG5GaWVsZEVycm9yLnByb3BUeXBlcyA9IHtcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbWVzc2FnZSAgOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcbiAgICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgUHJvcFR5cGVzLm5vZGUsXG4gICAgICAgIFByb3BUeXBlcy5ib29sLFxuICAgIF0pLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRmllbGRFcnJvcjtcbiIsImltcG9ydCBGaWVsZEVycm9yIGZyb20gJy4vZmllbGQtZXJyb3IuanN4JztcbmltcG9ydCAgICAgICAgICAgICAgICAgJy4vZmllbGQtZXJyb3Iuc2Nzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IEZpZWxkRXJyb3I7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBREE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUZBO0FBU0E7Ozs7O0FDbkJBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///4\\n')},function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9maWVsZC1lcnJvci9maWVsZC1lcnJvci5zY3NzPzk0OGQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU3MzAwODgzNTQ5NlxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///5\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__6__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJ0dC1yZWFjdC1jdXN0b20tc2Nyb2xsYmFyc1wiPzExNjciXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX182X187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///6\\n\")},,,function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: ./src/components/field-error/index.js + 1 modules\\nvar field_error = __webpack_require__(4);\\n\\n// CONCATENATED MODULE: ./src/components/input/input.jsx\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n\\n\\n\\n\\nvar input_Input = function Input(_ref, ref) {\\n  var className = _ref.className,\\n      classNameError = _ref.classNameError,\\n      disabled = _ref.disabled,\\n      error = _ref.error,\\n      hint = _ref.hint,\\n      leading_icon = _ref.leading_icon,\\n      trailing_icon = _ref.trailing_icon,\\n      label = _ref.label,\\n      props = _objectWithoutProperties(_ref, [\"className\", \"classNameError\", \"disabled\", \"error\", \"hint\", \"leading_icon\", \"trailing_icon\", \"label\"]);\\n\\n  return external_react_default.a.createElement(\"div\", {\\n    className: external_classnames_default()(\\'dc-input\\', className, {\\n      \\'dc-input__disabled\\': disabled,\\n      \\'dc-input--error\\': error\\n    })\\n  }, leading_icon && external_react_default.a.cloneElement(leading_icon, {\\n    className: external_classnames_default()(\\'dc-input__leading-icon\\', leading_icon.props.className)\\n  }), props.type === \\'textarea\\' ? external_react_default.a.createElement(\"textarea\", _extends({\\n    ref: ref\\n  }, props, {\\n    className: external_classnames_default()(\\'dc-input__field\\', {\\n      \\'dc-input__field--placeholder-visible\\': !label && props.placeholder\\n    }),\\n    disabled: disabled\\n  })) : external_react_default.a.createElement(\"input\", _extends({\\n    ref: ref\\n  }, props, {\\n    className: external_classnames_default()(\\'dc-input__field\\', {\\n      \\'dc-input__field--placeholder-visible\\': !label && props.placeholder\\n    }),\\n    disabled: disabled\\n  })), trailing_icon && external_react_default.a.cloneElement(trailing_icon, {\\n    className: external_classnames_default()(\\'dc-input__trailing-icon\\', trailing_icon.props.className)\\n  }), label && external_react_default.a.createElement(\"label\", {\\n    className: \"dc-input__label\",\\n    htmlFor: props.id\\n  }, label), error && external_react_default.a.createElement(field_error[\"default\"], {\\n    className: classNameError,\\n    message: error\\n  }), !error && hint && external_react_default.a.createElement(\"p\", {\\n    className: \"dc-input__hint\"\\n  }, hint));\\n};\\n\\n/* harmony default export */ var input = (external_react_default.a.forwardRef(input_Input));\\n// EXTERNAL MODULE: ./src/components/input/input.scss\\nvar input_input = __webpack_require__(13);\\n\\n// CONCATENATED MODULE: ./src/components/input/index.js\\n\\n\\n/* harmony default export */ var components_input = __webpack_exports__[\"default\"] = (input);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9pbnB1dC9pbnB1dC5qc3g/NTFhYSIsIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvaW5wdXQvaW5kZXguanM/MDJjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCAgICAgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBGaWVsZEVycm9yIGZyb20gJ0NvbXBvbmVudHMvZmllbGQtZXJyb3InO1xuXG5jb25zdCBJbnB1dCA9ICh7XG4gICAgY2xhc3NOYW1lLFxuICAgIGNsYXNzTmFtZUVycm9yLFxuICAgIGRpc2FibGVkLFxuICAgIGVycm9yLFxuICAgIGhpbnQsXG4gICAgbGVhZGluZ19pY29uLFxuICAgIHRyYWlsaW5nX2ljb24sXG4gICAgbGFiZWwsXG4gICAgLi4ucHJvcHNcbn0sIHJlZikgPT4gKFxuICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPXsgY2xhc3NOYW1lcygnZGMtaW5wdXQnLCBjbGFzc05hbWUsIHtcbiAgICAgICAgICAgICdkYy1pbnB1dF9fZGlzYWJsZWQnOiBkaXNhYmxlZCxcbiAgICAgICAgICAgICdkYy1pbnB1dC0tZXJyb3InICAgOiBlcnJvcixcbiAgICAgICAgfSl9XG4gICAgPlxuICAgICAgICB7XG4gICAgICAgICAgICBsZWFkaW5nX2ljb24gJiZcbiAgICAgICAgICAgIFJlYWN0LmNsb25lRWxlbWVudChcbiAgICAgICAgICAgICAgICBsZWFkaW5nX2ljb24sXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMoJ2RjLWlucHV0X19sZWFkaW5nLWljb24nLCBsZWFkaW5nX2ljb24ucHJvcHMuY2xhc3NOYW1lKSB9LFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHtwcm9wcy50eXBlID09PSAndGV4dGFyZWEnXG4gICAgICAgICAgICA/IDx0ZXh0YXJlYSByZWY9eyByZWYgfSB7IC4uLnByb3BzIH0gY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdkYy1pbnB1dF9fZmllbGQnLCB7ICdkYy1pbnB1dF9fZmllbGQtLXBsYWNlaG9sZGVyLXZpc2libGUnOiAhbGFiZWwgJiYgcHJvcHMucGxhY2Vob2xkZXIgfSl9IGRpc2FibGVkPXtkaXNhYmxlZH0gLz5cbiAgICAgICAgICAgIDogPGlucHV0IHJlZj17IHJlZiB9IHsgLi4ucHJvcHMgfSBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2RjLWlucHV0X19maWVsZCcsIHsgJ2RjLWlucHV0X19maWVsZC0tcGxhY2Vob2xkZXItdmlzaWJsZSc6ICFsYWJlbCAmJiBwcm9wcy5wbGFjZWhvbGRlciB9KX0gZGlzYWJsZWQ9e2Rpc2FibGVkfSAvPlxuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICAgIHRyYWlsaW5nX2ljb24gJiZcbiAgICAgICAgICAgIFJlYWN0LmNsb25lRWxlbWVudChcbiAgICAgICAgICAgICAgICB0cmFpbGluZ19pY29uLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzKCdkYy1pbnB1dF9fdHJhaWxpbmctaWNvbicsIHRyYWlsaW5nX2ljb24ucHJvcHMuY2xhc3NOYW1lKSB9LFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHsgbGFiZWwgJiZcbiAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9J2RjLWlucHV0X19sYWJlbCcgaHRtbEZvcj17cHJvcHMuaWR9PlxuICAgICAgICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgIH1cbiAgICAgICAgeyBlcnJvciAmJlxuICAgICAgICAgICAgPEZpZWxkRXJyb3IgY2xhc3NOYW1lPXtjbGFzc05hbWVFcnJvcn0gbWVzc2FnZT17ZXJyb3J9IC8+XG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgICAgIWVycm9yICYmIGhpbnQgJiZcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0nZGMtaW5wdXRfX2hpbnQnPlxuICAgICAgICAgICAgICAgIHtoaW50fVxuICAgICAgICAgICAgPC9wPlxuICAgICAgICB9XG4gICAgPC9kaXY+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5mb3J3YXJkUmVmKElucHV0KTtcbiIsImltcG9ydCBJbnB1dCBmcm9tICcuL2lucHV0LmpzeCc7XG5pbXBvcnQgICAgICAgICAgICAnLi9pbnB1dC5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBREE7QUFZQTtBQUNBO0FBQ0E7QUFGQTtBQURBO0FBVUE7QUFBQTtBQUlBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFNQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBS0E7QUFBQTtBQUFBO0FBSUE7QUFBQTtBQTdDQTtBQUNBO0FBbURBOzs7OztBQ3hEQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///9\\n')},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./src/components/themed-scrollbars/themed-scrollbars.scss\\nvar themed_scrollbars = __webpack_require__(14);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"tt-react-custom-scrollbars\"\\nvar external_tt_react_custom_scrollbars_ = __webpack_require__(6);\\n\\n// CONCATENATED MODULE: ./src/components/themed-scrollbars/themed-scrollbars.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\nvar themed_scrollbars_ThemedScrollbars =\\n/*#__PURE__*/\\nfunction (_React$Component) {\\n  _inherits(ThemedScrollbars, _React$Component);\\n\\n  function ThemedScrollbars() {\\n    _classCallCheck(this, ThemedScrollbars);\\n\\n    return _possibleConstructorReturn(this, _getPrototypeOf(ThemedScrollbars).apply(this, arguments));\\n  }\\n\\n  _createClass(ThemedScrollbars, [{\\n    key: \"render\",\\n    value: function render() {\\n      return external_react_default.a.createElement(external_tt_react_custom_scrollbars_[\"Scrollbars\"], _extends({\\n        ref: this.props.list_ref,\\n        renderTrackHorizontal: function renderTrackHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__track--horizontal\"\\n          }));\\n        },\\n        renderTrackVertical: function renderTrackVertical(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__track--vertical\"\\n          }));\\n        },\\n        renderThumbHorizontal: function renderThumbHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__thumb--horizontal\"\\n          }));\\n        },\\n        renderThumbVertical: function renderThumbVertical(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"dc-themed-scrollbars__thumb--vertical\"\\n          }));\\n        }\\n      }, this.props), this.props.children);\\n    }\\n  }]);\\n\\n  return ThemedScrollbars;\\n}(external_react_default.a.Component);\\n\\n/* harmony default export */ var themed_scrollbars_themed_scrollbars = (themed_scrollbars_ThemedScrollbars);\\n// CONCATENATED MODULE: ./src/components/themed-scrollbars/index.js\\n/* concated harmony reexport default */__webpack_require__.d(__webpack_exports__, \"default\", function() { return themed_scrollbars_themed_scrollbars; });\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdGhlbWVkLXNjcm9sbGJhcnMvdGhlbWVkLXNjcm9sbGJhcnMuanN4PzQxMjEiLCJ3ZWJwYWNrOi8vZGVyaXYtY29tcG9uZW50LltuYW1lXS8uL3NyYy9jb21wb25lbnRzL3RoZW1lZC1zY3JvbGxiYXJzL2luZGV4LmpzPzc1MzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0ICAgICAgICAgIGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNjcm9sbGJhcnMgfSBmcm9tICd0dC1yZWFjdC1jdXN0b20tc2Nyb2xsYmFycyc7XG5cbmNsYXNzIFRoZW1lZFNjcm9sbGJhcnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxTY3JvbGxiYXJzXG4gICAgICAgICAgICAgICAgcmVmPXt0aGlzLnByb3BzLmxpc3RfcmVmfVxuICAgICAgICAgICAgICAgIHJlbmRlclRyYWNrSG9yaXpvbnRhbD17IHByb3BzID0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgey4uLnByb3BzfSBjbGFzc05hbWU9J2RjLXRoZW1lZC1zY3JvbGxiYXJzX190cmFjay0taG9yaXpvbnRhbCcgLz5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVuZGVyVHJhY2tWZXJ0aWNhbD17IHByb3BzID0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgey4uLnByb3BzfSBjbGFzc05hbWU9J2RjLXRoZW1lZC1zY3JvbGxiYXJzX190cmFjay0tdmVydGljYWwnIC8+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlbmRlclRodW1iSG9yaXpvbnRhbD17IHByb3BzID0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgey4uLnByb3BzfSBjbGFzc05hbWU9J2RjLXRoZW1lZC1zY3JvbGxiYXJzX190aHVtYi0taG9yaXpvbnRhbCcgLz5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVuZGVyVGh1bWJWZXJ0aWNhbD17IHByb3BzID0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgey4uLnByb3BzfSBjbGFzc05hbWU9J2RjLXRoZW1lZC1zY3JvbGxiYXJzX190aHVtYi0tdmVydGljYWwnIC8+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHsuLi50aGlzLnByb3BzfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgPC9TY3JvbGxiYXJzPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGhlbWVkU2Nyb2xsYmFycztcbiIsImltcG9ydCAnLi90aGVtZWQtc2Nyb2xsYmFycy5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi90aGVtZWQtc2Nyb2xsYmFycy5qc3gnO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBREE7QUFHQTtBQUFBO0FBQ0E7QUFBQTtBQURBO0FBR0E7QUFBQTtBQUNBO0FBQUE7QUFEQTtBQUdBO0FBQUE7QUFDQTtBQUFBO0FBREE7QUFYQTtBQW1CQTs7OztBQXRCQTtBQUNBO0FBd0JBOztBQzVCQTtBQUFBO0FBRUE7Iiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///10\\n')},,,function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvaW5wdXQvaW5wdXQuc2Nzcz82MGZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1NzMwMDg4MzU2NjNcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///13\\n\")},function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdGhlbWVkLXNjcm9sbGJhcnMvdGhlbWVkLXNjcm9sbGJhcnMuc2Nzcz8zNjJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1NzMwMDg4MzYyOTdcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///14\\n\")},,,,,,,,function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24tbGlzdC9kcm9wZG93bi1saXN0LnNjc3M/ZmI4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNTczMDA4ODM2NDc4XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWhvdC1sb2FkZXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJmaWxlTWFwXCI6XCJ7ZmlsZU5hbWV9XCJ9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpOztcbiAgICB9XG4gICJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnQ0FLQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///22\\n\")},function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvYXV0b2NvbXBsZXRlL2F1dG9jb21wbGV0ZS5zY3NzPzYxMjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU3MzAwODgzNTM2M1xuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///23\\n\")},,,,,,,,,,,,,,,,,,,,function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: ./src/components/input/index.js + 1 modules\\nvar input = __webpack_require__(9);\\n\\n// EXTERNAL MODULE: external \"react-transition-group\"\\nvar external_react_transition_group_ = __webpack_require__(3);\\n\\n// EXTERNAL MODULE: ./src/components/themed-scrollbars/index.js + 1 modules\\nvar themed_scrollbars = __webpack_require__(10);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown-list/dropdown-list.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\n\\n\\n\\n\\n\\n\\nvar dropdown_list_trackHorizontal = function trackHorizontal(props) {\\n  return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n    style: {\\n      display: \\'none\\'\\n    }\\n  }));\\n};\\n\\nvar dropdown_list_thumbHorizontal = function thumbHorizontal(props) {\\n  return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n    style: {\\n      display: \\'none\\'\\n    }\\n  }));\\n};\\n\\nvar ListItems = external_react_default.a.forwardRef(function (props, ref) {\\n  var active_index = props.active_index,\\n      list_items = props.list_items,\\n      is_object_list = props.is_object_list,\\n      onItemSelection = props.onItemSelection,\\n      not_found_text = props.not_found_text;\\n  return external_react_default.a.createElement(external_react_default.a.Fragment, null, list_items.length ? list_items.map(function (item, idx) {\\n    return external_react_default.a.createElement(\"div\", {\\n      ref: idx === active_index ? ref : null,\\n      key: idx // onMouseDown ensures the click handler runs before the onBlur event of Input\\n      ,\\n      onMouseDown: function onMouseDown() {\\n        return onItemSelection(item);\\n      },\\n      className: external_classnames_default()(\\'dc-dropdown-list__item\\', {\\n        \\'dc-dropdown-list__item--active\\': idx === active_index\\n      }),\\n      value: is_object_list ? item.value : null\\n    }, is_object_list ? item.text : item);\\n  }) : external_react_default.a.createElement(\"div\", {\\n    className: \\'dc-dropdown-list__item\\'\\n  }, not_found_text));\\n});\\nListItems.displayName = \\'ListItems\\';\\nvar DropdownList = external_react_default.a.forwardRef(function (props, ref) {\\n  var dropdown_ref = ref.dropdown_ref,\\n      list_item_ref = ref.list_item_ref,\\n      list_wrapper_ref = ref.list_wrapper_ref;\\n  var active_index = props.active_index,\\n      is_visible = props.is_visible,\\n      list_items = props.list_items,\\n      onItemSelection = props.onItemSelection,\\n      style = props.style,\\n      not_found_text = props.not_found_text;\\n\\n  if (list_items.length && typeof list_items[0] !== \\'string\\' && _typeof(list_items[0]) !== \\'object\\') {\\n    throw Error(\\'Dropdown received wrong data structure\\');\\n  }\\n\\n  var is_object = !Array.isArray(list_items) && _typeof(list_items) === \\'object\\';\\n  var is_string_array = list_items.length && typeof list_items[0] === \\'string\\';\\n  return external_react_default.a.createElement(external_react_transition_group_[\"CSSTransition\"], {\\n    \"in\": is_visible,\\n    timeout: 100,\\n    classNames: {\\n      enter: \\'dc-dropdown-list--enter\\',\\n      enterDone: \\'dc-dropdown-list--enter-done\\',\\n      exit: \\'dc-dropdown-list--exit\\'\\n    },\\n    unmountOnExit: true\\n  }, external_react_default.a.createElement(\"div\", {\\n    style: style,\\n    className: \"dc-dropdown-list\",\\n    ref: list_wrapper_ref\\n  }, external_react_default.a.createElement(themed_scrollbars[\"default\"], {\\n    list_ref: dropdown_ref,\\n    autoHeight: true,\\n    autoHide: true,\\n    autoHeightMax: 220 // As specified by design spec\\n    ,\\n    renderTrackHorizontal: dropdown_list_trackHorizontal,\\n    renderThumbHorizontal: dropdown_list_thumbHorizontal\\n  }, is_object ? Object.keys(list_items).map(function (items, idx) {\\n    return external_react_default.a.createElement(ListItems, {\\n      key: idx,\\n      not_found_text: not_found_text,\\n      active_index: active_index,\\n      list_items: list_items[items],\\n      ref: list_item_ref,\\n      onItemSelection: onItemSelection\\n    });\\n  }) : external_react_default.a.createElement(ListItems, {\\n    not_found_text: not_found_text,\\n    active_index: active_index,\\n    list_items: list_items,\\n    ref: list_item_ref,\\n    onItemSelection: onItemSelection,\\n    is_object_list: !is_string_array\\n  }))));\\n});\\nDropdownList.displayName = \\'DropdownList\\';\\n/* harmony default export */ var dropdown_list = (DropdownList);\\nvar list_items_shape = external_prop_types_default.a.arrayOf(external_prop_types_default.a.shape({\\n  text: external_prop_types_default.a.string.isRequired,\\n  value: external_prop_types_default.a.string.isRequired\\n}));\\nDropdownList.propTypes = {\\n  active_index: external_prop_types_default.a.number,\\n  is_visible: external_prop_types_default.a.bool,\\n  list_items: external_prop_types_default.a.oneOfType([external_prop_types_default.a.arrayOf(external_prop_types_default.a.string), list_items_shape, external_prop_types_default.a.objectOf(list_items_shape)]),\\n  not_found_text: external_prop_types_default.a.string,\\n  onItemSelection: external_prop_types_default.a.func,\\n  style: external_prop_types_default.a.object\\n};\\n// EXTERNAL MODULE: ./src/components/dropdown-list/dropdown-list.scss\\nvar dropdown_list_dropdown_list = __webpack_require__(22);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown-list/index.js\\n\\n\\n/* harmony default export */ var components_dropdown_list = (dropdown_list);\\n// CONCATENATED MODULE: ./src/components/autocomplete/autocomplete.jsx\\nfunction autocomplete_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { autocomplete_typeof = function _typeof(obj) { return typeof obj; }; } else { autocomplete_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return autocomplete_typeof(obj); }\\n\\nfunction autocomplete_extends() { autocomplete_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return autocomplete_extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\\n\\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (autocomplete_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n // TODO: use-from-shared - Use this icon from icons\\' shared package\\n\\nvar autocomplete_IconArrow = function IconArrow(_ref) {\\n  var className = _ref.className,\\n      classNamePath = _ref.classNamePath;\\n  return external_react_default.a.createElement(\"svg\", {\\n    className: external_classnames_default()(\\'inline-icon\\', className),\\n    width: \"16\",\\n    height: \"16\"\\n  }, external_react_default.a.createElement(\"path\", {\\n    className: external_classnames_default()(classNamePath, \\'color1-fill\\'),\\n    fill: \"rgba(0, 0, 0, 0.8)\",\\n    fillRule: \"nonzero\",\\n    d: \"M13.164 5.13a.5.5 0 1 1 .672.74l-5.5 5a.5.5 0 0 1-.672 0l-5.5-5a.5.5 0 0 1 .672-.74L8 9.824l5.164-4.694z\"\\n  }));\\n};\\n\\nvar KEY_CODE = {\\n  ENTER: 13,\\n  ESCAPE: 27,\\n  TAB: 9,\\n  KEYDOWN: 40,\\n  KEYUP: 38\\n};\\n\\nvar getFilteredItems = function getFilteredItems(val, list) {\\n  var is_string_array = list.length && typeof list[0] === \\'string\\';\\n  return list.filter(function (item) {\\n    return is_string_array ? item.toLowerCase().includes(val) : item.text.toLowerCase().includes(val);\\n  });\\n};\\n\\nvar autocomplete_Autocomplete =\\n/*#__PURE__*/\\nfunction (_React$PureComponent) {\\n  _inherits(Autocomplete, _React$PureComponent);\\n\\n  function Autocomplete() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, Autocomplete);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Autocomplete)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.dropdown_ref = external_react_default.a.createRef();\\n    _this.list_wrapper_ref = external_react_default.a.createRef();\\n    _this.list_item_ref = external_react_default.a.createRef();\\n    _this.state = {\\n      should_show_list: false,\\n      filtered_items: _toConsumableArray(_this.props.list_items),\\n      input_value: \\'\\',\\n      active_index: null\\n    };\\n\\n    _this.setInputWrapperRef = function (node) {\\n      return _this.input_wrapper_ref = node;\\n    };\\n\\n    _this.onKeyPressed = function (event) {\\n      var _this$state = _this.state,\\n          active_index = _this$state.active_index,\\n          filtered_items = _this$state.filtered_items,\\n          should_show_list = _this$state.should_show_list;\\n\\n      switch (event.keyCode) {\\n        case KEY_CODE.ENTER:\\n          event.preventDefault();\\n\\n          _this.hideDropdownList();\\n\\n          _this.onItemSelection(filtered_items[active_index]);\\n\\n          break;\\n\\n        case KEY_CODE.TAB:\\n          if (should_show_list) {\\n            _this.hideDropdownList();\\n\\n            _this.onItemSelection(filtered_items[active_index]);\\n          }\\n\\n          break;\\n\\n        case KEY_CODE.ESCAPE:\\n          event.preventDefault();\\n\\n          _this.hideDropdownList();\\n\\n          break;\\n\\n        case KEY_CODE.KEYDOWN:\\n          if (!should_show_list) _this.showDropdownList();\\n\\n          _this.setActiveDown();\\n\\n          break;\\n\\n        case KEY_CODE.KEYUP:\\n          if (!should_show_list) _this.showDropdownList();else _this.setActiveUp();\\n          break;\\n\\n        default:\\n          if (!should_show_list) _this.showDropdownList();\\n          break;\\n      }\\n    };\\n\\n    _this.setActiveUp = function () {\\n      var _this$state2 = _this.state,\\n          active_index = _this$state2.active_index,\\n          filtered_items = _this$state2.filtered_items;\\n\\n      if (typeof active_index === \\'number\\') {\\n        var next = active_index - 1;\\n        var should_scroll_to_last = next < 0;\\n\\n        if (should_scroll_to_last) {\\n          _this.setState({\\n            active_index: filtered_items.length - 1\\n          });\\n\\n          _this.dropdown_ref.current.scrollToBottom();\\n        } else {\\n          var item_height = _this.list_item_ref.current.getBoundingClientRect().height;\\n\\n          var item_top = Math.floor(_this.list_item_ref.current.getBoundingClientRect().top) - item_height;\\n\\n          if (!_this.isListItemWithinView(item_top)) {\\n            var top_of_list = _this.list_item_ref.current.offsetTop - item_height;\\n\\n            _this.dropdown_ref.current.scrollTop(top_of_list);\\n          }\\n\\n          _this.setState({\\n            active_index: next\\n          });\\n        }\\n      }\\n    };\\n\\n    _this.setActiveDown = function () {\\n      var _this$state3 = _this.state,\\n          active_index = _this$state3.active_index,\\n          filtered_items = _this$state3.filtered_items;\\n\\n      if (active_index === null || !_this.list_item_ref.current) {\\n        _this.setState({\\n          active_index: 0\\n        });\\n      } else if (typeof active_index === \\'number\\') {\\n        var next = active_index + 1;\\n        var should_scroll_to_first = next >= filtered_items.length;\\n\\n        if (should_scroll_to_first) {\\n          _this.setState({\\n            active_index: 0\\n          });\\n\\n          _this.dropdown_ref.current.scrollTop();\\n        } else {\\n          var item_height = _this.list_item_ref.current.getBoundingClientRect().height;\\n\\n          var item_top = Math.floor(_this.list_item_ref.current.getBoundingClientRect().top) + item_height + item_height / 2;\\n\\n          var list_height = _this.dropdown_ref.current.getClientHeight();\\n\\n          if (!_this.isListItemWithinView(item_top)) {\\n            var items_above = list_height / item_height - 2;\\n            var bottom_of_list = _this.list_item_ref.current.offsetTop - items_above * item_height;\\n\\n            _this.dropdown_ref.current.scrollTop(bottom_of_list);\\n          }\\n\\n          _this.setState({\\n            active_index: next\\n          });\\n        }\\n      }\\n    };\\n\\n    _this.onBlur = function (e) {\\n      event.preventDefault();\\n\\n      _this.hideDropdownList();\\n\\n      _this.setState({\\n        filtered_items: _this.props.list_items\\n      });\\n\\n      if (_this.state.input_value === \\'\\' && typeof _this.props.onItemSelection === \\'function\\') {\\n        _this.props.onItemSelection({\\n          text: _this.props.not_found_text,\\n          value: \\'\\'\\n        });\\n      }\\n\\n      if (typeof _this.props.onBlur === \\'function\\') {\\n        _this.props.onBlur(e);\\n      }\\n    };\\n\\n    _this.onItemSelection = function (item) {\\n      if (!item) return;\\n\\n      _this.setState({\\n        input_value: item.text ? item.text : item\\n      });\\n\\n      if (typeof _this.props.onItemSelection === \\'function\\') {\\n        _this.props.onItemSelection(item);\\n      }\\n    };\\n\\n    _this.showDropdownList = function () {\\n      return _this.setState({\\n        should_show_list: true\\n      }, function () {\\n        if (_this.state.active_index && _this.list_item_ref.current) {\\n          var item = _this.list_item_ref.current.offsetTop;\\n\\n          _this.dropdown_ref.current.scrollTop(item);\\n        }\\n      });\\n    };\\n\\n    _this.hideDropdownList = function () {\\n      return _this.setState({\\n        should_show_list: false\\n      });\\n    };\\n\\n    _this.filterList = function (e) {\\n      var val = e.target.value.toLowerCase();\\n      var filtered_items = getFilteredItems(val, _this.props.list_items);\\n\\n      if (!filtered_items.length) {\\n        _this.setState({\\n          input_value: \\'\\'\\n        });\\n      }\\n\\n      _this.setState({\\n        filtered_items: filtered_items\\n      });\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(Autocomplete, [{\\n    key: \"isListItemWithinView\",\\n    value: function isListItemWithinView(item_top) {\\n      var list_height = this.dropdown_ref.current.getClientHeight();\\n      var wrapper_top = Math.floor(this.list_wrapper_ref.current.getBoundingClientRect().top);\\n      var wrapper_bottom = Math.floor(this.list_wrapper_ref.current.getBoundingClientRect().top) + list_height;\\n      if (item_top >= wrapper_bottom) return false;\\n      if (item_top <= wrapper_top) return false;\\n      return true;\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      var _this$props = this.props,\\n          className = _this$props.className,\\n          dropdown_offset = _this$props.dropdown_offset,\\n          onItemSelection = _this$props.onItemSelection,\\n          value = _this$props.value,\\n          list_items = _this$props.list_items,\\n          autoComplete = _this$props.autoComplete,\\n          otherProps = _objectWithoutProperties(_this$props, [\"className\", \"dropdown_offset\", \"onItemSelection\", \"value\", \"list_items\", \"autoComplete\"]);\\n\\n      return external_react_default.a.createElement(\"div\", {\\n        className: external_classnames_default()(\\'dc-autocomplete\\', className)\\n      }, external_react_default.a.createElement(\"div\", {\\n        ref: this.setInputWrapperRef,\\n        className: \"dc-autocomplete__input-field\"\\n      }, external_react_default.a.createElement(input[\"default\"], autocomplete_extends({}, otherProps, {\\n        className: \"dc-autocomplete__field\",\\n        autoComplete: autoComplete,\\n        onKeyDown: this.onKeyPressed,\\n        onFocus: function onFocus(e) {\\n          return _this2.showDropdownList(e);\\n        },\\n        onClick: function onClick(e) {\\n          return _this2.showDropdownList(e);\\n        },\\n        onInput: this.filterList // Field\\'s onBlur still needs to run to perform form functions such as validation\\n        ,\\n        onBlur: this.onBlur,\\n        value: // This allows us to let control of value externally (from <Form/>) or internally if used without form\\n        typeof onItemSelection === \\'function\\' ? value : this.state.input_value,\\n        trailing_icon: external_react_default.a.createElement(autocomplete_IconArrow, {\\n          className: {\\n            \\'dc-autocomplete__trailing-icon\\': true,\\n            \\'dc-autocomplete__trailing-icon--opened\\': this.state.should_show_list\\n          }\\n        })\\n      }))), external_react_default.a.createElement(components_dropdown_list, {\\n        ref: {\\n          dropdown_ref: this.dropdown_ref,\\n          list_item_ref: this.list_item_ref,\\n          list_wrapper_ref: this.list_wrapper_ref\\n        },\\n        active_index: this.state.active_index,\\n        style: {\\n          width: this.input_wrapper_ref ? \"\".concat(this.input_wrapper_ref.offsetWidth, \"px\") : \\'100%\\',\\n          marginTop: dropdown_offset ? \"calc(-\".concat(dropdown_offset, \" + 8px)\") : \\'8px\\' // 4px is the standard margin. In case of error, the list should overlap the error\\n          // TODO confirm placement of dropdown list and positioning of error\\n          // marginTop: form.errors[field.name] ? \\'calc(4px - 18px)\\' : \\'4px\\', // 4px is the standard margin. In case of error, the list should overlap the error\\n\\n        },\\n        is_visible: this.state.should_show_list,\\n        list_items: this.state.filtered_items // Autocomplete must use the `text` property and not the `value`, however DropdownList provides access to both\\n        ,\\n        onItemSelection: this.onItemSelection,\\n        not_found_text: this.props.not_found_text\\n      }));\\n    }\\n  }]);\\n\\n  return Autocomplete;\\n}(external_react_default.a.PureComponent);\\n\\nautocomplete_Autocomplete.defaultProps = {\\n  not_found_text: \\'No results found\\'\\n};\\n/* harmony default export */ var autocomplete = (autocomplete_Autocomplete);\\nautocomplete_Autocomplete.propTypes = {\\n  list_items: external_prop_types_default.a.oneOfType([external_prop_types_default.a.arrayOf(external_prop_types_default.a.string), external_prop_types_default.a.arrayOf(external_prop_types_default.a.shape({\\n    text: external_prop_types_default.a.string.isRequired,\\n    value: external_prop_types_default.a.string.isRequired\\n  }))]),\\n  not_found_text: external_prop_types_default.a.string,\\n  onItemSelection: external_prop_types_default.a.func\\n};\\n// EXTERNAL MODULE: ./src/components/autocomplete/autocomplete.scss\\nvar autocomplete_autocomplete = __webpack_require__(23);\\n\\n// CONCATENATED MODULE: ./src/components/autocomplete/index.js\\n\\n\\n/* harmony default export */ var components_autocomplete = __webpack_exports__[\"default\"] = (autocomplete);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///43\\n')}]).default});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../components/lib/autocomplete.js\n");

/***/ }),

/***/ "./App/Containers/AccountSignupModal/account-signup-modal.jsx":
/*!********************************************************************!*\
  !*** ./App/Containers/AccountSignupModal/account-signup-modal.jsx ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classnames */ \"../node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var deriv_components_lib_autocomplete__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! deriv-components/lib/autocomplete */ \"../../components/lib/autocomplete.js\");\n/* harmony import */ var deriv_components_lib_autocomplete__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_autocomplete__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var deriv_components_lib_autocomplete_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deriv-components/lib/autocomplete.css */ \"../../components/lib/autocomplete.css\");\n/* harmony import */ var deriv_components_lib_autocomplete_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_autocomplete_css__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var deriv_components_lib_password_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! deriv-components/lib/password-input */ \"../../components/lib/password-input.js\");\n/* harmony import */ var deriv_components_lib_password_input__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_password_input__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var deriv_components_lib_password_input_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! deriv-components/lib/password-input.css */ \"../../components/lib/password-input.css\");\n/* harmony import */ var deriv_components_lib_password_input_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_password_input_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! deriv-components/lib/button */ \"../../components/lib/button.js\");\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! deriv-components/lib/button.css */ \"../../components/lib/button.css\");\n/* harmony import */ var deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button_css__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var deriv_components_lib_dialog__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! deriv-components/lib/dialog */ \"../../components/lib/dialog.js\");\n/* harmony import */ var deriv_components_lib_dialog__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_dialog__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var deriv_components_lib_dialog_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! deriv-components/lib/dialog.css */ \"../../components/lib/dialog.css\");\n/* harmony import */ var deriv_components_lib_dialog_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_dialog_css__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var formik__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! formik */ \"../node_modules/formik/dist/formik.esm.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! prop-types */ \"../node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var App_Components_Elements_localize_jsx__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! App/Components/Elements/localize.jsx */ \"./App/Components/Elements/localize.jsx\");\n/* harmony import */ var App_i18n__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! App/i18n */ \"./App/i18n.js\");\n/* harmony import */ var Stores_connect__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! Stores/connect */ \"./Stores/connect.js\");\n/* harmony import */ var Utils_Validator_declarative_validation_rules__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! Utils/Validator/declarative-validation-rules */ \"./Utils/Validator/declarative-validation-rules.js\");\n/* harmony import */ var App_Constants_app_config__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! App/Constants/app-config */ \"./App/Constants/app-config.js\");\n/* harmony import */ var Sass_app_modules_account_signup_scss__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! Sass/app/modules/account-signup.scss */ \"./sass/app/modules/account-signup.scss\");\n/* harmony import */ var Sass_app_modules_account_signup_scss__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(Sass_app_modules_account_signup_scss__WEBPACK_IMPORTED_MODULE_17__);\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n        \n\n\n\n        \n\n\n\n        \n\n\n\n        \n\n\n\n\n\n\n\n\n\nvar signupInitialValues = {\n  password: '',\n  residence: ''\n};\n\nvar validateSignup = function validateSignup(values, residence_list) {\n  var errors = {};\n  var min_password_length = 6;\n\n  if (values.password && (values.password.length < min_password_length || !Object(Utils_Validator_declarative_validation_rules__WEBPACK_IMPORTED_MODULE_15__[\"validPassword\"])(values.password))) {\n    errors.password = true;\n  }\n\n  if (!values.residence) {\n    errors.residence = true;\n  } else {\n    var index_of_selection = residence_list.findIndex(function (item) {\n      return item.text.toLowerCase() === values.residence.toLowerCase();\n    });\n\n    if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n      errors.residence = Object(App_i18n__WEBPACK_IMPORTED_MODULE_13__[\"localize\"])('Unfortunately, {{website_name}} is not available in your country.', {\n        website_name: App_Constants_app_config__WEBPACK_IMPORTED_MODULE_16__[\"website_name\"]\n      });\n    }\n  }\n\n  return errors;\n};\n\nvar AccountSignup =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AccountSignup, _React$Component);\n\n  function AccountSignup() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AccountSignup);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AccountSignup)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      has_valid_residence: false\n    };\n\n    _this.onResidenceSelection = function () {\n      _this.setState({\n        has_valid_residence: true\n      });\n    };\n\n    _this.onSignupComplete = function (error) {\n      // Error would be returned on invalid token (and the like) cases.\n      // TODO: Proper error handling (currently we have no place to put the message)\n      if (error) {\n        throw Error(error);\n      } // Handle lower level modal controls due to overriding modal rendering\n\n\n      _this.props.isModalVisible(false);\n\n      _this.props.enableApp();\n    };\n\n    return _this;\n  }\n\n  _createClass(AccountSignup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          onSignup = _this$props.onSignup,\n          residence_list = _this$props.residence_list;\n\n      var validateSignupPassthrough = function validateSignupPassthrough(values) {\n        return validateSignup(values, residence_list);\n      };\n\n      var onSignupPassthrough = function onSignupPassthrough(values) {\n        var index_of_selection = residence_list.findIndex(function (item) {\n          return item.text.toLowerCase() === values.residence.toLowerCase();\n        });\n\n        var modded_values = _objectSpread({}, values, {\n          residence: residence_list[index_of_selection].value\n        });\n\n        onSignup(modded_values, _this2.onSignupComplete);\n      };\n\n      return react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(\"div\", {\n        className: \"account-signup\"\n      }, react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_9__[\"Formik\"], {\n        initialValues: signupInitialValues,\n        validate: validateSignupPassthrough,\n        onSubmit: onSignupPassthrough\n      }, function (_ref) {\n        var isSubmitting = _ref.isSubmitting,\n            errors = _ref.errors,\n            values = _ref.values,\n            setFieldValue = _ref.setFieldValue,\n            touched = _ref.touched;\n        return react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_9__[\"Form\"], null, react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_11___default.a.Fragment, null, !_this2.state.has_valid_residence ? react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(\"div\", {\n          className: \"account-signup__residence-selection\"\n        }, react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(\"p\", {\n          className: \"account-signup__heading\"\n        }, react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(App_Components_Elements_localize_jsx__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n          i18n_default_text: \"Thanks for verifying your email\"\n        })), react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(\"p\", {\n          className: \"account-signup__text\"\n        }, react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(App_Components_Elements_localize_jsx__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n          i18n_default_text: \"Where do you live?\"\n        })), react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_9__[\"Field\"], {\n          name: \"residence\"\n        }, function (_ref2) {\n          var field = _ref2.field;\n          return react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(deriv_components_lib_autocomplete__WEBPACK_IMPORTED_MODULE_1___default.a, _extends({}, field, {\n            autoComplete: \"off\",\n            className: \"account-signup__residence-field\",\n            dropdown_offset: \"3.2rem\",\n            type: \"text\",\n            label: Object(App_i18n__WEBPACK_IMPORTED_MODULE_13__[\"localize\"])('Choose country'),\n            error: touched.residence && errors.residence,\n            required: true,\n            list_items: residence_list,\n            onItemSelection: function onItemSelection(item) {\n              return setFieldValue('residence', item.text, true);\n            }\n          }));\n        }), react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_5___default.a, {\n          className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('account-signup__btn', {\n            'account-signup__btn--disabled': !values.residence || errors.residence\n          }),\n          type: \"button\",\n          is_disabled: !values.residence || !!errors.residence,\n          onClick: _this2.onResidenceSelection,\n          text: Object(App_i18n__WEBPACK_IMPORTED_MODULE_13__[\"localize\"])('Next'),\n          primary: true\n        })) : react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(\"div\", {\n          className: \"account-signup__password-selection\"\n        }, react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(\"p\", {\n          className: \"account-signup__heading\"\n        }, react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(App_Components_Elements_localize_jsx__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n          i18n_default_text: \"Keep your account secure with a password\"\n        })), react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(formik__WEBPACK_IMPORTED_MODULE_9__[\"Field\"], {\n          name: \"password\"\n        }, function (_ref3) {\n          var field = _ref3.field;\n          return react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(deriv_components_lib_password_input__WEBPACK_IMPORTED_MODULE_3___default.a, _extends({}, field, {\n            className: \"account-signup__password-field\",\n            label: Object(App_i18n__WEBPACK_IMPORTED_MODULE_13__[\"localize\"])('Create a password'),\n            error: touched.password && errors.password,\n            required: true\n          }));\n        }), react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(\"p\", {\n          className: \"account-signup__subtext\"\n        }, react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(App_Components_Elements_localize_jsx__WEBPACK_IMPORTED_MODULE_12__[\"default\"], {\n          i18n_default_text: \"Strong passwords contain at least 6 characters, combine uppercase and lowercase letters, numbers, and symbols.\"\n        })), react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_5___default.a, {\n          className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('account-signup__btn', {\n            'account-signup__btn--disabled': !values.password || errors.password || isSubmitting\n          }),\n          type: \"submit\",\n          is_disabled: !values.password || !!errors.password || isSubmitting,\n          text: Object(App_i18n__WEBPACK_IMPORTED_MODULE_13__[\"localize\"])('Start trading'),\n          primary: true\n        }))));\n      }));\n    }\n  }]);\n\n  return AccountSignup;\n}(react__WEBPACK_IMPORTED_MODULE_11___default.a.Component);\n\nAccountSignup.propTypes = {\n  onSignup: prop_types__WEBPACK_IMPORTED_MODULE_10___default.a.func,\n  residence_list: prop_types__WEBPACK_IMPORTED_MODULE_10___default.a.array\n};\n\nvar AccountSignupModal = function AccountSignupModal(_ref4) {\n  var enableApp = _ref4.enableApp,\n      disableApp = _ref4.disableApp,\n      is_loading = _ref4.is_loading,\n      is_visible = _ref4.is_visible,\n      onSignup = _ref4.onSignup,\n      residence_list = _ref4.residence_list,\n      toggleAccountSignupModal = _ref4.toggleAccountSignupModal;\n  return react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(deriv_components_lib_dialog__WEBPACK_IMPORTED_MODULE_7___default.a, {\n    is_visible: is_visible,\n    disableApp: disableApp,\n    enableApp: enableApp,\n    is_loading: is_loading\n  }, react__WEBPACK_IMPORTED_MODULE_11___default.a.createElement(AccountSignup, {\n    onSignup: onSignup,\n    residence_list: residence_list,\n    isModalVisible: toggleAccountSignupModal,\n    enableApp: enableApp\n  }));\n};\n\nAccountSignupModal.propTypes = {\n  disableApp: prop_types__WEBPACK_IMPORTED_MODULE_10___default.a.func,\n  enableApp: prop_types__WEBPACK_IMPORTED_MODULE_10___default.a.func,\n  is_loading: prop_types__WEBPACK_IMPORTED_MODULE_10___default.a.bool,\n  is_visible: prop_types__WEBPACK_IMPORTED_MODULE_10___default.a.bool,\n  onSignup: prop_types__WEBPACK_IMPORTED_MODULE_10___default.a.func,\n  residence_list: prop_types__WEBPACK_IMPORTED_MODULE_10___default.a.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_10___default.a.object)\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(Stores_connect__WEBPACK_IMPORTED_MODULE_14__[\"connect\"])(function (_ref5) {\n  var ui = _ref5.ui,\n      client = _ref5.client;\n  return {\n    is_visible: ui.is_account_signup_modal_visible,\n    toggleAccountSignupModal: ui.toggleAccountSignupModal,\n    enableApp: ui.enableApp,\n    disableApp: ui.disableApp,\n    is_loading: ui.is_loading,\n    onSignup: client.onSignup,\n    residence_list: client.residence_list\n  };\n})(AccountSignupModal));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./App/Containers/AccountSignupModal/account-signup-modal.jsx\n");

/***/ }),

/***/ "./App/Containers/AccountSignupModal/index.js":
/*!****************************************************!*\
  !*** ./App/Containers/AccountSignupModal/index.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _account_signup_modal_jsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./account-signup-modal.jsx */ \"./App/Containers/AccountSignupModal/account-signup-modal.jsx\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _account_signup_modal_jsx__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9BcHAvQ29udGFpbmVycy9BY2NvdW50U2lnbnVwTW9kYWwvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9BcHAvQ29udGFpbmVycy9BY2NvdW50U2lnbnVwTW9kYWwvaW5kZXguanM/NTNiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmcm9tICcuL2FjY291bnQtc2lnbnVwLW1vZGFsLmpzeCc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./App/Containers/AccountSignupModal/index.js\n");

/***/ }),

/***/ "./sass/app/modules/account-signup.scss":
/*!**********************************************!*\
  !*** ./sass/app/modules/account-signup.scss ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zYXNzL2FwcC9tb2R1bGVzL2FjY291bnQtc2lnbnVwLnNjc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zYXNzL2FwcC9tb2R1bGVzL2FjY291bnQtc2lnbnVwLnNjc3M/Njg5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./sass/app/modules/account-signup.scss\n");

/***/ })

}]);