/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-file-dropzone {
  width: 100%;
  height: 100%;
  border: 1px dashed var(--border-normal);
  border-radius: 4px;
  color: var(--text-prominent);
  text-align: center;
  font-size: 20px;
  font-weight: bold;
  padding: 2em;
  cursor: pointer;
  position: relative; }

.dc-file-dropzone__content {
  position: absolute;
  height: 100%;
  width: 100%;
  top: 0;
  left: 0;
  display: -webkit-box;
  display: flex;
  -webkit-box-align: center;
          align-items: center;
  -webkit-box-pack: center;
          justify-content: center; }

.dc-file-dropzone__message {
  position: absolute;
  display: block;
  font-size: 12px;
  color: var(--text-general);
  font-weight: 400;
  opacity: 1;
  max-width: 168px;
  line-height: 1.5;
  -webkit-transform: translate3d(0, 0, 0);
          transform: translate3d(0, 0, 0);
  -webkit-transition: opacity 0.15s linear, -webkit-transform 0.25s ease;
  transition: opacity 0.15s linear, -webkit-transform 0.25s ease;
  transition: transform 0.25s ease, opacity 0.15s linear;
  transition: transform 0.25s ease, opacity 0.15s linear, -webkit-transform 0.25s ease; }

.dc-file-dropzone__message--enter-done {
  opacity: 1;
  -webkit-transform: translate3d(0, 0, 0);
          transform: translate3d(0, 0, 0); }

.dc-file-dropzone__message--enter {
  opacity: 0;
  -webkit-transform: translate3d(0, -16px, 0);
          transform: translate3d(0, -16px, 0); }

.dc-file-dropzone__message--enter-active {
  opacity: 1;
  -webkit-transform: translate3d(0, 0, 0);
          transform: translate3d(0, 0, 0); }

.dc-file-dropzone__message--exit {
  opacity: 1;
  -webkit-transform: translate3d(0, 0, 0);
          transform: translate3d(0, 0, 0); }

.dc-file-dropzone__message--exit-active {
  opacity: 0;
  -webkit-transform: translate3d(0, -16px, 0);
          transform: translate3d(0, -16px, 0); }

.dc-file-dropzone__message--error {
  color: var(--status-danger); }

.dc-file-dropzone__filename {
  font-size: 12px;
  width: 100%;
  max-width: 240px;
  color: var(--text-general);
  font-weight: bold; }

.dc-file-dropzone--has-file {
  border-style: solid;
  border-color: var(--status-success); }

.dc-file-dropzone--has-error {
  border-style: solid;
  border-color: var(--status-danger); }

.dc-file-dropzone--has-error .dc-file-dropzone__filename {
  margin-top: -3em; }

.dc-file-dropzone:hover, .dc-file-dropzone:focus {
  outline: 0; }

.dc-file-dropzone:hover {
  background-color: rgba(0, 0, 0, 0.025); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-label {
  font-size: 14px;
  font-weight: bold;
  height: 24px;
  line-height: 20px;
  border-radius: 12px;
  padding: 2px 8px;
  margin: 0 2px;
  position: relative; }

.dc-label--default {
  color: var(--status-default); }

.dc-label--default:after {
  background-color: var(--status-default);
  opacity: 0.16;
  content: '';
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  position: absolute;
  border-radius: 12px; }

.dc-label--danger {
  color: var(--status-danger); }

.dc-label--danger:after {
  background-color: var(--status-danger);
  opacity: 0.16;
  content: '';
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  position: absolute;
  border-radius: 12px; }

.dc-label--warn {
  color: var(--status-warning); }

.dc-label--warn:after {
  background-color: var(--status-warning);
  opacity: 0.16;
  content: '';
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  position: absolute;
  border-radius: 12px; }

.dc-label--success {
  color: var(--status-success); }

.dc-label--success:after {
  background-color: var(--status-success);
  opacity: 0.16;
  content: '';
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  position: absolute;
  border-radius: 12px; }

.dc-label--success-invert {
  color: var(--text-colored-background);
  background-color: var(--status-success); }

.dc-label--warn-invert {
  color: var(--text-colored-background);
  background-color: var(--status-warning); }

.dc-label--info {
  color: var(--status-info); }

.dc-label--info:after {
  background-color: var(--status-info);
  opacity: 0.16;
  content: '';
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  position: absolute;
  border-radius: 12px; }

.dc-label--large {
  height: 28px;
  border-radius: 20px;
  padding: 4px 8px 4px 4px;
  margin: 0 2px;
  font-size: 16px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-field-error {
  position: absolute;
  top: 4rem;
  text-align: left !important;
  padding-top: 0.4rem;
  padding-left: 0.4rem;
  color: var(--brand-red-coral);
  font-size: var(--text-size-xxs); }

.dc-password-meter {
  position: absolute;
  bottom: -5px;
  left: 0;
  height: 5px;
  border-radius: 0 0 4px 4px;
  -webkit-transition: -webkit-transform 0.25s linear;
  transition: -webkit-transform 0.25s linear;
  transition: transform 0.25s linear;
  transition: transform 0.25s linear, -webkit-transform 0.25s linear;
  background: var(--status-danger);
  -webkit-transform-origin: left top;
          transform-origin: left top;
  width: 100%;
  z-index: 2; }

.dc-password-meter__bg {
  z-index: 1;
  position: absolute;
  bottom: -5px;
  left: 0;
  height: 5px;
  border-radius: 0 0 4px 4px;
  width: 100%;
  background: var(--general-section-1); }

.dc-password-meter__container {
  position: relative; }

.dc-password-meter__container .dc-input {
  border-radius: 4px 4px 0 0; }

.dc-password-meter__error, .dc-password-meter__warning {
  top: 5rem;
  z-index: 2; }

.dc-password-meter__warning {
  color: var(--status-warning); }

.dc-password-meter--weak {
  background-color: var(--status-danger);
  z-index: 2; }

.dc-password-meter--strong {
  background-color: var(--status-success);
  z-index: 2; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-radio-group {
  display: -webkit-box;
  display: flex;
  -webkit-box-align: center;
          align-items: center;
  -webkit-box-pack: start;
          justify-content: flex-start;
  margin-top: 16px; }

.dc-radio-group__input {
  display: none; }

.dc-radio-group__item {
  display: -webkit-box;
  display: flex;
  cursor: pointer; }

.dc-radio-group__item:not(:last-child) {
  margin-right: 16px; }

.dc-radio-group__circle {
  border: 2px solid var(--text-general);
  border-radius: 50%;
  box-shadow: 0 0 1px 0 var(--shadow-menu);
  width: 16px;
  height: 16px;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
  margin-right: 8px;
  align-self: center; }

.dc-radio-group__circle--selected {
  border-width: 4px;
  border-color: var(--brand-red-coral); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* COLOR PALETTE */
/* colors */
/* alpha colors */
/* gradient colors */
/* Preserve legacy variables */
/* Primary */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Convert Tooltip colors
 * @param $color - css color property
 * Usage example:
   @include convertTooltipColor(var(--status-default));
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-counter {
  -webkit-box-align: center;
          align-items: center;
  background: var(--status-danger);
  border-radius: 0.8rem;
  color: var(--text-colored-background);
  display: -webkit-box;
  display: flex;
  font-size: 1rem;
  font-weight: bold;
  -webkit-box-pack: center;
          justify-content: center;
  line-height: 1;
  padding: 3px 5px; }

.dc-tabs {
  position: relative;
  display: grid; }

.dc-tabs .dc-tabs__item:nth-child(1).dc-tabs__active ~ .dc-tabs__active-line {
  left: calc(var(--tab-width) * 1 - var(--tab-width)); }

.dc-tabs .dc-tabs__item:nth-child(2).dc-tabs__active ~ .dc-tabs__active-line {
  left: calc(var(--tab-width) * 2 - var(--tab-width)); }

.dc-tabs .dc-tabs__item:nth-child(3).dc-tabs__active ~ .dc-tabs__active-line {
  left: calc(var(--tab-width) * 3 - var(--tab-width)); }

.dc-tabs .dc-tabs__item:nth-child(4).dc-tabs__active ~ .dc-tabs__active-line {
  left: calc(var(--tab-width) * 4 - var(--tab-width)); }

.dc-tabs .dc-tabs__item:nth-child(5).dc-tabs__active ~ .dc-tabs__active-line {
  left: calc(var(--tab-width) * 5 - var(--tab-width)); }

.dc-tabs__list {
  width: 100%;
  line-height: 35px;
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
          justify-content: center; }

.dc-tabs__list--top {
  -webkit-box-ordinal-group: 1;
          order: 0; }

.dc-tabs__list--bottom {
  -webkit-box-ordinal-group: 2;
          order: 1; }

.dc-tabs__list--fit-content {
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content; }

.dc-tabs__item {
  list-style: none;
  font-size: 14px;
  text-align: center;
  white-space: nowrap;
  width: var(--tab-width);
  color: var(--text-general); }

.dc-tabs__item__counter {
  display: -webkit-inline-box;
  display: inline-flex;
  margin-left: 1rem;
  vertical-align: middle; }

.dc-tabs__item--top {
  border-bottom: 1px solid var(--general-section-1); }

.dc-tabs__item--bottom {
  border-top: 1px solid var(--general-section-1); }

.dc-tabs__item:not(.dc-tabs__active) {
  cursor: pointer;
  color: var(--text-general); }

.dc-tabs__active {
  font-weight: 700;
  color: var(--text-prominent); }

.dc-tabs__active-line {
  display: block;
  position: absolute;
  left: 0;
  width: var(--tab-width);
  height: 2px;
  background: var(--brand-red-coral);
  -webkit-transition: all ease-in-out 0.3s;
  transition: all ease-in-out 0.3s; }

.dc-tabs__active-line--top {
  top: 34px; }

.dc-tabs__active-line--bottom {
  bottom: 34px; }

.dc-tabs__active-line--fit-content {
  width: 120px; }

