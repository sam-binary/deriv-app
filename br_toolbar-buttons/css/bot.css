@import url(https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&subset=latin,vietnamese,cyrillic-ext,latin-ext,cyrillic);
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.flyout {
  position: absolute;
  left: 250px;
  background-color: #ffffff;
  max-height: calc(100% - 40px);
  z-index: 1;
  border-radius: 10px;
  padding: 25px;
  font-size: 2em;
  margin-left: 15px;
  margin-top: 20px;
  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.4);
  min-width: 400px; }
  .flyout__content {
    overflow: auto; }
  .flyout__search {
    left: 0; }
  .flyout__block-workspace {
    margin-bottom: 15px; }
    .flyout__block-workspace * .blocklySvg {
      background-color: inherit !important; }
    .flyout__block-workspace * .blocklyMainBackground {
      stroke: none !important; }
  .flyout__button {
    border: none;
    border-radius: 4px;
    padding: 5px 20px;
    cursor: pointer;
    font-size: 14px;
    font-weight: bold;
    font-style: normal;
    font-stretch: normal;
    line-height: 1.43;
    letter-spacing: normal;
    text-align: center; }
    .flyout__button-new {
      width: 100%;
      font-size: 100%;
      box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.4);
      margin-bottom: 15px; }
    .flyout__button-add {
      background-color: #ff444f;
      color: #ffffff; }
    .flyout__button-back {
      align-self: center;
      background-color: transparent;
      color: #000000; }
      .flyout__button-back:focus {
        outline: none; }
    .flyout__button-next, .flyout__button-previous {
      margin-left: 1em;
      color: rgba(0, 0, 0, 0.8);
      background-color: #f4f4f6; }
  .flyout__item:not(:last-of-type) {
    margin-bottom: 30px; }
  .flyout__item-header {
    display: flex;
    margin-top: 15px;
    margin-bottom: 10px; }
  .flyout__item-label {
    font-weight: bold; }
  .flyout__item-buttons {
    margin-left: auto;
    display: flex;
    justify-content: flex-end; }
  .flyout__item-info {
    cursor: pointer;
    color: #e31c4b;
    margin-left: 0.2em; }
  .flyout__item-description {
    font-size: 0.8em;
    margin-bottom: 1em; }
  .flyout__image {
    width: 100%;
    height: auto;
    border-radius: 0.5em; }
  .flyout__video {
    width: 100%;
    height: 20vh;
    border-radius: 0.5em; }
  .flyout__help {
    padding: 0; }
    .flyout__help-header {
      padding: 1.2em 1em;
      display: flex;
      background-color: #f4f4f6; }
    .flyout__help-content {
      padding: 1.5em;
      overflow-y: auto;
      height: calc(100vh - 300px); }
      .flyout__help-content .flyout__item {
        margin-bottom: 2em; }
    .flyout__help-title {
      align-self: center;
      font-size: 25px;
      font-weight: bold; }
    .flyout__help-footer {
      text-align: right;
      padding: 1.2em 0.8em;
      border-top: solid 0.1em #f4f4f6; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
#scratch_div {
  position: absolute; }

.blocklyText {
  fill: #000 !important; }

.blocklyMainWorkspaceScrollbar {
  display: none; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.toolbox {
  background-color: #fff;
  border: 1px solid #ebebeb;
  display: flex;
  flex-direction: column;
  max-height: calc(100% - 40px);
  overflow: hidden;
  position: absolute;
  user-select: none;
  z-index: 1;
  width: 250px; }
  .toolbox__header {
    padding: 8px;
    margin-bottom: 10px;
    position: relative;
    font-weight: bold;
    font-size: 1.6em;
    background-color: #f4f4f6;
    text-align: center; }
  .toolbox__item {
    display: flex;
    flex-direction: row; }
  .toolbox__category-arrow {
    display: flex;
    margin: auto; }
    .toolbox__category-arrow--back {
      margin-left: 15px;
      fill: #fff;
      transform: rotate(90deg); }
    .toolbox__category-arrow--open {
      margin-right: 15px;
      transform: rotate(270deg); }
  .toolbox__category-colour {
    width: 5px;
    flex-shrink: 0; }
  .toolbox__category--search .toolbox__category-colour {
    background-color: #afffda; }
  .toolbox__category-return .toolbox__category--search {
    background-color: #afffda; }
  .toolbox__category--trade_parameters .toolbox__category-colour {
    background-color: #30409f; }
  .toolbox__category-return .toolbox__category--trade_parameters {
    background-color: #30409f; }
  .toolbox__category--purchase_conditions .toolbox__category-colour {
    background-color: #00897b; }
  .toolbox__category-return .toolbox__category--purchase_conditions {
    background-color: #00897b; }
  .toolbox__category--sell_conditions .toolbox__category-colour {
    background-color: #78909c; }
  .toolbox__category-return .toolbox__category--sell_conditions {
    background-color: #78909c; }
  .toolbox__category--trade_results .toolbox__category-colour {
    background-color: #d81a60; }
  .toolbox__category-return .toolbox__category--trade_results {
    background-color: #d81a60; }
  .toolbox__category--technical_analysis .toolbox__category-colour {
    background-color: #689e38; }
  .toolbox__category-return .toolbox__category--technical_analysis {
    background-color: #689e38; }
  .toolbox__category--utility .toolbox__category-colour {
    background-color: #8e25aa; }
  .toolbox__category-return .toolbox__category--utility {
    background-color: #8e25aa; }
  .toolbox__category--math .toolbox__category-colour {
    background-color: #fc8b01; }
  .toolbox__category-return .toolbox__category--math {
    background-color: #fc8b01; }
  .toolbox__category--text .toolbox__category-colour {
    background-color: #5d4037; }
  .toolbox__category-return .toolbox__category--text {
    background-color: #5d4037; }
  .toolbox__category--logic .toolbox__category-colour {
    background-color: #1876d2; }
  .toolbox__category-return .toolbox__category--logic {
    background-color: #1876d2; }
  .toolbox__category--lists .toolbox__category-colour {
    background-color: #e53836; }
  .toolbox__category-return .toolbox__category--lists {
    background-color: #e53836; }
  .toolbox__category--custom_functions .toolbox__category-colour {
    background-color: #00acc1; }
  .toolbox__category-return .toolbox__category--custom_functions {
    background-color: #00acc1; }
  .toolbox__category--variables .toolbox__category-colour {
    background-color: #616161; }
  .toolbox__category-return .toolbox__category--variables {
    background-color: #616161; }
  .toolbox__category--loops .toolbox__category-colour {
    background-color: #afb42b; }
  .toolbox__category-return .toolbox__category--loops {
    background-color: #afb42b; }
  .toolbox__category-menu {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    min-height: 0;
    overflow-y: auto;
    overflow-x: hidden; }
  .toolbox__category-return {
    cursor: pointer;
    color: #fff;
    text-align: center; }
    .toolbox__category-return .toolbox__label {
      margin-left: -30px; }
  .toolbox__category-text {
    align-self: center;
    margin: 15px;
    width: 100%; }
  .toolbox__description {
    font-size: 1.3em; }
  .toolbox__icon {
    display: flex;
    align-self: center;
    margin-right: 15px; }
    .toolbox__icon > svg {
      height: 25px;
      width: 25px; }
  .toolbox__label {
    font-weight: bold;
    font-size: 1.6em; }
  .toolbox__row {
    cursor: pointer;
    border-top: 1px solid #ebebeb; }
    .toolbox__row:last-of-type {
      border-bottom: 1px solid #ebebeb; }
    .toolbox__row .toolbox__category--search:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(175, 255, 218, 0.2) 100%); }
    .toolbox__row .toolbox__category--search.toolbox__category--selected {
      background-color: rgba(175, 255, 218, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--trade_parameters:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(48, 64, 159, 0.2) 100%); }
    .toolbox__row .toolbox__category--trade_parameters.toolbox__category--selected {
      background-color: rgba(48, 64, 159, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--purchase_conditions:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(0, 137, 123, 0.2) 100%); }
    .toolbox__row .toolbox__category--purchase_conditions.toolbox__category--selected {
      background-color: rgba(0, 137, 123, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--sell_conditions:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(120, 144, 156, 0.2) 100%); }
    .toolbox__row .toolbox__category--sell_conditions.toolbox__category--selected {
      background-color: rgba(120, 144, 156, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--trade_results:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(216, 26, 96, 0.2) 100%); }
    .toolbox__row .toolbox__category--trade_results.toolbox__category--selected {
      background-color: rgba(216, 26, 96, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--technical_analysis:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(104, 158, 56, 0.2) 100%); }
    .toolbox__row .toolbox__category--technical_analysis.toolbox__category--selected {
      background-color: rgba(104, 158, 56, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--utility:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(142, 37, 170, 0.2) 100%); }
    .toolbox__row .toolbox__category--utility.toolbox__category--selected {
      background-color: rgba(142, 37, 170, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--math:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(252, 139, 1, 0.2) 100%); }
    .toolbox__row .toolbox__category--math.toolbox__category--selected {
      background-color: rgba(252, 139, 1, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--text:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(93, 64, 55, 0.2) 100%); }
    .toolbox__row .toolbox__category--text.toolbox__category--selected {
      background-color: rgba(93, 64, 55, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--logic:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(24, 118, 210, 0.2) 100%); }
    .toolbox__row .toolbox__category--logic.toolbox__category--selected {
      background-color: rgba(24, 118, 210, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--lists:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(229, 56, 54, 0.2) 100%); }
    .toolbox__row .toolbox__category--lists.toolbox__category--selected {
      background-color: rgba(229, 56, 54, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--custom_functions:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(0, 172, 193, 0.2) 100%); }
    .toolbox__row .toolbox__category--custom_functions.toolbox__category--selected {
      background-color: rgba(0, 172, 193, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--variables:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(97, 97, 97, 0.2) 100%); }
    .toolbox__row .toolbox__category--variables.toolbox__category--selected {
      background-color: rgba(97, 97, 97, 0.1);
      transition: background-color 0.25s ease; }
    .toolbox__row .toolbox__category--loops:hover:not(.toolbox__category--selected) {
      background-image: linear-gradient(to right, #fff 25%, rgba(175, 180, 43, 0.2) 100%); }
    .toolbox__row .toolbox__category--loops.toolbox__category--selected {
      background-color: rgba(175, 180, 43, 0.1);
      transition: background-color 0.25s ease; }
  .toolbox__separator {
    padding: 20px 0;
    border-top: 1px solid #ebebeb; }
  .toolbox #search_input {
    padding: 10px;
    border-radius: 5px;
    border: solid #f4f4f6 1px;
    margin: 3px;
    font-size: 14px;
    font-weight: 700; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/** @define btn */
.btn {
  font-size: 1rem;
  display: inline-block;
  touch-action: manipulation;
  cursor: pointer;
  white-space: nowrap;
  padding: 0 1.6em;
  margin: 1.6em;
  border: 0;
  border-radius: 4px;
  height: 3.2em;
  min-width: 9.6em;
  transition: all 0.2s cubic-bezier(0.65, 0.05, 0.36, 1);
  outline: 0;
  position: relative;
  background: #39b19d;
  /* postcss-bem-linter: ignore */ }

.btn__text {
  font-size: 1.4em;
  color: rgba(0, 0, 0, 0.8);
  font-weight: 700;
  text-transform: unset;
  text-align: center;
  line-height: 1.5; }

.btn--link {
  max-width: 220px;
  margin: 1em auto;
  display: flex;
  align-items: center;
  justify-content: center;
  text-decoration: none; }

.btn:not([disabled]):hover {
  text-decoration: none; }

.btn--primary .btn__text {
  color: #ffffff; }

.btn--primary--orange {
  background: #ff9933;
  /* postcss-bem-linter: ignore */ }

.btn--primary--orange:hover:not([disabled]) {
  background: rgba(255, 153, 51, 0.84); }

.btn--primary--orange:active:not([disabled]) {
  background: #ff9933; }

.btn--primary--orange.effect:focus:not(:active):after {
  border: 0 solid #ff9933; }

.btn--primary--green {
  background: #39b19d;
  /* postcss-bem-linter: ignore */ }

.btn--primary--green:hover:not([disabled]) {
  background: #2d9f93; }

.btn--primary--green:active:not([disabled]) {
  background: #39b19d; }

.btn--primary--green.effect:focus:not(:active):after {
  border: 0 solid #39b19d; }

.btn--primary:disabled, .btn--primary[disabled] {
  background: rgba(0, 0, 0, 0.04);
  cursor: not-allowed; }

.btn--primary:disabled .btn__text, .btn--primary[disabled] .btn__text {
  color: rgba(0, 0, 0, 0.04); }

.btn--secondary {
  background: transparent; }

.btn--secondary--orange {
  /* postcss-bem-linter: ignore */ }

.btn--secondary--orange .btn__text {
  color: #ff9933; }

.btn--secondary--orange:hover:not([disabled]) {
  background: rgba(255, 153, 51, 0.16); }

.btn--secondary--orange:active:not([disabled]) {
  color: #ff9933; }

.btn--secondary--orange.effect:focus:not(:active):after {
  border: 0 solid #ff9933; }

.btn--secondary--green {
  border: 1px solid #39b19d;
  /* postcss-bem-linter: ignore */ }

.btn--secondary--green .btn__text {
  color: #39b19d; }

.btn--secondary--green:hover:not([disabled]) {
  border: 1px solid #2d9f93;
  color: #2d9f93;
  background: rgba(76, 175, 80, 0.1); }

.btn--secondary--green:active:not([disabled]) {
  border: 1px solid #39b19d;
  color: #39b19d; }

.btn--secondary--green.effect:focus:not(:active):after {
  border: 0 solid #39b19d; }

.btn--secondary:disabled, .btn--secondary[disabled] {
  background: rgba(0, 0, 0, 0.04);
  border: 0 !important;
  color: rgba(0, 0, 0, 0.04) !important;
  cursor: not-allowed !important; }

.btn--flat {
  background-color: transparent;
  font-weight: bold;
  border: solid 1px #999999;
  /* stylelint-disable-line color-no-hex */
  height: 3.2em;
  /* postcss-bem-linter: ignore */ }

.btn--flat .btn__text {
  color: #333333;
  /* stylelint-disable-line color-no-hex */ }

.btn--flat:hover:not([disabled]) {
  background: transparent; }

.btn--flat:active:not([disabled]) span {
  color: transparent; }

.btn--flat.effect:focus:not(:active):after {
  border: 0 solid #4c5794;
  /* stylelint-disable-line color-no-hex */ }

.btn--flat:disabled, .btn--flat[disabled] {
  background: transparent !important;
  border: 1px solid rgba(0, 0, 0, 0.04) !important;
  /* stylelint-disable-line color-no-hex */
  cursor: not-allowed !important; }

.btn--flat:disabled .btn__text, .btn--flat[disabled] .btn__text {
  color: rgba(0, 0, 0, 0.04) !important; }

.btn--alternate {
  background: rgba(153, 156, 172, 0.32);
  border-color: rgba(153, 156, 172, 0.32);
  padding: 8px 0;
  text-align: center;
  line-height: 100%;
  font-size: 1.2em;
  font-weight: bold; }

.btn--alternate .btn__text {
  color: #0b0e18; }

.btn.effect:focus:not(:active):after {
  content: '';
  position: absolute;
  top: -0.1em;
  left: -0.1em;
  bottom: -0.1em;
  right: -0.1em;
  border-radius: inherit;
  border: 0 solid #2a3052;
  opacity: 0.4;
  animation: buttonEffect 0.4s;
  animation-fill-mode: forwards;
  display: block; }

@keyframes buttonEffect {
  to {
    opacity: 0;
    top: -0.6em;
    left: -0.6em;
    bottom: -0.6em;
    right: -0.6em;
    border-width: 6px; } }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-field-error {
  position: absolute;
  top: 4rem;
  text-align: left !important;
  padding: 0 1.2rem;
  color: var(--color-red);
  font-size: var(--text-size-xs); }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/* stylelint-disable color-no-hex */
:root {
  --color-black: #0e0e0e;
  --color-black-2: #2a2a2a;
  --color-black-3: #333333;
  --color-black-4: #182039;
  --color-white: #ffffff;
  --color-red: #ff444f;
  --color-red-1: #dd573a;
  --color-red-2: #ffc9cc;
  --color-red-3: #d43e47;
  --color-grey-1: #f4f4f4;
  --color-grey-2: #e8e8e8;
  --color-grey-3: #646464;
  --color-grey-4: #fafbfb;
  --color-grey-5: #c2c2c2;
  --color-grey: #9b9b9b;
  --color-green: #85acb0;
  --color-blue: #4c76be;
  --color-blue-2: #365899;
  --text-size-xs: 1.2rem;
  --text-size-s: 1.6rem;
  --text-size-sm: 2rem;
  --text-size-m: 2.4rem;
  --text-size-l: 3.2rem;
  --text-size-xl: 4.8rem;
  --text-size-xxl: 6.4rem;
  --brand-dark-grey: #0e0e0e;
  --brand-strong-red: #cc2e3d;
  --brand-red-coral: #ff444f;
  --brand-orange: #ff6444;
  --brand-secondary: #85acb0; }

:root .theme--dark {
  --text-color: var(--color-white);
  --text-color-3: var(--color-white);
  --icon-general: var(--color-grey-5); }

:root .theme--light {
  --text-color: var(--color-black);
  --text-color-3: var(--color-black-3);
  --icon-general: var(--color-black-3); }

/* stylelint-enable color-no-hex */
.dc-input {
  position: relative;
  width: 100%;
  border-radius: 4px;
  border: 1px solid var(--color-grey-2);
  display: flex;
  align-items: center;
  margin-bottom: 1.8rem; }

.dc-input:focus-within {
  border-color: var(--color-green); }

.dc-input__field {
  background: none;
  color: var(--text-color);
  font-size: var(--text-size-s);
  padding: 1rem 1.2rem;
  width: 100%;
  height: 3.8rem;
  display: block; }

.dc-input__field::placeholder {
  opacity: 0;
  transition: opacity 0.25s; }

.dc-input__field--placeholder-visible::placeholder {
  opacity: 0.7; }

.dc-input__field:focus {
  outline: none; }

.dc-input__field:focus ~ label {
  transform: translate(-1.6rem, -2.2rem) scale(0.75);
  color: var(--color-green);
  padding: 0 4px; }

.theme--light .dc-input__field:focus ~ label {
  background-color: #ffffff; }

.theme--dark .dc-input__field:focus ~ label {
  background-color: #191c31; }

.dc-input__field:focus::placeholder {
  opacity: 0.7; }

.dc-input__field:not(.dc-input--no-placeholder):not(:focus):valid ~ label {
  transform: translate(-1.6rem, -2.2rem) scale(0.75);
  color: var(--text-color-3);
  padding: 0 4px; }

.theme--light .dc-input__field:not(.dc-input--no-placeholder):not(:focus):valid ~ label {
  background-color: #ffffff; }

.theme--dark .dc-input__field:not(.dc-input--no-placeholder):not(:focus):valid ~ label {
  background-color: #191c31; }

.dc-input__field[type=number]::-webkit-inner-spin-button, .dc-input__field[type=number]::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0; }

.dc-input__leading-icon {
  margin-left: 1rem;
  top: 0.7rem;
  position: absolute;
  left: 0;
  pointer-events: none;
  cursor: text;
  font-size: var(--text-size-s); }

.dc-input__leading-icon + .dc-input__field {
  padding-left: calc(1rem + 11px); }

.dc-input__trailing-icon {
  margin: 0 1.2rem 0 0 !important; }

.dc-input__label {
  font-size: var(--text-size-s);
  position: absolute;
  pointer-events: none;
  left: 1rem;
  top: 1rem; }

.dc-input:not(.dc-input--no-placeholder)__label {
  color: var(--color-grey);
  transition: 0.25s ease all;
  transform: translateZ(0); }

.dc-input--no-placeholder label {
  transform: translate(-1.6rem, -2.2rem) scale(0.75);
  color: var(--color-green);
  padding: 0 4px; }

.theme--light .dc-input--no-placeholder label {
  background-color: #ffffff; }

.theme--dark .dc-input--no-placeholder label {
  background-color: #191c31; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-checkbox {
  display: flex;
  justify-content: flex-start;
  cursor: pointer;
  align-items: center; }

.dc-checkbox__input {
  display: none; }

.dc-checkbox__box {
  display: block;
  width: 16px;
  height: 16px;
  transition: 0.3s ease-in-out;
  flex-shrink: 0;
  margin: 2px 8px 0 0;
  border-radius: 2px;
  align-self: flex-start;
  border: 2px solid #7f8397; }

.dc-checkbox__box--active {
  border: none;
  background-color: #ff9933; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.theme--light .dc-modal-header__close {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }

.theme--light .dc-modal-header__close .color1-fill {
  fill: rgba(0, 0, 0, 0.8); }

.theme--light .dc-modal-header__close .color1-stroke {
  stroke: rgba(0, 0, 0, 0.8); }

.theme--dark .dc-modal-header__close {
  /* postcss-bem-linter: ignore */
  /* postcss-bem-linter: ignore */ }

.theme--dark .dc-modal-header__close .color1-fill {
  fill: #ffffff; }

.theme--dark .dc-modal-header__close .color1-stroke {
  stroke: #ffffff; }

/**
 * @define dc-modal
 */
.dc-modal {
  /**
     * @define dc-modal-header
     */ }

.dc-modal__container {
  min-width: 400px;
  position: relative;
  overflow: hidden;
  border-radius: 4px;
  transition: transform 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25), opacity 0.25s cubic-bezier(0.25, 0.1, 0.1, 0.25); }

.theme--light .dc-modal__container {
  background-color: #ffffff;
  box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.4); }

.theme--dark .dc-modal__container {
  background-color: #191c31;
  box-shadow: 0 4px 6px 0 rgba(0, 0, 0, 0.72); }

.dc-modal__container--hide {
  display: none; }

.dc-modal__container--enter, .dc-modal__container--exit {
  transform: translateY(50px);
  opacity: 0;
  pointer-events: none; }

.dc-modal__container--enter-done {
  transform: translateY(0);
  opacity: 1;
  pointer-events: auto; }

.dc-modal-header {
  display: flex;
  justify-content: space-between;
  width: 100%;
  line-height: 24px;
  align-items: center; }

.dc-modal-header__title {
  font-size: 1.6em;
  color: rgba(0, 0, 0, 0.8);
  font-weight: 700;
  text-transform: capitalize;
  text-align: left;
  line-height: 1.75;
  line-height: 24px;
  padding: 16px; }

.theme--light .dc-modal-header__title {
  color: rgba(0, 0, 0, 0.8); }

.theme--dark .dc-modal-header__title {
  color: #ffffff; }

.dc-modal-header__section {
  flex-grow: 1;
  padding: 16px;
  line-height: 24px; }

.dc-modal-header__close {
  display: block;
  cursor: pointer;
  padding-right: 16px; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-modal__container {
  width: 450px; }

.dc-modal-header__modal--saveload {
  border-bottom: solid 1px;
  border-color: #d6dadb; }

.dc-modal-header__title {
  color: rgba(0, 0, 0, 0.8); }

.dc-modal__modal--saveload .modal--content {
  padding: 45px 76px 20px; }

.dc-modal__modal--saveload .modal--footer {
  text-align: right; }

.dc-modal__modal--saveload .modal--content-row {
  display: flex;
  justify-content: center; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.toolbar {
  height: 76px;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  box-shadow: inset 0 1px 0 0 #f2f3f4, inset 0 -1px 0 0 #f2f3f4;
  padding: 5px 16px; }
  .toolbar .toolbar__btn-icon {
    display: flex;
    justify-content: center; }
    .toolbar .toolbar__btn-icon > * {
      align-self: center; }
    .toolbar .toolbar__btn-icon-text {
      font-size: 1.6em;
      color: #ffffff;
      font-weight: 700;
      text-transform: none;
      text-align: center;
      line-height: 1.75;
      margin-left: 8px; }
  .toolbar__section {
    display: flex; }
    .toolbar__section > * {
      align-self: center;
      margin: 3px 10px; }
    .toolbar__section .toolbar__btn {
      margin: 3px 10px; }
    .toolbar__section > .toolbar__btn-icon,
    .toolbar__section .toolbar__group {
      height: 50px; }
    .toolbar__section > .toolbar__form .dc-input__field {
      height: 50px; }
    .toolbar__section > .toolbar__form .dc-input {
      margin-bottom: 3px; }
  .toolbar__icon {
    cursor: pointer;
    border: none;
    margin: 12px; }
  .toolbar__group {
    display: flex;
    border-radius: 4px;
    border: solid 1px #d6dadb; }
    .toolbar__group-btn {
      padding: 0px 8px; }
      .toolbar__group-btn > * {
        align-self: center; }
  .toolbar__form {
    width: 18%;
    min-width: 160px; }
    .toolbar__form-field {
      margin-bottom: 0;
      margin-top: 5px; }

.vertical-divider {
  width: 1px;
  height: 17px;
  margin: 8px;
  background-color: #f2f3f4; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/** @define dc-drawer */
.dc-drawer {
  position: absolute;
  top: 1px;
  left: calc(100vw - 18px);
  width: 366px;
  height: calc(100vh - 82px);
  z-index: 99;
  will-change: transform;
  transition: transform 0.3s ease; }

.theme--light .dc-drawer {
  background: #ffffff; }

.theme--dark .dc-drawer {
  background: #101320; }

.dc-drawer__container {
  display: flex;
  flex-direction: column;
  padding-left: 0.5em;
  height: 100%; }

.dc-drawer__header {
  line-height: 40px;
  font-weight: 700;
  font-size: 1.6em;
  padding-left: 1em; }

.theme--light .dc-drawer__header {
  border-bottom: 1px solid #f4f4f6; }

.theme--dark .dc-drawer__header {
  border-bottom: 1px solid #101320; }

.dc-drawer__content {
  flex-grow: 1; }

.dc-drawer__footer {
  line-height: 40px;
  font-weight: 700;
  font-size: 1.6em;
  align-items: center;
  padding-left: 1em; }

.theme--light .dc-drawer__footer {
  border-top: 1px solid #f4f4f6; }

.theme--dark .dc-drawer__footer {
  border-top: 1px solid #101320; }

.dc-drawer__toggle {
  position: absolute;
  top: 0;
  width: 18px;
  height: 100vh;
  display: table-cell;
  vertical-align: middle;
  cursor: pointer; }

.theme--light .dc-drawer__toggle {
  background-color: #f4f4f6; }

.theme--dark .dc-drawer__toggle {
  background-color: #0b0e18; }

.dc-drawer__toggle--open {
  width: 5px; }

.dc-drawer__toggle-icon-wraper {
  height: 11px;
  position: relative;
  top: 50%;
  justify-content: center;
  display: flex; }

.dc-drawer__toggle-icon {
  position: relative;
  width: 3px;
  height: 3px; }

.theme--light .dc-drawer__toggle-icon {
  background-color: #b3b3b3; }

.theme--dark .dc-drawer__toggle-icon {
  background-color: #282a37; }

.dc-drawer__toggle-icon:before, .dc-drawer__toggle-icon:after {
  content: '';
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  background-color: inherit;
  border-radius: inherit; }

.dc-drawer__toggle-icon:before {
  top: 4px; }

.dc-drawer__toggle-icon:after {
  top: 8px; }

.dc-drawer--open {
  transform: translateX(-366px);
  left: 100vw; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
.dc-tabs__list {
  display: table;
  width: 100%;
  line-height: 40px; }

.theme--light .dc-tabs__list {
  border-bottom: 1px solid #f4f4f6; }

.theme--dark .dc-tabs__list {
  border-bottom: 1px solid #101320; }

.dc-tabs__item {
  display: table-cell;
  list-style: none;
  font-size: 14px;
  text-align: center; }

.theme--light .dc-tabs__active {
  border-bottom: 2px solid #e31c4b;
  font-weight: 700; }

.theme--dark .dc-tabs__active {
  border-bottom: 2px solid #e31c4b;
  font-weight: 700; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/
/**
* @define -panel
**/
.run-panel {
  height: calc(100vh - 158px);
  top: 78px; }
  .run-panel__footer {
    text-align: center; }
  .run-panel__button {
    margin-left: 0 !important; }
  .run-panel__icon-info {
    vertical-align: middle; }

/*------------------------------------*
 *  # Constants
 *------------------------------------*/
/* stylelint-disable color-no-hex */
/* stylelint-enable color-no-hex */
/*------------------------------------*
 *  # SASS Mixins and Functions
 *------------------------------------*/
/*
 * SASS interpolation
 */
/*
 * PX to EM
 * @param $px - px value to be converted
 * @param $base - base font size (in `em`)
 * Note: 'em' values are calculate based on the element font-size
 *       to properly converts 'px' to 'em', please pass in the element font-size with it
 * Usage example:
    padding: em(16px, 1.6em); // font-size in 'em'
 */
/*
 * Set property by passing a property name, and values.
 * @param $property name - padding, margin etc.
 * @param $values        - values in `px` (space separated for multiple values)
 * @param $font-size     - base font-size in `em`
 * Usage example:
   @include toEm(padding, 8px 16px 8px, 1.6em);
 */
/*
 * Generate typefaces key-value pair of variable name and config
 * Example:
   --paragraph-center-bold-black: (14px, center, bold, black)
 */
/*
 * Sets font-size, font-weight, color, text-transform, text-align and line-height
 * Usage example:
   @include setTypeface(16px, bold, black, uppercase);
 */
/*
 * Set typefaces by passing a typeface variable name
 * @param $var   - typeface variable
 * @param $tt    - text-transform property
 * @param $align - text-align property
 * Usage example:
   @include typeface(--paragraph-bold-black, uppercase, center);
 */
/*
 * Range Slider Thumb styling is set here
 */
/*
 * SVG icons colors
 */
/*
 * Bar Spinner Animation
 * @param $count    - number of bars
 * @param $duration - duration of animation
 * @param $phase    - each bar phase change delay
 * Usage example:
   @include createBarspinnerAnimation(5, 1.2s, 0,1);
 */
/*
 * Implementation of themes
 * generate sets of themes keys object property (dark / light)
 * @param $themes - themes property
 * Usage example:
   @include themify($themes) { color: themed('background_color') }
 */
/*
 * Generate typefaces key-value pair of themefy object
 * Should be inside themify mixins
 * Example:
   @include themify($themes) { border-color: 1px solid themed('background_color') }
 */
/*
 * Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
 * Themified Tooltip colors
 * @param $color - color property
 * Usage example:
   @include tooltipColor($COLOR_RED);
 */
/*
    Constants
*/
/*
    Variables
*/
/*
    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.
    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.
    Variables name example: --title-center-semibold-red
 */
/*
    to use styles without modifier class on .inline-icon
    use @extend

    e.g. style icon on parent hover:
        a:hover .inline-icon {
            @extend %inline-icon.active;
        }
*/


/*# sourceMappingURL=bot.css.map*/