(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "../../components/lib/dropdown.css":
/*!*******************************************************************************************!*\
  !*** /Users/samyong/Documents/Source_code/deriv-app/packages/components/lib/dropdown.css ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvZHJvcGRvd24uY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy9Vc2Vycy9zYW15b25nL0RvY3VtZW50cy9Tb3VyY2VfY29kZS9kZXJpdi1hcHAvcGFja2FnZXMvY29tcG9uZW50cy9saWIvZHJvcGRvd24uY3NzPzU0YTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.css\n");

/***/ }),

/***/ "../../components/lib/dropdown.js":
/*!******************************************************************************************!*\
  !*** /Users/samyong/Documents/Source_code/deriv-app/packages/components/lib/dropdown.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(g,I){ true?module.exports=I(__webpack_require__(/*! prop-types */ \"../../components/node_modules/prop-types/index.js\"),__webpack_require__(/*! react */ \"../../components/node_modules/react/index.js\"),__webpack_require__(/*! classnames */ \"../../components/node_modules/classnames/index.js\"),__webpack_require__(/*! react-transition-group */ \"../../components/node_modules/react-transition-group/esm/index.js\"),__webpack_require__(/*! react-dom */ \"../../components/node_modules/react-dom/index.js\"),__webpack_require__(/*! react-pose */ \"../../components/node_modules/react-pose/dist/react-pose.es.js\"),__webpack_require__(/*! tt-react-custom-scrollbars */ \"../../components/node_modules/tt-react-custom-scrollbars/lib/index.js\")):undefined}(window,function(__WEBPACK_EXTERNAL_MODULE__0__,__WEBPACK_EXTERNAL_MODULE__1__,__WEBPACK_EXTERNAL_MODULE__2__,__WEBPACK_EXTERNAL_MODULE__3__,__WEBPACK_EXTERNAL_MODULE__4__,__WEBPACK_EXTERNAL_MODULE__6__,__WEBPACK_EXTERNAL_MODULE__10__){return function(g){var I={};function C(e){if(I[e])return I[e].exports;var A=I[e]={i:e,l:!1,exports:{}};return g[e].call(A.exports,A,A.exports,C),A.l=!0,A.exports}return C.m=g,C.c=I,C.d=function(g,I,e){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:e})},C.r=function(g){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(g,\"__esModule\",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&\"object\"==typeof g&&g&&g.__esModule)return g;var e=Object.create(null);if(C.r(e),Object.defineProperty(e,\"default\",{enumerable:!0,value:g}),2&I&&\"string\"!=typeof g)for(var A in g)C.d(e,A,function(I){return g[I]}.bind(null,A));return e},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,\"a\",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p=\"\",C(C.s=28)}([function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJwcm9wLXR5cGVzXCI/MzgzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///0\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__1__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJyZWFjdFwiPzU4OGUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__2__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJjbGFzc25hbWVzXCI/YWFhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///2\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__3__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCI/ZGRlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzNfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///3\\n\")},function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__4__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJyZWFjdC1kb21cIj81ZTlhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNF9fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///4\\n\")},,function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__6__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vZXh0ZXJuYWwgXCJyZWFjdC1wb3NlXCI/OTZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzZfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///6\\n\")},,,,function(module,exports){eval(\"module.exports = __WEBPACK_EXTERNAL_MODULE__10__;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdL2V4dGVybmFsIFwidHQtcmVhY3QtY3VzdG9tLXNjcm9sbGJhcnNcIj8xMTY3Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTBfXzsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///10\\n\")},function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./src/components/popover/popover.scss\\nvar popover = __webpack_require__(13);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"react-dom\"\\nvar external_react_dom_ = __webpack_require__(4);\\nvar external_react_dom_default = /*#__PURE__*/__webpack_require__.n(external_react_dom_);\\n\\n// EXTERNAL MODULE: external \"react-pose\"\\nvar external_react_pose_ = __webpack_require__(6);\\nvar external_react_pose_default = /*#__PURE__*/__webpack_require__.n(external_react_pose_);\\n\\n// CONCATENATED MODULE: ./src/components/icon-info-blue.jsx\\n\\n // TODO remove this file entirely when icon component is ready.\\n\\nvar icon_info_blue_IconInfoBlue = function IconInfoBlue(_ref) {\\n  var className = _ref.className;\\n  return external_react_default.a.createElement(\"svg\", {\\n    className: className,\\n    width: \"16\",\\n    height: \"16\",\\n    viewBox: \"0 0 16 16\"\\n  }, external_react_default.a.createElement(\"g\", {\\n    fill: \"none\",\\n    fillRule: \"evenodd\"\\n  }, external_react_default.a.createElement(\"circle\", {\\n    cx: \"8\",\\n    cy: \"8\",\\n    r: \"8\",\\n    fill: \"#2196F3\"\\n  }), external_react_default.a.createElement(\"g\", {\\n    fill: \"#FFF\",\\n    transform: \"translate(6.5 4)\"\\n  }, external_react_default.a.createElement(\"circle\", {\\n    cx: \"1.5\",\\n    cy: \"1\",\\n    r: \"1\"\\n  }), external_react_default.a.createElement(\"rect\", {\\n    width: \"2\",\\n    height: \"5\",\\n    x: \".5\",\\n    y: \"3\",\\n    rx: \"1\"\\n  }))));\\n};\\n\\nicon_info_blue_IconInfoBlue.propTypes = {\\n  className: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var icon_info_blue = (icon_info_blue_IconInfoBlue);\\n// CONCATENATED MODULE: ./src/components/popover/popover-bubble.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\nvar FadeIn = external_react_pose_default.a.span({\\n  enter: {\\n    opacity: 1,\\n    transition: {\\n      duration: 150\\n    }\\n  },\\n  exit: {\\n    opacity: 0,\\n    transition: {\\n      duration: 150\\n    }\\n  }\\n});\\n\\nvar popover_bubble_PopoverBubble =\\n/*#__PURE__*/\\nfunction (_React$PureComponent) {\\n  _inherits(PopoverBubble, _React$PureComponent);\\n\\n  function PopoverBubble() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, PopoverBubble);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PopoverBubble)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n\\n    _this.calculatePosition = function () {\\n      var _this$props = _this.props,\\n          alignment = _this$props.alignment,\\n          target_rectangle = _this$props.target_rectangle,\\n          _this$props$margin = _this$props.margin,\\n          margin = _this$props$margin === void 0 ? 0 : _this$props$margin;\\n\\n      switch (alignment) {\\n        case \\'top\\':\\n          return {\\n            left: target_rectangle.width / 2 + target_rectangle.left,\\n            bottom: window.innerHeight - target_rectangle.top + margin,\\n            transform: \\'translateX(-50%)\\'\\n          };\\n\\n        case \\'bottom\\':\\n          return {\\n            left: target_rectangle.width / 2 + target_rectangle.left,\\n            top: target_rectangle.bottom + margin,\\n            transform: \\'translateX(-50%)\\'\\n          };\\n\\n        case \\'left\\':\\n          return {\\n            right: window.innerWidth - target_rectangle.left + margin,\\n            top: target_rectangle.height / 2 + target_rectangle.top,\\n            transform: \\'translateY(-50%)\\'\\n          };\\n\\n        case \\'right\\':\\n          return {\\n            left: target_rectangle.right + margin,\\n            top: target_rectangle.height / 2 + target_rectangle.top,\\n            transform: \\'translateY(-50%)\\'\\n          };\\n\\n        default:\\n          return {\\n            left: target_rectangle.left,\\n            top: target_rectangle.top\\n          };\\n      }\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(PopoverBubble, [{\\n    key: \"render\",\\n    value: function render() {\\n      var _this$props2 = this.props,\\n          alignment = _this$props2.alignment,\\n          className = _this$props2.className,\\n          has_error = _this$props2.has_error,\\n          icon = _this$props2.icon,\\n          id = _this$props2.id,\\n          is_open = _this$props2.is_open,\\n          message = _this$props2.message,\\n          target_rectangle = _this$props2.target_rectangle,\\n          portal_container = _this$props2.portal_container;\\n      if (!target_rectangle) return null;\\n      var popover_bubble = external_react_default.a.createElement(external_react_pose_[\"PoseGroup\"], null, is_open && external_react_default.a.createElement(FadeIn, {\\n        key: \"fade_in\",\\n        initialPose: \"exit\",\\n        style: {\\n          position: \\'fixed\\',\\n          zIndex: 999\\n        }\\n      }, external_react_default.a.createElement(\"span\", {\\n        style: target_rectangle ? this.calculatePosition() : {},\\n        \"data-popover-pos\": alignment,\\n        className: external_classnames_default()(className, \\'dc-popover__bubble\\', {\\n          \\'dc-popover__bubble--error\\': has_error\\n        }),\\n        id: id\\n      }, icon === \\'info\\' && external_react_default.a.createElement(\"i\", {\\n        className: \"dc-popover__bubble__icon\"\\n      }, external_react_default.a.createElement(icon_info_blue, null)), external_react_default.a.createElement(\"span\", {\\n        className: \"dc-popover__bubble__text\"\\n      }, message), external_react_default.a.createElement(\"span\", {\\n        className: \"dc-popover__bubble__arrow\"\\n      }))));\\n      return external_react_dom_default.a.createPortal(popover_bubble, document.getElementById(portal_container));\\n    }\\n  }]);\\n\\n  return PopoverBubble;\\n}(external_react_default.a.PureComponent);\\n\\npopover_bubble_PopoverBubble.propTypes = {\\n  alignment: external_prop_types_default.a.string,\\n  children: external_prop_types_default.a.node,\\n  className: external_prop_types_default.a.string,\\n  has_error: external_prop_types_default.a.bool,\\n  icon: external_prop_types_default.a.string,\\n  id: external_prop_types_default.a.string,\\n  is_open: external_prop_types_default.a.bool,\\n  margin: external_prop_types_default.a.number,\\n  message: external_prop_types_default.a.string.isRequired,\\n  target_rectangle: external_prop_types_default.a.object\\n};\\n/* harmony default export */ var popover_popover_bubble = (popover_bubble_PopoverBubble);\\n// CONCATENATED MODULE: ./src/components/icon-info-outline.jsx\\n\\n\\n // TODO remove this file entirely when icon component is ready.\\n\\nvar icon_info_outline_IconInfoOutline = function IconInfoOutline(_ref) {\\n  var className = _ref.className,\\n      onMouseEnter = _ref.onMouseEnter,\\n      onMouseLeave = _ref.onMouseLeave;\\n  return external_react_default.a.createElement(\"svg\", {\\n    className: external_classnames_default()(\\'inline-icon\\', className),\\n    height: \"16\",\\n    onMouseEnter: onMouseEnter,\\n    onMouseLeave: onMouseLeave,\\n    viewBox: \"0 0 16 16\",\\n    width: \"16\"\\n  }, external_react_default.a.createElement(\"path\", {\\n    className: \"color1-fill\",\\n    fill: \"rgba(0, 0, 0, 0.16)\",\\n    fillRule: \"evenodd\",\\n    d: \"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 1 8 0a8 8 0 0 1 0 16zM8 6a.75.75 0 1 0 0-1.5A.75.75 0 0 0 8 6zm0 1a.5.5 0 0 0-.5.5v4a.5.5 0 1 0 1 0v-4A.5.5 0 0 0 8 7z\"\\n  }));\\n};\\n\\nicon_info_outline_IconInfoOutline.propTypes = {\\n  className: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var icon_info_outline = (icon_info_outline_IconInfoOutline);\\n// CONCATENATED MODULE: ./src/components/icon-question.jsx\\n\\n // TODO remove this file entirely when icon component is ready.\\n\\nvar icon_question_IconQuestion = function IconQuestion(_ref) {\\n  var className = _ref.className;\\n  return external_react_default.a.createElement(\"svg\", {\\n    className: className,\\n    width: \"16\",\\n    height: \"16\",\\n    viewBox: \"0 0 16 16\"\\n  }, external_react_default.a.createElement(\"g\", {\\n    fill: \"#FFF\",\\n    fillRule: \"evenodd\"\\n  }, external_react_default.a.createElement(\"path\", {\\n    d: \"M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm0-1A7 7 0 1 0 8 1a7 7 0 0 0 0 14z\",\\n    fillRule: \"nonzero\"\\n  }), external_react_default.a.createElement(\"path\", {\\n    d: \"M7.39 9.518c.007-.373.052-.668.134-.885.082-.216.25-.456.503-.72l.646-.636c.276-.298.415-.618.415-.96 0-.33-.09-.588-.272-.774-.18-.187-.444-.28-.789-.28-.335 0-.605.084-.809.254a.842.842 0 0 0-.306.682H6c.007-.508.196-.918.57-1.23.373-.313.859-.469 1.457-.469.622 0 1.106.16 1.453.478.347.318.52.755.52 1.31 0 .55-.266 1.091-.799 1.625l-.538.508c-.24.255-.36.62-.36 1.097h-.912zm-.039 1.492a.5.5 0 0 1 .136-.355c.09-.096.224-.144.402-.144.178 0 .312.048.404.144a.493.493 0 0 1 .139.355.477.477 0 0 1-.139.351c-.092.093-.226.139-.404.139-.178 0-.312-.046-.402-.139a.481.481 0 0 1-.136-.35z\"\\n  })));\\n};\\n\\nicon_question_IconQuestion.propTypes = {\\n  className: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var icon_question = (icon_question_IconQuestion);\\n// CONCATENATED MODULE: ./src/components/icon-red-dot.jsx\\n\\n // TODO remove this file entirely when icon component is ready.\\n\\nvar icon_red_dot_IconRedDot = function IconRedDot(_ref) {\\n  var className = _ref.className;\\n  return external_react_default.a.createElement(\"svg\", {\\n    className: className,\\n    width: \"4\",\\n    height: \"4\"\\n  }, external_react_default.a.createElement(\"circle\", {\\n    cx: \"1163\",\\n    cy: \"626\",\\n    r: \"2\",\\n    transform: \"translate(-1161 -624)\",\\n    fill: \"#E31C4B\",\\n    fillRule: \"nonzero\"\\n  }));\\n};\\n\\nicon_red_dot_IconRedDot.propTypes = {\\n  className: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var icon_red_dot = (icon_red_dot_IconRedDot);\\n// CONCATENATED MODULE: ./src/components/popover/popover.jsx\\nfunction popover_typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { popover_typeof = function _typeof(obj) { return typeof obj; }; } else { popover_typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return popover_typeof(obj); }\\n\\nfunction popover_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction popover_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction popover_createClass(Constructor, protoProps, staticProps) { if (protoProps) popover_defineProperties(Constructor.prototype, protoProps); if (staticProps) popover_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction popover_possibleConstructorReturn(self, call) { if (call && (popover_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return popover_assertThisInitialized(self); }\\n\\nfunction popover_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction popover_getPrototypeOf(o) { popover_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return popover_getPrototypeOf(o); }\\n\\nfunction popover_inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) popover_setPrototypeOf(subClass, superClass); }\\n\\nfunction popover_setPrototypeOf(o, p) { popover_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return popover_setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar popover_Popover =\\n/*#__PURE__*/\\nfunction (_React$PureComponent) {\\n  popover_inherits(Popover, _React$PureComponent);\\n\\n  function Popover(props) {\\n    var _this;\\n\\n    popover_classCallCheck(this, Popover);\\n\\n    _this = popover_possibleConstructorReturn(this, popover_getPrototypeOf(Popover).call(this, props));\\n\\n    _this.toggleOpen = function () {\\n      _this.setState({\\n        is_open: Boolean(_this.props.message),\\n        target_rectangle: _this.target_reference.current.getBoundingClientRect()\\n      });\\n    };\\n\\n    _this.toggleClose = function () {\\n      return _this.setState({\\n        is_open: false\\n      });\\n    };\\n\\n    _this.state = {\\n      is_open: false,\\n      target_rectangle: null\\n    };\\n    _this.target_reference = external_react_default.a.createRef();\\n    return _this;\\n  }\\n\\n  popover_createClass(Popover, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      this.setState({\\n        is_open: this.props.has_error,\\n        target_rectangle: this.target_reference.current.getBoundingClientRect()\\n      });\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this$props = this.props,\\n          alignment = _this$props.alignment,\\n          children = _this$props.children,\\n          classNameBubble = _this$props.classNameBubble,\\n          classNameTarget = _this$props.classNameTarget,\\n          classNameTargetIcon = _this$props.classNameTargetIcon,\\n          disable_target_icon = _this$props.disable_target_icon,\\n          disable_message_icon = _this$props.disable_message_icon,\\n          has_error = _this$props.has_error,\\n          icon = _this$props.icon,\\n          id = _this$props.id,\\n          margin = _this$props.margin,\\n          message = _this$props.message;\\n      var icon_class_name = external_classnames_default()(classNameTargetIcon, icon);\\n      return external_react_default.a.createElement(\"div\", {\\n        className: \"dc-popover\",\\n        id: id,\\n        onMouseEnter: this.toggleOpen,\\n        onMouseLeave: this.toggleClose\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: external_classnames_default()(classNameTarget, \\'dc-popover__target\\'),\\n        ref: this.target_reference\\n      }, !disable_target_icon && external_react_default.a.createElement(\"i\", {\\n        className: message ? \\'dc-popover__target__icon\\' : \\'dc-popover__target__icon--disabled\\'\\n      }, icon === \\'info\\' && external_react_default.a.createElement(icon_info_outline, {\\n        className: icon_class_name\\n      }), icon === \\'question\\' && external_react_default.a.createElement(icon_question, {\\n        className: icon_class_name\\n      }), icon === \\'dot\\' && external_react_default.a.createElement(icon_red_dot, {\\n        className: icon_class_name\\n      })), children), external_react_default.a.createElement(popover_popover_bubble, {\\n        alignment: alignment,\\n        className: classNameBubble,\\n        has_error: has_error,\\n        icon: !disable_message_icon && icon,\\n        id: \"\".concat(id, \"_bubble\"),\\n        is_open: this.state.is_open,\\n        target_rectangle: this.state.target_rectangle,\\n        margin: margin,\\n        message: message,\\n        portal_container: this.props.portal_container\\n      }));\\n    }\\n  }]);\\n\\n  return Popover;\\n}(external_react_default.a.PureComponent);\\n\\npopover_Popover.defaultProps = {\\n  portal_container: \\'deriv_app\\'\\n};\\npopover_Popover.propTypes = {\\n  alignment: external_prop_types_default.a.string,\\n  children: external_prop_types_default.a.node,\\n  classNameBubble: external_prop_types_default.a.string,\\n  classNameTarget: external_prop_types_default.a.string,\\n  classNameTargetIcon: external_prop_types_default.a.string,\\n  disable_target_icon: external_prop_types_default.a.bool,\\n  has_error: external_prop_types_default.a.bool,\\n  icon: external_prop_types_default.a.string,\\n  id: external_prop_types_default.a.string,\\n  margin: external_prop_types_default.a.number,\\n  message: external_prop_types_default.a.string,\\n  portal_container: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var popover_popover = (popover_Popover);\\n// CONCATENATED MODULE: ./src/components/popover/index.js\\n/* concated harmony reexport default */__webpack_require__.d(__webpack_exports__, \"default\", function() { return popover_popover; });\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvaWNvbi1pbmZvLWJsdWUuanN4P2YwMTUiLCJ3ZWJwYWNrOi8vZGVyaXYtY29tcG9uZW50LltuYW1lXS8uL3NyYy9jb21wb25lbnRzL3BvcG92ZXIvcG9wb3Zlci1idWJibGUuanN4PzA3ZDUiLCJ3ZWJwYWNrOi8vZGVyaXYtY29tcG9uZW50LltuYW1lXS8uL3NyYy9jb21wb25lbnRzL2ljb24taW5mby1vdXRsaW5lLmpzeD9hOTI5Iiwid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9pY29uLXF1ZXN0aW9uLmpzeD82MzRmIiwid2VicGFjazovL2Rlcml2LWNvbXBvbmVudC5bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9pY29uLXJlZC1kb3QuanN4PzI0OWMiLCJ3ZWJwYWNrOi8vZGVyaXYtY29tcG9uZW50LltuYW1lXS8uL3NyYy9jb21wb25lbnRzL3BvcG92ZXIvcG9wb3Zlci5qc3g/MzU5MSIsIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9pbmRleC5qcz9iNjY3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgICAgIGZyb20gJ3JlYWN0JztcblxuLy8gVE9ETyByZW1vdmUgdGhpcyBmaWxlIGVudGlyZWx5IHdoZW4gaWNvbiBjb21wb25lbnQgaXMgcmVhZHkuXG5jb25zdCBJY29uSW5mb0JsdWUgPSAoeyBjbGFzc05hbWUgfSkgPT4gKFxuICAgIDxzdmcgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHdpZHRoPScxNicgaGVpZ2h0PScxNicgdmlld0JveD0nMCAwIDE2IDE2Jz5cbiAgICAgICAgPGcgZmlsbD0nbm9uZScgZmlsbFJ1bGU9J2V2ZW5vZGQnPlxuICAgICAgICAgICAgPGNpcmNsZSBjeD0nOCcgY3k9JzgnIHI9JzgnIGZpbGw9JyMyMTk2RjMnIC8+XG4gICAgICAgICAgICA8ZyBmaWxsPScjRkZGJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSg2LjUgNCknPlxuICAgICAgICAgICAgICAgIDxjaXJjbGUgY3g9JzEuNScgY3k9JzEnIHI9JzEnIC8+XG4gICAgICAgICAgICAgICAgPHJlY3Qgd2lkdGg9JzInIGhlaWdodD0nNScgeD0nLjUnIHk9JzMnIHJ4PScxJyAvPlxuICAgICAgICAgICAgPC9nPlxuICAgICAgICA8L2c+XG4gICAgPC9zdmc+XG4pO1xuXG5JY29uSW5mb0JsdWUucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEljb25JbmZvQmx1ZTtcbiIsImltcG9ydCBjbGFzc05hbWVzICAgICAgICAgICBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgICAgICAgICAgICBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCAgICAgICAgICAgICAgICBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gICAgICAgICAgICAgZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBwb3NlZCwgeyBQb3NlR3JvdXAgfSBmcm9tICdyZWFjdC1wb3NlJztcbmltcG9ydCBJY29uSW5mb0JsdWUgICAgICAgICBmcm9tICcuLi9pY29uLWluZm8tYmx1ZS5qc3gnO1xuXG5jb25zdCBGYWRlSW4gPSBwb3NlZC5zcGFuKHtcbiAgICBlbnRlcjoge1xuICAgICAgICBvcGFjaXR5ICAgOiAxLFxuICAgICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgICAgICBkdXJhdGlvbjogMTUwLFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZXhpdDoge1xuICAgICAgICBvcGFjaXR5ICAgOiAwLFxuICAgICAgICB0cmFuc2l0aW9uOiB7XG4gICAgICAgICAgICBkdXJhdGlvbjogMTUwLFxuICAgICAgICB9LFxuICAgIH0sXG59KTtcblxuY2xhc3MgUG9wb3ZlckJ1YmJsZSBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNhbGN1bGF0ZVBvc2l0aW9uID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IGFsaWdubWVudCwgdGFyZ2V0X3JlY3RhbmdsZSwgbWFyZ2luID0gMCB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBzd2l0Y2ggKGFsaWdubWVudCkge1xuICAgICAgICAgICAgY2FzZSAndG9wJzogcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBsZWZ0ICAgICA6ICh0YXJnZXRfcmVjdGFuZ2xlLndpZHRoIC8gMikgKyB0YXJnZXRfcmVjdGFuZ2xlLmxlZnQsXG4gICAgICAgICAgICAgICAgYm90dG9tICAgOiAod2luZG93LmlubmVySGVpZ2h0IC0gdGFyZ2V0X3JlY3RhbmdsZS50b3ApICsgbWFyZ2luLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6IHJldHVybiB7XG4gICAgICAgICAgICAgICAgbGVmdCAgICAgOiAodGFyZ2V0X3JlY3RhbmdsZS53aWR0aCAvIDIpICsgdGFyZ2V0X3JlY3RhbmdsZS5sZWZ0LFxuICAgICAgICAgICAgICAgIHRvcCAgICAgIDogdGFyZ2V0X3JlY3RhbmdsZS5ib3R0b20gKyBtYXJnaW4sXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKScsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2FzZSAnbGVmdCc6IHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmlnaHQgICAgOiAod2luZG93LmlubmVyV2lkdGggLSB0YXJnZXRfcmVjdGFuZ2xlLmxlZnQpICsgbWFyZ2luLFxuICAgICAgICAgICAgICAgIHRvcCAgICAgIDogKHRhcmdldF9yZWN0YW5nbGUuaGVpZ2h0IC8gMikgKyB0YXJnZXRfcmVjdGFuZ2xlLnRvcCxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdyaWdodCc6IHJldHVybiB7XG4gICAgICAgICAgICAgICAgbGVmdCAgICAgOiB0YXJnZXRfcmVjdGFuZ2xlLnJpZ2h0ICsgbWFyZ2luLFxuICAgICAgICAgICAgICAgIHRvcCAgICAgIDogKHRhcmdldF9yZWN0YW5nbGUuaGVpZ2h0IC8gMikgKyB0YXJnZXRfcmVjdGFuZ2xlLnRvcCxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldF9yZWN0YW5nbGUubGVmdCxcbiAgICAgICAgICAgICAgICB0b3AgOiB0YXJnZXRfcmVjdGFuZ2xlLnRvcCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBhbGlnbm1lbnQsXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICAgICBoYXNfZXJyb3IsXG4gICAgICAgICAgICBpY29uLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBpc19vcGVuLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIHRhcmdldF9yZWN0YW5nbGUsXG4gICAgICAgICAgICBwb3J0YWxfY29udGFpbmVyLFxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBpZiAoIXRhcmdldF9yZWN0YW5nbGUpIHJldHVybiBudWxsO1xuXG4gICAgICAgIGNvbnN0IHBvcG92ZXJfYnViYmxlID0gKFxuICAgICAgICAgICAgPFBvc2VHcm91cD5cbiAgICAgICAgICAgICAgICB7IGlzX29wZW4gJiZcbiAgICAgICAgICAgICAgICA8RmFkZUluIGtleT0nZmFkZV9pbicgaW5pdGlhbFBvc2U9J2V4aXQnIHN0eWxlPXt7IHBvc2l0aW9uOiAnZml4ZWQnLCB6SW5kZXg6IDk5OSB9fT5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXsgdGFyZ2V0X3JlY3RhbmdsZSA/IHRoaXMuY2FsY3VsYXRlUG9zaXRpb24oKSA6IHt9fVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wb3BvdmVyLXBvcz17YWxpZ25tZW50fVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGMtcG9wb3Zlcl9fYnViYmxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ICdkYy1wb3BvdmVyX19idWJibGUtLWVycm9yJzogaGFzX2Vycm9yIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IGljb24gPT09ICdpbmZvJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT0nZGMtcG9wb3Zlcl9fYnViYmxlX19pY29uJz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb25JbmZvQmx1ZSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdkYy1wb3BvdmVyX19idWJibGVfX3RleHQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgbWVzc2FnZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2RjLXBvcG92ZXJfX2J1YmJsZV9fYXJyb3cnIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L0ZhZGVJbj5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L1Bvc2VHcm91cD5cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKFxuICAgICAgICAgICAgcG9wb3Zlcl9idWJibGUsXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3J0YWxfY29udGFpbmVyKVxuICAgICAgICApO1xuICAgIH1cbn1cblxuUG9wb3ZlckJ1YmJsZS5wcm9wVHlwZXMgPSB7XG4gICAgYWxpZ25tZW50ICAgICAgIDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbiAgICAgICAgOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjbGFzc05hbWUgICAgICAgOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhhc19lcnJvciAgICAgICA6IFByb3BUeXBlcy5ib29sLFxuICAgIGljb24gICAgICAgICAgICA6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaWQgICAgICAgICAgICAgIDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc19vcGVuICAgICAgICAgOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtYXJnaW4gICAgICAgICAgOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG1lc3NhZ2UgICAgICAgICA6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0YXJnZXRfcmVjdGFuZ2xlOiBQcm9wVHlwZXMub2JqZWN0LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9wb3ZlckJ1YmJsZTtcbiIsImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyAgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgICAgICBmcm9tICdyZWFjdCc7XG5cbi8vIFRPRE8gcmVtb3ZlIHRoaXMgZmlsZSBlbnRpcmVseSB3aGVuIGljb24gY29tcG9uZW50IGlzIHJlYWR5LlxuY29uc3QgSWNvbkluZm9PdXRsaW5lID0gKHsgY2xhc3NOYW1lLCBvbk1vdXNlRW50ZXIsIG9uTW91c2VMZWF2ZSB9KSA9PiAoXG4gICAgPHN2Z1xuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ2lubGluZS1pY29uJywgY2xhc3NOYW1lKX1cbiAgICAgICAgaGVpZ2h0PScxNidcbiAgICAgICAgb25Nb3VzZUVudGVyPXtvbk1vdXNlRW50ZXJ9XG4gICAgICAgIG9uTW91c2VMZWF2ZT17b25Nb3VzZUxlYXZlfVxuICAgICAgICB2aWV3Qm94PScwIDAgMTYgMTYnXG4gICAgICAgIHdpZHRoPScxNidcblxuICAgID5cbiAgICAgICAgPHBhdGggY2xhc3NOYW1lPSdjb2xvcjEtZmlsbCcgZmlsbD0ncmdiYSgwLCAwLCAwLCAwLjE2KScgZmlsbFJ1bGU9J2V2ZW5vZGQnIGQ9J004IDE1QTcgNyAwIDEgMCA4IDFhNyA3IDAgMCAwIDAgMTR6bTAgMUE4IDggMCAxIDEgOCAwYTggOCAwIDAgMSAwIDE2ek04IDZhLjc1Ljc1IDAgMSAwIDAtMS41QS43NS43NSAwIDAgMCA4IDZ6bTAgMWEuNS41IDAgMCAwLS41LjV2NGEuNS41IDAgMSAwIDEgMHYtNEEuNS41IDAgMCAwIDggN3onIC8+XG4gICAgPC9zdmc+XG4pO1xuXG5JY29uSW5mb091dGxpbmUucHJvcFR5cGVzID0ge1xuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEljb25JbmZvT3V0bGluZTtcbiIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgICAgIGZyb20gJ3JlYWN0JztcblxuLy8gVE9ETyByZW1vdmUgdGhpcyBmaWxlIGVudGlyZWx5IHdoZW4gaWNvbiBjb21wb25lbnQgaXMgcmVhZHkuXG5jb25zdCBJY29uUXVlc3Rpb24gPSAoeyBjbGFzc05hbWUgfSkgPT4gKFxuICAgIDxzdmcgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHdpZHRoPScxNicgaGVpZ2h0PScxNicgdmlld0JveD0nMCAwIDE2IDE2Jz5cbiAgICAgICAgPGcgZmlsbD0nI0ZGRicgZmlsbFJ1bGU9J2V2ZW5vZGQnPlxuICAgICAgICAgICAgPHBhdGggZD0nTTggMTZBOCA4IDAgMSAxIDggMGE4IDggMCAwIDEgMCAxNnptMC0xQTcgNyAwIDEgMCA4IDFhNyA3IDAgMCAwIDAgMTR6JyBmaWxsUnVsZT0nbm9uemVybycgLz5cbiAgICAgICAgICAgIDxwYXRoIGQ9J003LjM5IDkuNTE4Yy4wMDctLjM3My4wNTItLjY2OC4xMzQtLjg4NS4wODItLjIxNi4yNS0uNDU2LjUwMy0uNzJsLjY0Ni0uNjM2Yy4yNzYtLjI5OC40MTUtLjYxOC40MTUtLjk2IDAtLjMzLS4wOS0uNTg4LS4yNzItLjc3NC0uMTgtLjE4Ny0uNDQ0LS4yOC0uNzg5LS4yOC0uMzM1IDAtLjYwNS4wODQtLjgwOS4yNTRhLjg0Mi44NDIgMCAwIDAtLjMwNi42ODJINmMuMDA3LS41MDguMTk2LS45MTguNTctMS4yMy4zNzMtLjMxMy44NTktLjQ2OSAxLjQ1Ny0uNDY5LjYyMiAwIDEuMTA2LjE2IDEuNDUzLjQ3OC4zNDcuMzE4LjUyLjc1NS41MiAxLjMxIDAgLjU1LS4yNjYgMS4wOTEtLjc5OSAxLjYyNWwtLjUzOC41MDhjLS4yNC4yNTUtLjM2LjYyLS4zNiAxLjA5N2gtLjkxMnptLS4wMzkgMS40OTJhLjUuNSAwIDAgMSAuMTM2LS4zNTVjLjA5LS4wOTYuMjI0LS4xNDQuNDAyLS4xNDQuMTc4IDAgLjMxMi4wNDguNDA0LjE0NGEuNDkzLjQ5MyAwIDAgMSAuMTM5LjM1NS40NzcuNDc3IDAgMCAxLS4xMzkuMzUxYy0uMDkyLjA5My0uMjI2LjEzOS0uNDA0LjEzOS0uMTc4IDAtLjMxMi0uMDQ2LS40MDItLjEzOWEuNDgxLjQ4MSAwIDAgMS0uMTM2LS4zNXonIC8+XG4gICAgICAgIDwvZz5cbiAgICA8L3N2Zz5cbik7XG5cbkljb25RdWVzdGlvbi5wcm9wVHlwZXMgPSB7XG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgSWNvblF1ZXN0aW9uO1xuIiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCAgICAgZnJvbSAncmVhY3QnO1xuXG4vLyBUT0RPIHJlbW92ZSB0aGlzIGZpbGUgZW50aXJlbHkgd2hlbiBpY29uIGNvbXBvbmVudCBpcyByZWFkeS5cbmNvbnN0IEljb25SZWREb3QgPSAoeyBjbGFzc05hbWUgfSkgPT4gKFxuICAgIDxzdmcgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHdpZHRoPSc0JyBoZWlnaHQ9JzQnPlxuICAgICAgICA8Y2lyY2xlIGN4PScxMTYzJyBjeT0nNjI2JyByPScyJyB0cmFuc2Zvcm09J3RyYW5zbGF0ZSgtMTE2MSAtNjI0KScgZmlsbD0nI0UzMUM0QicgZmlsbFJ1bGU9J25vbnplcm8nIC8+XG4gICAgPC9zdmc+XG4pO1xuXG5JY29uUmVkRG90LnByb3BUeXBlcyA9IHtcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJY29uUmVkRG90O1xuIiwiaW1wb3J0IGNsYXNzTmFtZXMgICAgICBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBQcm9wVHlwZXMgICAgICAgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgICAgICAgICAgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBQb3BvdmVyQnViYmxlICAgZnJvbSAnLi9wb3BvdmVyLWJ1YmJsZS5qc3gnO1xuaW1wb3J0IEljb25JbmZvT3V0bGluZSBmcm9tICcuLi9pY29uLWluZm8tb3V0bGluZS5qc3gnO1xuaW1wb3J0IEljb25RdWVzdGlvbiAgICBmcm9tICcuLi9pY29uLXF1ZXN0aW9uLmpzeCc7XG5pbXBvcnQgSWNvblJlZERvdCAgICAgIGZyb20gJy4uL2ljb24tcmVkLWRvdC5qc3gnO1xuXG5jbGFzcyBQb3BvdmVyIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IgKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSAgICAgICAgICAgID0ge1xuICAgICAgICAgICAgaXNfb3BlbiAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICB0YXJnZXRfcmVjdGFuZ2xlOiBudWxsLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnRhcmdldF9yZWZlcmVuY2UgPSBSZWFjdC5jcmVhdGVSZWYoKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaXNfb3BlbiAgICAgICAgIDogdGhpcy5wcm9wcy5oYXNfZXJyb3IsXG4gICAgICAgICAgICB0YXJnZXRfcmVjdGFuZ2xlOiB0aGlzLnRhcmdldF9yZWZlcmVuY2UuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdG9nZ2xlT3BlbiA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpc19vcGVuICAgICAgICAgOiBCb29sZWFuKHRoaXMucHJvcHMubWVzc2FnZSksXG4gICAgICAgICAgICB0YXJnZXRfcmVjdGFuZ2xlOiB0aGlzLnRhcmdldF9yZWZlcmVuY2UuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRvZ2dsZUNsb3NlID0gKCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGlzX29wZW46IGZhbHNlIH0pO1xuXG4gICAgcmVuZGVyICgpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgYWxpZ25tZW50LFxuICAgICAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgICAgICBjbGFzc05hbWVCdWJibGUsXG4gICAgICAgICAgICBjbGFzc05hbWVUYXJnZXQsXG4gICAgICAgICAgICBjbGFzc05hbWVUYXJnZXRJY29uLFxuICAgICAgICAgICAgZGlzYWJsZV90YXJnZXRfaWNvbixcbiAgICAgICAgICAgIGRpc2FibGVfbWVzc2FnZV9pY29uLFxuICAgICAgICAgICAgaGFzX2Vycm9yLFxuICAgICAgICAgICAgaWNvbixcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbWFyZ2luLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgY29uc3QgaWNvbl9jbGFzc19uYW1lID0gY2xhc3NOYW1lcyhjbGFzc05hbWVUYXJnZXRJY29uLCBpY29uKTtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9J2RjLXBvcG92ZXInXG4gICAgICAgICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgICAgICAgIG9uTW91c2VFbnRlcj17dGhpcy50b2dnbGVPcGVufVxuICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17dGhpcy50b2dnbGVDbG9zZX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhjbGFzc05hbWVUYXJnZXQsICdkYy1wb3BvdmVyX190YXJnZXQnKX0gcmVmPXt0aGlzLnRhcmdldF9yZWZlcmVuY2V9PlxuICAgICAgICAgICAgICAgICAgICB7IWRpc2FibGVfdGFyZ2V0X2ljb24gJiZcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPXttZXNzYWdlID8gJ2RjLXBvcG92ZXJfX3RhcmdldF9faWNvbicgOiAnZGMtcG9wb3Zlcl9fdGFyZ2V0X19pY29uLS1kaXNhYmxlZCd9PlxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpY29uID09PSAnaW5mbycpICYmIDxJY29uSW5mb091dGxpbmUgY2xhc3NOYW1lPXtpY29uX2NsYXNzX25hbWV9IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgeyhpY29uID09PSAncXVlc3Rpb24nKSAmJiA8SWNvblF1ZXN0aW9uIGNsYXNzTmFtZT17aWNvbl9jbGFzc19uYW1lfSAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgIHsoaWNvbiA9PT0gJ2RvdCcpICYmIDxJY29uUmVkRG90IGNsYXNzTmFtZT17aWNvbl9jbGFzc19uYW1lfSAvPn1cbiAgICAgICAgICAgICAgICAgICAgPC9pPlxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPFBvcG92ZXJCdWJibGVcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50PXthbGlnbm1lbnR9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lQnViYmxlfVxuICAgICAgICAgICAgICAgICAgICBoYXNfZXJyb3I9e2hhc19lcnJvcn1cbiAgICAgICAgICAgICAgICAgICAgaWNvbj17IWRpc2FibGVfbWVzc2FnZV9pY29uICYmIGljb259XG4gICAgICAgICAgICAgICAgICAgIGlkPXtgJHtpZH1fYnViYmxlYH1cbiAgICAgICAgICAgICAgICAgICAgaXNfb3Blbj17dGhpcy5zdGF0ZS5pc19vcGVufVxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfcmVjdGFuZ2xlPXt0aGlzLnN0YXRlLnRhcmdldF9yZWN0YW5nbGV9XG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbj17bWFyZ2lufVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlPXttZXNzYWdlfVxuICAgICAgICAgICAgICAgICAgICBwb3J0YWxfY29udGFpbmVyPXt0aGlzLnByb3BzLnBvcnRhbF9jb250YWluZXJ9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuUG9wb3Zlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgcG9ydGFsX2NvbnRhaW5lcjogJ2Rlcml2X2FwcCcsXG59O1xuXG5Qb3BvdmVyLnByb3BUeXBlcyA9IHtcbiAgICBhbGlnbm1lbnQgICAgICAgICAgOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuICAgICAgICAgICA6IFByb3BUeXBlcy5ub2RlLFxuICAgIGNsYXNzTmFtZUJ1YmJsZSAgICA6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2xhc3NOYW1lVGFyZ2V0ICAgIDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjbGFzc05hbWVUYXJnZXRJY29uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRpc2FibGVfdGFyZ2V0X2ljb246IFByb3BUeXBlcy5ib29sLFxuICAgIGhhc19lcnJvciAgICAgICAgICA6IFByb3BUeXBlcy5ib29sLFxuICAgIGljb24gICAgICAgICAgICAgICA6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaWQgICAgICAgICAgICAgICAgIDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtYXJnaW4gICAgICAgICAgICAgOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIG1lc3NhZ2UgICAgICAgICAgICA6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcG9ydGFsX2NvbnRhaW5lciAgIDogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBvcG92ZXI7XG4iLCJpbXBvcnQgJy4vcG9wb3Zlci5zY3NzJztcblxuZXhwb3J0IGRlZmF1bHQgZnJvbSAnLi9wb3BvdmVyLmpzeCc7XG5cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBTkE7QUFDQTtBQVdBO0FBQ0E7QUFEQTtBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFGQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFGQTtBQVBBO0FBQ0E7QUFjQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUNBO0FBSUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFJQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUlBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUNBO0FBSUE7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQXJCQTtBQTBCQTtBQUNBOzs7Ozs7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBYUE7QUFFQTtBQUdBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFBQTtBQUVBO0FBUkE7QUFXQTtBQUFBO0FBS0E7QUFBQTtBQUdBO0FBQUE7QUFPQTtBQUlBOzs7O0FBakZBO0FBQ0E7QUFtRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVZBO0FBYUE7O0FDdkhBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU5BO0FBU0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVZBO0FBQ0E7QUFhQTtBQUNBO0FBREE7QUFJQTs7QUN2QkE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFKQTtBQUNBO0FBUUE7QUFDQTtBQURBO0FBSUE7O0FDakJBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFGQTtBQUNBO0FBS0E7QUFDQTtBQURBO0FBSUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBRkE7QUFpQkE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBdEJBO0FBdUJBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUF0QkE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQU5BO0FBT0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBOzs7QUFXQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBZ0JBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFBQTtBQUFBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVkE7QUFjQTs7OztBQTVFQTtBQUNBO0FBOEVBO0FBQ0E7QUFEQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkE7QUFlQTs7QUMxR0E7QUFBQTtBQUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///11\\n')},,function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9wb3BvdmVyLnNjc3M/ZWVkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNTY5MzEwMjc2OTM3XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWhvdC1sb2FkZXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJmaWxlTWFwXCI6XCJ7ZmlsZU5hbWV9XCJ9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpOztcbiAgICB9XG4gICJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxnQ0FLQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///13\\n\")},,,,,,,,,function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24uc2Nzcz8wZjUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1NjkzMTAyNzY2MzhcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGdDQUtBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///22\\n\")},function(module,exports,__webpack_require__){eval(\"// extracted by mini-css-extract-plugin\\n    if(false) { var cssReload; }\\n  //# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXJpdi1jb21wb25lbnQuW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vbGlzdC5zY3NzP2ZhZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU2OTMxMDI3Njc2M1xuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTs7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsZ0NBS0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///23\\n\")},,,,,function(module,__webpack_exports__,__webpack_require__){\"use strict\";eval('__webpack_require__.r(__webpack_exports__);\\n\\n// EXTERNAL MODULE: ./src/components/dropdown/dropdown.scss\\nvar dropdown = __webpack_require__(22);\\n\\n// EXTERNAL MODULE: ./src/components/dropdown/list.scss\\nvar dropdown_list = __webpack_require__(23);\\n\\n// EXTERNAL MODULE: external \"classnames\"\\nvar external_classnames_ = __webpack_require__(2);\\nvar external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);\\n\\n// EXTERNAL MODULE: external \"prop-types\"\\nvar external_prop_types_ = __webpack_require__(0);\\nvar external_prop_types_default = /*#__PURE__*/__webpack_require__.n(external_prop_types_);\\n\\n// EXTERNAL MODULE: external \"react\"\\nvar external_react_ = __webpack_require__(1);\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n\\n// EXTERNAL MODULE: external \"react-transition-group\"\\nvar external_react_transition_group_ = __webpack_require__(3);\\n\\n// EXTERNAL MODULE: external \"tt-react-custom-scrollbars\"\\nvar external_tt_react_custom_scrollbars_ = __webpack_require__(10);\\n\\n// CONCATENATED MODULE: ./src/components/icon-arrow.jsx\\n\\n\\n // TODO remove this file entirely when icon component is ready.\\n\\nvar icon_arrow_IconArrow = function IconArrow(_ref) {\\n  var className = _ref.className,\\n      classNamePath = _ref.classNamePath;\\n  return external_react_default.a.createElement(\"svg\", {\\n    className: external_classnames_default()(\\'inline-icon\\', className),\\n    width: \"16\",\\n    height: \"16\"\\n  }, external_react_default.a.createElement(\"path\", {\\n    className: external_classnames_default()(classNamePath, \\'color1-fill\\'),\\n    fill: \"rgba(0, 0, 0, 0.8)\",\\n    fillRule: \"nonzero\",\\n    d: \"M13.164 5.13a.5.5 0 1 1 .672.74l-5.5 5a.5.5 0 0 1-.672 0l-5.5-5a.5.5 0 0 1 .672-.74L8 9.824l5.164-4.694z\"\\n  }));\\n};\\n\\nicon_arrow_IconArrow.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  classNamePath: external_prop_types_default.a.string\\n};\\n/* harmony default export */ var icon_arrow = (icon_arrow_IconArrow);\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.js\\n\\nvar getDisplayText = function getDisplayText(list, value) {\\n  var findInArray = function findInArray(arr_list) {\\n    return (arr_list.find(function (item) {\\n      return item.value === value;\\n    }) || {}).text;\\n  };\\n\\n  var text = \\'\\';\\n\\n  if (Array.isArray(list)) {\\n    text = findInArray(list);\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      text = findInArray(list[key]);\\n      return text;\\n    });\\n  }\\n\\n  return text;\\n};\\nvar getItemFromValue = function getItemFromValue(list, value) {\\n  var findInArray = function findInArray(arr_list) {\\n    return arr_list.findIndex(function (item) {\\n      return item.value === value;\\n    });\\n  };\\n\\n  var item = {};\\n\\n  if (Array.isArray(list)) {\\n    item = {\\n      number: findInArray(list),\\n      length: list.length\\n    };\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      item = {\\n        number: findInArray(list[key]),\\n        length: list[key].length\\n      };\\n      return item;\\n    });\\n  }\\n\\n  return item;\\n};\\nvar getValueFromIndex = function getValueFromIndex(list, index) {\\n  var findInArray = function findInArray(arr_list) {\\n    return arr_list[index];\\n  };\\n\\n  var result;\\n\\n  if (Array.isArray(list)) {\\n    result = findInArray(list);\\n  } else {\\n    Object.keys(list).some(function (key) {\\n      result = findInArray(list[key]);\\n      return result.value;\\n    });\\n  }\\n\\n  return result.value;\\n};\\nvar getPrevIndex = function getPrevIndex(index, length) {\\n  var prev_index = index - 1 < 0 ? length - 1 : index - 1;\\n  return prev_index;\\n};\\nvar getNextIndex = function getNextIndex(index, length) {\\n  var next_index = index + 1 === length ? 0 : index + 1;\\n  return next_index;\\n};\\nvar dropdown_listPropType = function listPropType() {\\n  return external_prop_types_default.a.oneOfType([external_prop_types_default.a.arrayOf(external_prop_types_default.a.shape({\\n    disabled: external_prop_types_default.a.bool,\\n    has_tooltip: external_prop_types_default.a.bool,\\n    text: external_prop_types_default.a.string,\\n    tooltip: external_prop_types_default.a.string,\\n    value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n  })), external_prop_types_default.a.object]);\\n};\\n// EXTERNAL MODULE: ./src/components/popover/index.js + 6 modules\\nvar popover = __webpack_require__(11);\\n\\n// CONCATENATED MODULE: ./src/components/dropdown/items.jsx\\n\\n\\n\\n\\n\\nvar items_Items = function Items(_ref) {\\n  var className = _ref.className,\\n      index = _ref.index,\\n      handleSelect = _ref.handleSelect,\\n      has_symbol = _ref.has_symbol,\\n      items = _ref.items,\\n      name = _ref.name,\\n      is_align_text_left = _ref.is_align_text_left,\\n      value = _ref.value;\\n  return items.map(function (item, idx) {\\n    var symbol_type_class_name = item.text && typeof item.text === \\'string\\' ? \"symbols--\".concat(item.text.toLowerCase()) : null;\\n    return external_react_default.a.createElement(\"div\", {\\n      className: external_classnames_default()(\\'dc-list__item\\', {\\n        \\'dc-list__item--highlighted\\': idx === index\\n      }, {\\n        \\'dc-list__item--selected\\': value === item.value\\n      }, {\\n        \\'dc-list__item--disabled\\': item.disabled\\n      }),\\n      name: name,\\n      value: item.value,\\n      onClick: item.disabled ? null : handleSelect.bind(null, item),\\n      key: idx\\n    }, !!has_symbol && item.has_tooltip && external_react_default.a.createElement(popover[\"default\"], {\\n      alignment: \"left\",\\n      message: item.text\\n    }, external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-symbol\\', symbol_type_class_name)\\n    })), !!has_symbol && !item.has_tooltip && external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'symbols\\', \\'dc-list__item-text\\', symbol_type_class_name)\\n    }), !has_symbol && external_react_default.a.createElement(\"span\", {\\n      className: external_classnames_default()(\\'dc-list__item-text\\', {\\n        \\'dc-list__item-text--left\\': is_align_text_left\\n      }, className)\\n    }, item.text));\\n  });\\n};\\n\\nitems_Items.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  handleSelect: external_prop_types_default.a.func,\\n  has_symbol: external_prop_types_default.a.bool,\\n  name: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown_items = (items_Items);\\n// CONCATENATED MODULE: ./src/components/dropdown/native-select.jsx\\n\\n\\n\\nvar native_select_NativeSelect = function NativeSelect(_ref) {\\n  var name = _ref.name,\\n      list = _ref.list,\\n      value = _ref.value,\\n      onChange = _ref.onChange;\\n  return external_react_default.a.createElement(\"div\", {\\n    className: \"native-select native-select__wrapper\"\\n  }, external_react_default.a.createElement(\"select\", {\\n    className: \"select native-select__select\",\\n    name: name,\\n    value: value,\\n    onChange: onChange\\n  }, Array.isArray(list) ? list.map(function (item, idx) {\\n    return external_react_default.a.createElement(\"option\", {\\n      key: idx,\\n      value: item.value\\n    }, item.text);\\n  }) : Object.keys(list).map(function (key) {\\n    return external_react_default.a.createElement(external_react_default.a.Fragment, {\\n      key: key\\n    }, external_react_default.a.createElement(\"optgroup\", {\\n      label: key\\n    }, list[key].map(function (item, idx) {\\n      return external_react_default.a.createElement(\"option\", {\\n        key: idx,\\n        value: item.value\\n      }, item.text);\\n    })));\\n  })));\\n};\\n\\nnative_select_NativeSelect.propTypes = {\\n  list: external_prop_types_default.a.oneOfType([external_prop_types_default.a.object, external_prop_types_default.a.array]),\\n  name: external_prop_types_default.a.string,\\n  onChange: external_prop_types_default.a.func,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var native_select = (native_select_NativeSelect);\\n// CONCATENATED MODULE: ./src/components/dropdown/display-text.jsx\\n\\n\\n\\n\\n\\nvar display_text_DisplayText = function DisplayText(_ref) {\\n  var className = _ref.className,\\n      has_symbol = _ref.has_symbol,\\n      list = _ref.list,\\n      is_align_text_left = _ref.is_align_text_left,\\n      placeholder = _ref.placeholder,\\n      name = _ref.name,\\n      value = _ref.value;\\n  var symbol_value_class = has_symbol ? \"symbols--\".concat(value.toLowerCase()) : null;\\n  return external_react_default.a.createElement(external_react_default.a.Fragment, null, has_symbol ? external_react_default.a.createElement(\"span\", {\\n    className: external_classnames_default()(\\'symbols dc-dropdown__display-symbol\\', symbol_value_class, className),\\n    name: name,\\n    value: value\\n  }) : external_react_default.a.createElement(\"span\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-text\\', className),\\n    name: name,\\n    value: value\\n  }, getDisplayText(list, value)), placeholder && external_react_default.a.createElement(\"div\", {\\n    className: external_classnames_default()(\\'dc-dropdown__display-placeholder\\', {\\n      \\'dc-dropdown__display-placeholder--is-title\\': value,\\n      \\'dc-dropdown__display-placeholder--is-left-text\\': is_align_text_left\\n    })\\n  }, external_react_default.a.createElement(\"span\", {\\n    className: \"dc-dropdown__display-placeholder-text\"\\n  }, placeholder)));\\n};\\n\\ndisplay_text_DisplayText.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_title: external_prop_types_default.a.bool,\\n  list: dropdown_listPropType(),\\n  name: external_prop_types_default.a.string,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.string, external_prop_types_default.a.number])\\n};\\n/* harmony default export */ var display_text = (display_text_DisplayText);\\n// CONCATENATED MODULE: ./src/components/dropdown/dropdown.jsx\\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn\\'t been initialised - super() hasn\\'t been called\"); } return self; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar dropdown_Dropdown =\\n/*#__PURE__*/\\nfunction (_React$PureComponent) {\\n  _inherits(Dropdown, _React$PureComponent);\\n\\n  function Dropdown() {\\n    var _getPrototypeOf2;\\n\\n    var _this;\\n\\n    _classCallCheck(this, Dropdown);\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\\n    _this.list_ref = external_react_default.a.createRef();\\n    _this.state = {\\n      curr_index: getItemFromValue(_this.props.list, _this.props.value).number,\\n      is_list_visible: false,\\n      list_height: 0,\\n      list_width: 0\\n    };\\n\\n    _this.handleSelect = function (item) {\\n      if (item.value !== _this.props.value) {\\n        _this.props.onChange({\\n          target: {\\n            name: _this.props.name,\\n            value: item.value\\n          }\\n        });\\n      }\\n\\n      _this.handleVisibility();\\n    };\\n\\n    _this.setWrapperRef = function (node) {\\n      return _this.wrapper_ref = node;\\n    };\\n\\n    _this.handleClickOutside = function (event) {\\n      if (_this.wrapper_ref && !_this.wrapper_ref.contains(event.target) && _this.state.is_list_visible) {\\n        if (typeof _this.props.handleBlur === \\'function\\') {\\n          _this.props.handleBlur({\\n            target: {\\n              name: _this.props.name\\n            }\\n          });\\n        }\\n\\n        _this.setState({\\n          is_list_visible: false\\n        });\\n      }\\n    };\\n\\n    _this.handleVisibility = function () {\\n      _this.setState(function (state) {\\n        return {\\n          is_list_visible: !state.is_list_visible\\n        };\\n      });\\n    };\\n\\n    _this.handleToggle = function (value) {\\n      if (_this.state.is_list_visible && _this.props.value !== value) {\\n        _this.props.onChange({\\n          target: {\\n            name: _this.props.name,\\n            value: value\\n          }\\n        });\\n      }\\n\\n      _this.handleVisibility();\\n    };\\n\\n    _this.onKeyPressed = function (event) {\\n      if (_this.is_single_option) return;\\n\\n      if (event.keyCode === 9) {\\n        // Tab is pressed\\n        if (_this.state.is_list_visible) {\\n          _this.handleVisibility();\\n        }\\n\\n        return;\\n      }\\n\\n      event.preventDefault();\\n      var index = _this.props.value ? getItemFromValue(_this.props.list, _this.props.value) : 0;\\n      var value = _this.props.value ? getValueFromIndex(_this.props.list, _this.state.curr_index) : null;\\n\\n      switch (event.keyCode) {\\n        case 13: // Enter is pressed\\n\\n        case 32:\\n          // Space is pressed\\n          if (value) _this.handleToggle(value);\\n          break;\\n\\n        case 38:\\n          // Up Arrow is pressed\\n          if (_this.state.is_list_visible) {\\n            var prev_index = getPrevIndex(_this.state.curr_index, index.length);\\n\\n            _this.setState({\\n              curr_index: prev_index\\n            });\\n          }\\n\\n          break;\\n\\n        case 40:\\n          // Down Arrow is pressed\\n          if (_this.state.is_list_visible) {\\n            var next_index = getNextIndex(_this.state.curr_index, index.length);\\n\\n            _this.setState({\\n              curr_index: next_index\\n            });\\n          } else if (!_this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        case 37:\\n          // Left arrow is pressed\\n          if (!_this.state.is_list_visible && _this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        case 39:\\n          // Right Arrow is pressed\\n          if (_this.state.is_list_visible && _this.props.is_alignment_left) {\\n            _this.handleVisibility();\\n          }\\n\\n          break;\\n\\n        default:\\n      } // For char presses, we do a search for the item:\\n\\n\\n      if (event.key.length === 1 && _this.props.list.length) {\\n        var _char = event.key.toLowerCase();\\n\\n        var firstChars = _this.props.list.map(function (x) {\\n          return typeof x === \\'string\\' && x.text[0].toLowerCase();\\n        });\\n\\n        var idx; // Tapping the same character again jumps to the next match:\\n\\n        if (_this.state.curr_index) {\\n          idx = firstChars.indexOf(_char, _this.state.curr_index + 1);\\n        }\\n\\n        if (idx === undefined || idx === -1) {\\n          idx = firstChars.indexOf(_char);\\n        }\\n\\n        if (idx >= 0) {\\n          _this.setState({\\n            curr_index: idx\\n          });\\n        }\\n      }\\n    };\\n\\n    _this.setListDimension = function () {\\n      return _this.setState({\\n        list_width: _this.list_ref.current.offsetWidth,\\n        list_height: _this.list_ref.current.offsetHeight\\n      });\\n    };\\n\\n    return _this;\\n  }\\n\\n  _createClass(Dropdown, [{\\n    key: \"componentDidMount\",\\n    value: function componentDidMount() {\\n      document.addEventListener(\\'mousedown\\', this.handleClickOutside, {\\n        passive: true\\n      });\\n    }\\n  }, {\\n    key: \"componentWillUnmount\",\\n    value: function componentWillUnmount() {\\n      document.removeEventListener(\\'mousedown\\', this.handleClickOutside);\\n    }\\n  }, {\\n    key: \"render\",\\n    value: function render() {\\n      var _this2 = this;\\n\\n      if (this.props.is_nativepicker) {\\n        return external_react_default.a.createElement(native_select, {\\n          name: this.props.name,\\n          value: this.props.value,\\n          list: this.props.list,\\n          onChange: this.props.onChange\\n        });\\n      }\\n\\n      var getDropDownAlignment = function getDropDownAlignment() {\\n        if (_this2.props.is_alignment_left) return _this2.computed_offset_left;else if (_this2.props.is_alignment_top) return _this2.computed_offset_top;\\n        return null;\\n      };\\n\\n      return external_react_default.a.createElement(external_react_default.a.Fragment, null, external_react_default.a.createElement(\"input\", {\\n        className: \"dc-dropdown__inner\",\\n        autoComplete: \"off\",\\n        name: this.props.name,\\n        readOnly: \"readonly\",\\n        type: \"hidden\",\\n        value: this.props.value || 0\\n      }), external_react_default.a.createElement(\"div\", {\\n        ref: this.setWrapperRef,\\n        className: this.container_class_name\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: this.dropdown_display_class_name,\\n        tabIndex: this.is_single_option ? \\'-1\\' : \\'0\\',\\n        onClick: this.handleVisibility,\\n        onKeyDown: this.onKeyPressed\\n      }, external_react_default.a.createElement(display_text, {\\n        has_symbol: this.props.has_symbol,\\n        name: this.props.name,\\n        is_title: this.state.is_list_visible,\\n        placeholder: this.props.placeholder,\\n        value: this.props.value || 0,\\n        list: this.props.list,\\n        is_align_text_left: this.props.is_align_text_left\\n      })), !this.is_single_option && external_react_default.a.createElement(icon_arrow, {\\n        icon: \"IconArrow\",\\n        className: external_classnames_default()(\\'dc-dropdown__select-arrow\\', {\\n          \\'dc-dropdown__select-arrow--left\\': this.props.is_alignment_left\\n        })\\n      }), this.props.error && external_react_default.a.createElement(\"p\", {\\n        className: \"dc-field-error\"\\n      }, this.props.error), external_react_default.a.createElement(external_react_transition_group_[\"CSSTransition\"], {\\n        \"in\": this.state.is_list_visible,\\n        timeout: 100,\\n        classNames: this.transition_class_names,\\n        onEntered: this.setListDimension,\\n        unmountOnExit: true\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: this.dropdown_list_class_names\\n      }, external_react_default.a.createElement(\"div\", {\\n        className: this.list_class_names,\\n        ref: this.list_ref,\\n        style: getDropDownAlignment()\\n      }, external_react_default.a.createElement(external_tt_react_custom_scrollbars_[\"Scrollbars\"], {\\n        autoHeight: true,\\n        autoHide: true,\\n        autoHeightMax: 200,\\n        renderTrackHorizontal: function renderTrackHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"track-horizontal\",\\n            style: {\\n              display: \\'none\\'\\n            }\\n          }));\\n        },\\n        renderThumbHorizontal: function renderThumbHorizontal(props) {\\n          return external_react_default.a.createElement(\"div\", _extends({}, props, {\\n            className: \"thumb-horizontal\",\\n            style: {\\n              display: \\'none\\'\\n            }\\n          }));\\n        }\\n      }, Array.isArray(this.props.list) ? external_react_default.a.createElement(dropdown_items, {\\n        className: this.props.classNameItems,\\n        index: this.state.curr_index,\\n        handleSelect: this.handleSelect,\\n        has_symbol: this.props.has_symbol,\\n        items: this.props.list,\\n        name: this.props.name,\\n        is_align_text_left: this.props.is_align_text_left,\\n        value: this.props.value\\n      }) : Object.keys(this.props.list).map(function (key) {\\n        return external_react_default.a.createElement(external_react_default.a.Fragment, {\\n          key: key\\n        }, external_react_default.a.createElement(\"div\", {\\n          className: external_classnames_default()(\\'dc-list__label\\', _this2.props.classNameLabel)\\n        }, key), external_react_default.a.createElement(dropdown_items, {\\n          className: _this2.props.classNameItems,\\n          handleSelect: _this2.handleSelect,\\n          has_symbol: _this2.props.has_symbol,\\n          items: _this2.props.list[key],\\n          name: _this2.props.name,\\n          is_align_text_left: _this2.props.is_align_text_left,\\n          value: _this2.props.value\\n        }));\\n      })))))));\\n    }\\n  }, {\\n    key: \"computed_offset_left\",\\n\\n    /**\\n     * Calculate the offset for the dropdown list based on its width\\n     *\\n     * @return {{transform: string}}\\n     */\\n    get: function get() {\\n      return {\\n        transform: \"translate3d(calc(-\".concat(this.state.list_width, \"px - 12px), 0, 0px)\")\\n      };\\n    }\\n    /**\\n     * Calculate the offset for the dropdown list based on its height\\n     *\\n     * @return {{transform: string}}\\n     */\\n\\n  }, {\\n    key: \"computed_offset_top\",\\n    get: function get() {\\n      return {\\n        transform: \"translate3d(0, calc(-\".concat(this.state.list_height, \"px - 16px), 0px)\")\\n      };\\n    }\\n  }, {\\n    key: \"is_single_option\",\\n    get: function get() {\\n      return Array.isArray(this.props.list) ? this.props.list.length < 2 : // object has less than two props or inner object has less than two props\\n      Object.keys(this.props.list).length && Object.keys(this.props.list).length < 2 && this.props.list[Object.keys(this.props.list)[0]].length < 2;\\n    }\\n  }, {\\n    key: \"container_class_name\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown-container\\', this.props.className, {\\n        \\'dc-dropdown--has-placeholder\\': this.props.placeholder,\\n        \\'dc-dropdown--left\\': this.props.is_alignment_left,\\n        \\'dc-dropdown--show\\': this.state.is_list_visible,\\n        \\'dc-dropdown--disabled\\': this.is_single_option\\n      });\\n    }\\n  }, {\\n    key: \"dropdown_display_class_name\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown__display\\', this.props.classNameDisplay, {\\n        \\'dc-dropdown__display--clicked\\': this.state.is_list_visible,\\n        \\'dc-dropdown__display--has-symbol\\': this.props.has_symbol,\\n        \\'dc-dropdown__display--no-border\\': this.props.no_border,\\n        \\'dc-dropdown__display--is-left-text\\': this.props.is_align_text_left\\n      });\\n    }\\n  }, {\\n    key: \"dropdown_list_class_names\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-dropdown__list\\', {\\n        \\'dc-dropdown__list--left\\': this.props.is_alignment_left,\\n        \\'dc-dropdown__list--top\\': this.props.is_alignment_top\\n      });\\n    }\\n  }, {\\n    key: \"list_class_names\",\\n    get: function get() {\\n      return external_classnames_default()(\\'dc-list\\', {\\n        \\'dc-list--left\\': this.props.is_alignment_left\\n      });\\n    }\\n  }, {\\n    key: \"transition_class_names\",\\n    get: function get() {\\n      return {\\n        enter: \"dc-dropdown__list--enter\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--enter\\' : \\'\\'),\\n        enterDone: \"dc-dropdown__list--enter-done\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--enter-done\\' : \\'\\'),\\n        exit: \"dc-dropdown__list--exit\".concat(this.props.is_alignment_left ? \\' dc-dropdown__list--left--exit\\' : \\'\\')\\n      };\\n    }\\n  }]);\\n\\n  return Dropdown;\\n}(external_react_default.a.PureComponent);\\n\\ndropdown_Dropdown.propTypes = {\\n  className: external_prop_types_default.a.string,\\n  classNameDisplay: external_prop_types_default.a.string,\\n  classNameItems: external_prop_types_default.a.string,\\n  classNameLabel: external_prop_types_default.a.string,\\n  has_symbol: external_prop_types_default.a.bool,\\n  is_alignment_left: external_prop_types_default.a.bool,\\n  is_nativepicker: external_prop_types_default.a.bool,\\n  list: dropdown_listPropType(),\\n  name: external_prop_types_default.a.string,\\n  no_border: external_prop_types_default.a.bool,\\n  onChange: external_prop_types_default.a.func,\\n  placeholder: external_prop_types_default.a.string,\\n  value: external_prop_types_default.a.oneOfType([external_prop_types_default.a.number, external_prop_types_default.a.string])\\n};\\n/* harmony default export */ var dropdown_dropdown = (dropdown_Dropdown);\\n// CONCATENATED MODULE: ./src/components/dropdown/index.js\\n/* concated harmony reexport default */__webpack_require__.d(__webpack_exports__, \"default\", function() { return dropdown_dropdown; });\\n\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///28\\n')}]).default});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vY29tcG9uZW50cy9saWIvZHJvcGRvd24uanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL3NhbXlvbmcvRG9jdW1lbnRzL1NvdXJjZV9jb2RlL2Rlcml2LWFwcC9wYWNrYWdlcy9jb21wb25lbnRzL2xpYi9kcm9wZG93bi5qcz83YzdhIl0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihnLEkpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPUkocmVxdWlyZShcInByb3AtdHlwZXNcIikscmVxdWlyZShcInJlYWN0XCIpLHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpLHJlcXVpcmUoXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCIpLHJlcXVpcmUoXCJyZWFjdC1kb21cIikscmVxdWlyZShcInJlYWN0LXBvc2VcIikscmVxdWlyZShcInR0LXJlYWN0LWN1c3RvbS1zY3JvbGxiYXJzXCIpKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcInByb3AtdHlwZXNcIixcInJlYWN0XCIsXCJjbGFzc25hbWVzXCIsXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCIsXCJyZWFjdC1kb21cIixcInJlYWN0LXBvc2VcIixcInR0LXJlYWN0LWN1c3RvbS1zY3JvbGxiYXJzXCJdLEkpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuZHJvcGRvd249SShyZXF1aXJlKFwicHJvcC10eXBlc1wiKSxyZXF1aXJlKFwicmVhY3RcIikscmVxdWlyZShcImNsYXNzbmFtZXNcIikscmVxdWlyZShcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXBcIikscmVxdWlyZShcInJlYWN0LWRvbVwiKSxyZXF1aXJlKFwicmVhY3QtcG9zZVwiKSxyZXF1aXJlKFwidHQtcmVhY3QtY3VzdG9tLXNjcm9sbGJhcnNcIikpOihnW1wiZGVyaXYtY29tcG9uZW50XCJdPWdbXCJkZXJpdi1jb21wb25lbnRcIl18fHt9LGdbXCJkZXJpdi1jb21wb25lbnRcIl0uZHJvcGRvd249SShnW1wicHJvcC10eXBlc1wiXSxnLnJlYWN0LGcuY2xhc3NuYW1lcyxnW1wicmVhY3QtdHJhbnNpdGlvbi1ncm91cFwiXSxnW1wicmVhY3QtZG9tXCJdLGdbXCJyZWFjdC1wb3NlXCJdLGdbXCJ0dC1yZWFjdC1jdXN0b20tc2Nyb2xsYmFyc1wiXSkpfSh3aW5kb3csZnVuY3Rpb24oX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fLF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXyxfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18yX18sX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fM19fLF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzRfXyxfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX182X18sX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMTBfXyl7cmV0dXJuIGZ1bmN0aW9uKGcpe3ZhciBJPXt9O2Z1bmN0aW9uIEMoZSl7aWYoSVtlXSlyZXR1cm4gSVtlXS5leHBvcnRzO3ZhciBBPUlbZV09e2k6ZSxsOiExLGV4cG9ydHM6e319O3JldHVybiBnW2VdLmNhbGwoQS5leHBvcnRzLEEsQS5leHBvcnRzLEMpLEEubD0hMCxBLmV4cG9ydHN9cmV0dXJuIEMubT1nLEMuYz1JLEMuZD1mdW5jdGlvbihnLEksZSl7Qy5vKGcsSSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnLEkse2VudW1lcmFibGU6ITAsZ2V0OmV9KX0sQy5yPWZ1bmN0aW9uKGcpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGcsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGcsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LEMudD1mdW5jdGlvbihnLEkpe2lmKDEmSSYmKGc9QyhnKSksOCZJKXJldHVybiBnO2lmKDQmSSYmXCJvYmplY3RcIj09dHlwZW9mIGcmJmcmJmcuX19lc01vZHVsZSlyZXR1cm4gZzt2YXIgZT1PYmplY3QuY3JlYXRlKG51bGwpO2lmKEMucihlKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTpnfSksMiZJJiZcInN0cmluZ1wiIT10eXBlb2YgZylmb3IodmFyIEEgaW4gZylDLmQoZSxBLGZ1bmN0aW9uKEkpe3JldHVybiBnW0ldfS5iaW5kKG51bGwsQSkpO3JldHVybiBlfSxDLm49ZnVuY3Rpb24oZyl7dmFyIEk9ZyYmZy5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGcuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZ307cmV0dXJuIEMuZChJLFwiYVwiLEkpLEl9LEMubz1mdW5jdGlvbihnLEkpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZyxJKX0sQy5wPVwiXCIsQyhDLnM9MjgpfShbZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXzsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNQzVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMlJsY21sMkxXTnZiWEJ2Ym1WdWRDNWJibUZ0WlYwdlpYaDBaWEp1WVd3Z1hDSndjbTl3TFhSNWNHVnpYQ0kvTXpnek1pSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlmVjBWQ1VFRkRTMTlGV0ZSRlVrNUJURjlOVDBSVlRFVmZYekJmWHpzaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8wXFxuXCIpfSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7ZXZhbChcIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1TNXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwyUmxjbWwyTFdOdmJYQnZibVZ1ZEM1YmJtRnRaVjB2WlhoMFpYSnVZV3dnWENKeVpXRmpkRndpUHpVNE9HVWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JmWDFkRlFsQkJRMHRmUlZoVVJWSk9RVXhmVFU5RVZVeEZYMTh4WDE4N0lsMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMVxcblwiKX0sZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMpe2V2YWwoXCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzJfXzsvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNaTVxY3lJc0luTnZkWEpqWlhNaU9sc2lkMlZpY0dGamF6b3ZMMlJsY21sMkxXTnZiWEJ2Ym1WdWRDNWJibUZ0WlYwdlpYaDBaWEp1WVd3Z1hDSmpiR0Z6YzI1aGJXVnpYQ0kvWVdGaFlpSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlmVjBWQ1VFRkRTMTlGV0ZSRlVrNUJURjlOVDBSVlRFVmZYekpmWHpzaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8yXFxuXCIpfSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7ZXZhbChcIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fM19fOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU15NXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwyUmxjbWwyTFdOdmJYQnZibVZ1ZEM1YmJtRnRaVjB2WlhoMFpYSnVZV3dnWENKeVpXRmpkQzEwY21GdWMybDBhVzl1TFdkeWIzVndYQ0kvWkdSbE1DSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUp0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRjlmVjBWQ1VFRkRTMTlGV0ZSRlVrNUJURjlOVDBSVlRFVmZYek5mWHpzaVhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQklpd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8zXFxuXCIpfSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7ZXZhbChcIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNF9fOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5DNXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwyUmxjbWwyTFdOdmJYQnZibVZ1ZEM1YmJtRnRaVjB2WlhoMFpYSnVZV3dnWENKeVpXRmpkQzFrYjIxY0lqODFaVGxoSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1gxOVhSVUpRUVVOTFgwVllWRVZTVGtGTVgwMVBSRlZNUlY5Zk5GOWZPeUpkTENKdFlYQndhVzVuY3lJNklrRkJRVUVpTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzRcXG5cIil9LCxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyl7ZXZhbChcIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fNl9fOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU5pNXFjeUlzSW5OdmRYSmpaWE1pT2xzaWQyVmljR0ZqYXpvdkwyUmxjbWwyTFdOdmJYQnZibVZ1ZEM1YmJtRnRaVjB2WlhoMFpYSnVZV3dnWENKeVpXRmpkQzF3YjNObFhDSS9PVFppTkNKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWZWMFZDVUVGRFMxOUZXRlJGVWs1QlRGOU5UMFJWVEVWZlh6WmZYenNpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzZcXG5cIil9LCwsLGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzKXtldmFsKFwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xMF9fOy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1UQXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OWtaWEpwZGkxamIyMXdiMjVsYm5RdVcyNWhiV1ZkTDJWNGRHVnlibUZzSUZ3aWRIUXRjbVZoWTNRdFkzVnpkRzl0TFhOamNtOXNiR0poY25OY0lqOHhNVFkzSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1gxOVhSVUpRUVVOTFgwVllWRVZTVGtGTVgwMVBSRlZNUlY5Zk1UQmZYenNpWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCSWl3aWMyOTFjbU5sVW05dmRDSTZJaUo5XFxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzEwXFxuXCIpfSxmdW5jdGlvbihtb2R1bGUsX193ZWJwYWNrX2V4cG9ydHNfXyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtldmFsKCdfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL3BvcG92ZXIvcG9wb3Zlci5zY3NzXFxudmFyIHBvcG92ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwiY2xhc3NuYW1lc1wiXFxudmFyIGV4dGVybmFsX2NsYXNzbmFtZXNfID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcXG52YXIgZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihleHRlcm5hbF9jbGFzc25hbWVzXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInByb3AtdHlwZXNcIlxcbnZhciBleHRlcm5hbF9wcm9wX3R5cGVzXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XFxudmFyIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfcHJvcF90eXBlc18pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJyZWFjdFwiXFxudmFyIGV4dGVybmFsX3JlYWN0XyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XFxudmFyIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3JlYWN0Xyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInJlYWN0LWRvbVwiXFxudmFyIGV4dGVybmFsX3JlYWN0X2RvbV8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xcbnZhciBleHRlcm5hbF9yZWFjdF9kb21fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfcmVhY3RfZG9tXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInJlYWN0LXBvc2VcIlxcbnZhciBleHRlcm5hbF9yZWFjdF9wb3NlXyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XFxudmFyIGV4dGVybmFsX3JlYWN0X3Bvc2VfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfcmVhY3RfcG9zZV8pO1xcblxcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvaWNvbi1pbmZvLWJsdWUuanN4XFxuXFxuIC8vIFRPRE8gcmVtb3ZlIHRoaXMgZmlsZSBlbnRpcmVseSB3aGVuIGljb24gY29tcG9uZW50IGlzIHJlYWR5LlxcblxcbnZhciBpY29uX2luZm9fYmx1ZV9JY29uSW5mb0JsdWUgPSBmdW5jdGlvbiBJY29uSW5mb0JsdWUoX3JlZikge1xcbiAgdmFyIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lO1xcbiAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXFxuICAgIHdpZHRoOiBcIjE2XCIsXFxuICAgIGhlaWdodDogXCIxNlwiLFxcbiAgICB2aWV3Qm94OiBcIjAgMCAxNiAxNlwiXFxuICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImdcIiwge1xcbiAgICBmaWxsOiBcIm5vbmVcIixcXG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiXFxuICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XFxuICAgIGN4OiBcIjhcIixcXG4gICAgY3k6IFwiOFwiLFxcbiAgICByOiBcIjhcIixcXG4gICAgZmlsbDogXCIjMjE5NkYzXCJcXG4gIH0pLCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImdcIiwge1xcbiAgICBmaWxsOiBcIiNGRkZcIixcXG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZSg2LjUgNClcIlxcbiAgfSwgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwge1xcbiAgICBjeDogXCIxLjVcIixcXG4gICAgY3k6IFwiMVwiLFxcbiAgICByOiBcIjFcIlxcbiAgfSksIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwicmVjdFwiLCB7XFxuICAgIHdpZHRoOiBcIjJcIixcXG4gICAgaGVpZ2h0OiBcIjVcIixcXG4gICAgeDogXCIuNVwiLFxcbiAgICB5OiBcIjNcIixcXG4gICAgcng6IFwiMVwiXFxuICB9KSkpKTtcXG59O1xcblxcbmljb25faW5mb19ibHVlX0ljb25JbmZvQmx1ZS5wcm9wVHlwZXMgPSB7XFxuICBjbGFzc05hbWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZ1xcbn07XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgaWNvbl9pbmZvX2JsdWUgPSAoaWNvbl9pbmZvX2JsdWVfSWNvbkluZm9CbHVlKTtcXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL3BvcG92ZXIvcG9wb3Zlci1idWJibGUuanN4XFxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cXG5cXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxcblxcbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cXG5cXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc25cXCd0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc25cXCd0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XFxuXFxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxcblxcbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XFxuXFxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG52YXIgRmFkZUluID0gZXh0ZXJuYWxfcmVhY3RfcG9zZV9kZWZhdWx0LmEuc3Bhbih7XFxuICBlbnRlcjoge1xcbiAgICBvcGFjaXR5OiAxLFxcbiAgICB0cmFuc2l0aW9uOiB7XFxuICAgICAgZHVyYXRpb246IDE1MFxcbiAgICB9XFxuICB9LFxcbiAgZXhpdDoge1xcbiAgICBvcGFjaXR5OiAwLFxcbiAgICB0cmFuc2l0aW9uOiB7XFxuICAgICAgZHVyYXRpb246IDE1MFxcbiAgICB9XFxuICB9XFxufSk7XFxuXFxudmFyIHBvcG92ZXJfYnViYmxlX1BvcG92ZXJCdWJibGUgPVxcbi8qI19fUFVSRV9fKi9cXG5mdW5jdGlvbiAoX1JlYWN0JFB1cmVDb21wb25lbnQpIHtcXG4gIF9pbmhlcml0cyhQb3BvdmVyQnViYmxlLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XFxuXFxuICBmdW5jdGlvbiBQb3BvdmVyQnViYmxlKCkge1xcbiAgICB2YXIgX2dldFByb3RvdHlwZU9mMjtcXG5cXG4gICAgdmFyIF90aGlzO1xcblxcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wb3ZlckJ1YmJsZSk7XFxuXFxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XFxuICAgIH1cXG5cXG4gICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2dldFByb3RvdHlwZU9mMiA9IF9nZXRQcm90b3R5cGVPZihQb3BvdmVyQnViYmxlKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XFxuXFxuICAgIF90aGlzLmNhbGN1bGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxcbiAgICAgICAgICBhbGlnbm1lbnQgPSBfdGhpcyRwcm9wcy5hbGlnbm1lbnQsXFxuICAgICAgICAgIHRhcmdldF9yZWN0YW5nbGUgPSBfdGhpcyRwcm9wcy50YXJnZXRfcmVjdGFuZ2xlLFxcbiAgICAgICAgICBfdGhpcyRwcm9wcyRtYXJnaW4gPSBfdGhpcyRwcm9wcy5tYXJnaW4sXFxuICAgICAgICAgIG1hcmdpbiA9IF90aGlzJHByb3BzJG1hcmdpbiA9PT0gdm9pZCAwID8gMCA6IF90aGlzJHByb3BzJG1hcmdpbjtcXG5cXG4gICAgICBzd2l0Y2ggKGFsaWdubWVudCkge1xcbiAgICAgICAgY2FzZSBcXCd0b3BcXCc6XFxuICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgbGVmdDogdGFyZ2V0X3JlY3RhbmdsZS53aWR0aCAvIDIgKyB0YXJnZXRfcmVjdGFuZ2xlLmxlZnQsXFxuICAgICAgICAgICAgYm90dG9tOiB3aW5kb3cuaW5uZXJIZWlnaHQgLSB0YXJnZXRfcmVjdGFuZ2xlLnRvcCArIG1hcmdpbixcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IFxcJ3RyYW5zbGF0ZVgoLTUwJSlcXCdcXG4gICAgICAgICAgfTtcXG5cXG4gICAgICAgIGNhc2UgXFwnYm90dG9tXFwnOlxcbiAgICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIGxlZnQ6IHRhcmdldF9yZWN0YW5nbGUud2lkdGggLyAyICsgdGFyZ2V0X3JlY3RhbmdsZS5sZWZ0LFxcbiAgICAgICAgICAgIHRvcDogdGFyZ2V0X3JlY3RhbmdsZS5ib3R0b20gKyBtYXJnaW4sXFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBcXCd0cmFuc2xhdGVYKC01MCUpXFwnXFxuICAgICAgICAgIH07XFxuXFxuICAgICAgICBjYXNlIFxcJ2xlZnRcXCc6XFxuICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgcmlnaHQ6IHdpbmRvdy5pbm5lcldpZHRoIC0gdGFyZ2V0X3JlY3RhbmdsZS5sZWZ0ICsgbWFyZ2luLFxcbiAgICAgICAgICAgIHRvcDogdGFyZ2V0X3JlY3RhbmdsZS5oZWlnaHQgLyAyICsgdGFyZ2V0X3JlY3RhbmdsZS50b3AsXFxuICAgICAgICAgICAgdHJhbnNmb3JtOiBcXCd0cmFuc2xhdGVZKC01MCUpXFwnXFxuICAgICAgICAgIH07XFxuXFxuICAgICAgICBjYXNlIFxcJ3JpZ2h0XFwnOlxcbiAgICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIGxlZnQ6IHRhcmdldF9yZWN0YW5nbGUucmlnaHQgKyBtYXJnaW4sXFxuICAgICAgICAgICAgdG9wOiB0YXJnZXRfcmVjdGFuZ2xlLmhlaWdodCAvIDIgKyB0YXJnZXRfcmVjdGFuZ2xlLnRvcCxcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IFxcJ3RyYW5zbGF0ZVkoLTUwJSlcXCdcXG4gICAgICAgICAgfTtcXG5cXG4gICAgICAgIGRlZmF1bHQ6XFxuICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgbGVmdDogdGFyZ2V0X3JlY3RhbmdsZS5sZWZ0LFxcbiAgICAgICAgICAgIHRvcDogdGFyZ2V0X3JlY3RhbmdsZS50b3BcXG4gICAgICAgICAgfTtcXG4gICAgICB9XFxuICAgIH07XFxuXFxuICAgIHJldHVybiBfdGhpcztcXG4gIH1cXG5cXG4gIF9jcmVhdGVDbGFzcyhQb3BvdmVyQnViYmxlLCBbe1xcbiAgICBrZXk6IFwicmVuZGVyXCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XFxuICAgICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXFxuICAgICAgICAgIGFsaWdubWVudCA9IF90aGlzJHByb3BzMi5hbGlnbm1lbnQsXFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJHByb3BzMi5jbGFzc05hbWUsXFxuICAgICAgICAgIGhhc19lcnJvciA9IF90aGlzJHByb3BzMi5oYXNfZXJyb3IsXFxuICAgICAgICAgIGljb24gPSBfdGhpcyRwcm9wczIuaWNvbixcXG4gICAgICAgICAgaWQgPSBfdGhpcyRwcm9wczIuaWQsXFxuICAgICAgICAgIGlzX29wZW4gPSBfdGhpcyRwcm9wczIuaXNfb3BlbixcXG4gICAgICAgICAgbWVzc2FnZSA9IF90aGlzJHByb3BzMi5tZXNzYWdlLFxcbiAgICAgICAgICB0YXJnZXRfcmVjdGFuZ2xlID0gX3RoaXMkcHJvcHMyLnRhcmdldF9yZWN0YW5nbGUsXFxuICAgICAgICAgIHBvcnRhbF9jb250YWluZXIgPSBfdGhpcyRwcm9wczIucG9ydGFsX2NvbnRhaW5lcjtcXG4gICAgICBpZiAoIXRhcmdldF9yZWN0YW5nbGUpIHJldHVybiBudWxsO1xcbiAgICAgIHZhciBwb3BvdmVyX2J1YmJsZSA9IGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGV4dGVybmFsX3JlYWN0X3Bvc2VfW1wiUG9zZUdyb3VwXCJdLCBudWxsLCBpc19vcGVuICYmIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KEZhZGVJbiwge1xcbiAgICAgICAga2V5OiBcImZhZGVfaW5cIixcXG4gICAgICAgIGluaXRpYWxQb3NlOiBcImV4aXRcIixcXG4gICAgICAgIHN0eWxlOiB7XFxuICAgICAgICAgIHBvc2l0aW9uOiBcXCdmaXhlZFxcJyxcXG4gICAgICAgICAgekluZGV4OiA5OTlcXG4gICAgICAgIH1cXG4gICAgICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xcbiAgICAgICAgc3R5bGU6IHRhcmdldF9yZWN0YW5nbGUgPyB0aGlzLmNhbGN1bGF0ZVBvc2l0aW9uKCkgOiB7fSxcXG4gICAgICAgIFwiZGF0YS1wb3BvdmVyLXBvc1wiOiBhbGlnbm1lbnQsXFxuICAgICAgICBjbGFzc05hbWU6IGV4dGVybmFsX2NsYXNzbmFtZXNfZGVmYXVsdCgpKGNsYXNzTmFtZSwgXFwnZGMtcG9wb3Zlcl9fYnViYmxlXFwnLCB7XFxuICAgICAgICAgIFxcJ2RjLXBvcG92ZXJfX2J1YmJsZS0tZXJyb3JcXCc6IGhhc19lcnJvclxcbiAgICAgICAgfSksXFxuICAgICAgICBpZDogaWRcXG4gICAgICB9LCBpY29uID09PSBcXCdpbmZvXFwnICYmIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiaVwiLCB7XFxuICAgICAgICBjbGFzc05hbWU6IFwiZGMtcG9wb3Zlcl9fYnViYmxlX19pY29uXCJcXG4gICAgICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChpY29uX2luZm9fYmx1ZSwgbnVsbCkpLCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xcbiAgICAgICAgY2xhc3NOYW1lOiBcImRjLXBvcG92ZXJfX2J1YmJsZV9fdGV4dFwiXFxuICAgICAgfSwgbWVzc2FnZSksIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XFxuICAgICAgICBjbGFzc05hbWU6IFwiZGMtcG9wb3Zlcl9fYnViYmxlX19hcnJvd1wiXFxuICAgICAgfSkpKSk7XFxuICAgICAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RvbV9kZWZhdWx0LmEuY3JlYXRlUG9ydGFsKHBvcG92ZXJfYnViYmxlLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwb3J0YWxfY29udGFpbmVyKSk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBQb3BvdmVyQnViYmxlO1xcbn0oZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLlB1cmVDb21wb25lbnQpO1xcblxcbnBvcG92ZXJfYnViYmxlX1BvcG92ZXJCdWJibGUucHJvcFR5cGVzID0ge1xcbiAgYWxpZ25tZW50OiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBjaGlsZHJlbjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubm9kZSxcXG4gIGNsYXNzTmFtZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgaGFzX2Vycm9yOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sLFxcbiAgaWNvbjogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgaWQ6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGlzX29wZW46IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBtYXJnaW46IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm51bWJlcixcXG4gIG1lc3NhZ2U6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZy5pc1JlcXVpcmVkLFxcbiAgdGFyZ2V0X3JlY3RhbmdsZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub2JqZWN0XFxufTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBwb3BvdmVyX3BvcG92ZXJfYnViYmxlID0gKHBvcG92ZXJfYnViYmxlX1BvcG92ZXJCdWJibGUpO1xcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvaWNvbi1pbmZvLW91dGxpbmUuanN4XFxuXFxuXFxuIC8vIFRPRE8gcmVtb3ZlIHRoaXMgZmlsZSBlbnRpcmVseSB3aGVuIGljb24gY29tcG9uZW50IGlzIHJlYWR5LlxcblxcbnZhciBpY29uX2luZm9fb3V0bGluZV9JY29uSW5mb091dGxpbmUgPSBmdW5jdGlvbiBJY29uSW5mb091dGxpbmUoX3JlZikge1xcbiAgdmFyIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxcbiAgICAgIG9uTW91c2VFbnRlciA9IF9yZWYub25Nb3VzZUVudGVyLFxcbiAgICAgIG9uTW91c2VMZWF2ZSA9IF9yZWYub25Nb3VzZUxlYXZlO1xcbiAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdpbmxpbmUtaWNvblxcJywgY2xhc3NOYW1lKSxcXG4gICAgaGVpZ2h0OiBcIjE2XCIsXFxuICAgIG9uTW91c2VFbnRlcjogb25Nb3VzZUVudGVyLFxcbiAgICBvbk1vdXNlTGVhdmU6IG9uTW91c2VMZWF2ZSxcXG4gICAgdmlld0JveDogXCIwIDAgMTYgMTZcIixcXG4gICAgd2lkdGg6IFwiMTZcIlxcbiAgfSwgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBcImNvbG9yMS1maWxsXCIsXFxuICAgIGZpbGw6IFwicmdiYSgwLCAwLCAwLCAwLjE2KVwiLFxcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXFxuICAgIGQ6IFwiTTggMTVBNyA3IDAgMSAwIDggMWE3IDcgMCAwIDAgMCAxNHptMCAxQTggOCAwIDEgMSA4IDBhOCA4IDAgMCAxIDAgMTZ6TTggNmEuNzUuNzUgMCAxIDAgMC0xLjVBLjc1Ljc1IDAgMCAwIDggNnptMCAxYS41LjUgMCAwIDAtLjUuNXY0YS41LjUgMCAxIDAgMSAwdi00QS41LjUgMCAwIDAgOCA3elwiXFxuICB9KSk7XFxufTtcXG5cXG5pY29uX2luZm9fb3V0bGluZV9JY29uSW5mb091dGxpbmUucHJvcFR5cGVzID0ge1xcbiAgY2xhc3NOYW1lOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmdcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGljb25faW5mb19vdXRsaW5lID0gKGljb25faW5mb19vdXRsaW5lX0ljb25JbmZvT3V0bGluZSk7XFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9pY29uLXF1ZXN0aW9uLmpzeFxcblxcbiAvLyBUT0RPIHJlbW92ZSB0aGlzIGZpbGUgZW50aXJlbHkgd2hlbiBpY29uIGNvbXBvbmVudCBpcyByZWFkeS5cXG5cXG52YXIgaWNvbl9xdWVzdGlvbl9JY29uUXVlc3Rpb24gPSBmdW5jdGlvbiBJY29uUXVlc3Rpb24oX3JlZikge1xcbiAgdmFyIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lO1xcbiAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXFxuICAgIHdpZHRoOiBcIjE2XCIsXFxuICAgIGhlaWdodDogXCIxNlwiLFxcbiAgICB2aWV3Qm94OiBcIjAgMCAxNiAxNlwiXFxuICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImdcIiwge1xcbiAgICBmaWxsOiBcIiNGRkZcIixcXG4gICAgZmlsbFJ1bGU6IFwiZXZlbm9kZFwiXFxuICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xcbiAgICBkOiBcIk04IDE2QTggOCAwIDEgMSA4IDBhOCA4IDAgMCAxIDAgMTZ6bTAtMUE3IDcgMCAxIDAgOCAxYTcgNyAwIDAgMCAwIDE0elwiLFxcbiAgICBmaWxsUnVsZTogXCJub256ZXJvXCJcXG4gIH0pLCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xcbiAgICBkOiBcIk03LjM5IDkuNTE4Yy4wMDctLjM3My4wNTItLjY2OC4xMzQtLjg4NS4wODItLjIxNi4yNS0uNDU2LjUwMy0uNzJsLjY0Ni0uNjM2Yy4yNzYtLjI5OC40MTUtLjYxOC40MTUtLjk2IDAtLjMzLS4wOS0uNTg4LS4yNzItLjc3NC0uMTgtLjE4Ny0uNDQ0LS4yOC0uNzg5LS4yOC0uMzM1IDAtLjYwNS4wODQtLjgwOS4yNTRhLjg0Mi44NDIgMCAwIDAtLjMwNi42ODJINmMuMDA3LS41MDguMTk2LS45MTguNTctMS4yMy4zNzMtLjMxMy44NTktLjQ2OSAxLjQ1Ny0uNDY5LjYyMiAwIDEuMTA2LjE2IDEuNDUzLjQ3OC4zNDcuMzE4LjUyLjc1NS41MiAxLjMxIDAgLjU1LS4yNjYgMS4wOTEtLjc5OSAxLjYyNWwtLjUzOC41MDhjLS4yNC4yNTUtLjM2LjYyLS4zNiAxLjA5N2gtLjkxMnptLS4wMzkgMS40OTJhLjUuNSAwIDAgMSAuMTM2LS4zNTVjLjA5LS4wOTYuMjI0LS4xNDQuNDAyLS4xNDQuMTc4IDAgLjMxMi4wNDguNDA0LjE0NGEuNDkzLjQ5MyAwIDAgMSAuMTM5LjM1NS40NzcuNDc3IDAgMCAxLS4xMzkuMzUxYy0uMDkyLjA5My0uMjI2LjEzOS0uNDA0LjEzOS0uMTc4IDAtLjMxMi0uMDQ2LS40MDItLjEzOWEuNDgxLjQ4MSAwIDAgMS0uMTM2LS4zNXpcIlxcbiAgfSkpKTtcXG59O1xcblxcbmljb25fcXVlc3Rpb25fSWNvblF1ZXN0aW9uLnByb3BUeXBlcyA9IHtcXG4gIGNsYXNzTmFtZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nXFxufTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBpY29uX3F1ZXN0aW9uID0gKGljb25fcXVlc3Rpb25fSWNvblF1ZXN0aW9uKTtcXG4vLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL2ljb24tcmVkLWRvdC5qc3hcXG5cXG4gLy8gVE9ETyByZW1vdmUgdGhpcyBmaWxlIGVudGlyZWx5IHdoZW4gaWNvbiBjb21wb25lbnQgaXMgcmVhZHkuXFxuXFxudmFyIGljb25fcmVkX2RvdF9JY29uUmVkRG90ID0gZnVuY3Rpb24gSWNvblJlZERvdChfcmVmKSB7XFxuICB2YXIgY2xhc3NOYW1lID0gX3JlZi5jbGFzc05hbWU7XFxuICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwge1xcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcXG4gICAgd2lkdGg6IFwiNFwiLFxcbiAgICBoZWlnaHQ6IFwiNFwiXFxuICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImNpcmNsZVwiLCB7XFxuICAgIGN4OiBcIjExNjNcIixcXG4gICAgY3k6IFwiNjI2XCIsXFxuICAgIHI6IFwiMlwiLFxcbiAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKC0xMTYxIC02MjQpXCIsXFxuICAgIGZpbGw6IFwiI0UzMUM0QlwiLFxcbiAgICBmaWxsUnVsZTogXCJub256ZXJvXCJcXG4gIH0pKTtcXG59O1xcblxcbmljb25fcmVkX2RvdF9JY29uUmVkRG90LnByb3BUeXBlcyA9IHtcXG4gIGNsYXNzTmFtZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nXFxufTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBpY29uX3JlZF9kb3QgPSAoaWNvbl9yZWRfZG90X0ljb25SZWREb3QpO1xcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9wb3BvdmVyLmpzeFxcbmZ1bmN0aW9uIHBvcG92ZXJfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgcG9wb3Zlcl90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgcG9wb3Zlcl90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gcG9wb3Zlcl90eXBlb2Yob2JqKTsgfVxcblxcbmZ1bmN0aW9uIHBvcG92ZXJfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxcblxcbmZ1bmN0aW9uIHBvcG92ZXJfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XFxuXFxuZnVuY3Rpb24gcG9wb3Zlcl9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIHBvcG92ZXJfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIHBvcG92ZXJfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cXG5cXG5mdW5jdGlvbiBwb3BvdmVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAocG9wb3Zlcl90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIHBvcG92ZXJfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XFxuXFxuZnVuY3Rpb24gcG9wb3Zlcl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBwb3BvdmVyX2dldFByb3RvdHlwZU9mKG8pIHsgcG9wb3Zlcl9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBwb3BvdmVyX2dldFByb3RvdHlwZU9mKG8pOyB9XFxuXFxuZnVuY3Rpb24gcG9wb3Zlcl9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBwb3BvdmVyX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxcblxcbmZ1bmN0aW9uIHBvcG92ZXJfc2V0UHJvdG90eXBlT2YobywgcCkgeyBwb3BvdmVyX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBwb3BvdmVyX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxudmFyIHBvcG92ZXJfUG9wb3ZlciA9XFxuLyojX19QVVJFX18qL1xcbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xcbiAgcG9wb3Zlcl9pbmhlcml0cyhQb3BvdmVyLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XFxuXFxuICBmdW5jdGlvbiBQb3BvdmVyKHByb3BzKSB7XFxuICAgIHZhciBfdGhpcztcXG5cXG4gICAgcG9wb3Zlcl9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BvdmVyKTtcXG5cXG4gICAgX3RoaXMgPSBwb3BvdmVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcG9wb3Zlcl9nZXRQcm90b3R5cGVPZihQb3BvdmVyKS5jYWxsKHRoaXMsIHByb3BzKSk7XFxuXFxuICAgIF90aGlzLnRvZ2dsZU9wZW4gPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xcbiAgICAgICAgaXNfb3BlbjogQm9vbGVhbihfdGhpcy5wcm9wcy5tZXNzYWdlKSxcXG4gICAgICAgIHRhcmdldF9yZWN0YW5nbGU6IF90aGlzLnRhcmdldF9yZWZlcmVuY2UuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxcbiAgICAgIH0pO1xcbiAgICB9O1xcblxcbiAgICBfdGhpcy50b2dnbGVDbG9zZSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoe1xcbiAgICAgICAgaXNfb3BlbjogZmFsc2VcXG4gICAgICB9KTtcXG4gICAgfTtcXG5cXG4gICAgX3RoaXMuc3RhdGUgPSB7XFxuICAgICAgaXNfb3BlbjogZmFsc2UsXFxuICAgICAgdGFyZ2V0X3JlY3RhbmdsZTogbnVsbFxcbiAgICB9O1xcbiAgICBfdGhpcy50YXJnZXRfcmVmZXJlbmNlID0gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZVJlZigpO1xcbiAgICByZXR1cm4gX3RoaXM7XFxuICB9XFxuXFxuICBwb3BvdmVyX2NyZWF0ZUNsYXNzKFBvcG92ZXIsIFt7XFxuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XFxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XFxuICAgICAgICBpc19vcGVuOiB0aGlzLnByb3BzLmhhc19lcnJvcixcXG4gICAgICAgIHRhcmdldF9yZWN0YW5nbGU6IHRoaXMudGFyZ2V0X3JlZmVyZW5jZS5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXFxuICAgICAgfSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlbmRlclwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xcbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXFxuICAgICAgICAgIGFsaWdubWVudCA9IF90aGlzJHByb3BzLmFsaWdubWVudCxcXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcXG4gICAgICAgICAgY2xhc3NOYW1lQnViYmxlID0gX3RoaXMkcHJvcHMuY2xhc3NOYW1lQnViYmxlLFxcbiAgICAgICAgICBjbGFzc05hbWVUYXJnZXQgPSBfdGhpcyRwcm9wcy5jbGFzc05hbWVUYXJnZXQsXFxuICAgICAgICAgIGNsYXNzTmFtZVRhcmdldEljb24gPSBfdGhpcyRwcm9wcy5jbGFzc05hbWVUYXJnZXRJY29uLFxcbiAgICAgICAgICBkaXNhYmxlX3RhcmdldF9pY29uID0gX3RoaXMkcHJvcHMuZGlzYWJsZV90YXJnZXRfaWNvbixcXG4gICAgICAgICAgZGlzYWJsZV9tZXNzYWdlX2ljb24gPSBfdGhpcyRwcm9wcy5kaXNhYmxlX21lc3NhZ2VfaWNvbixcXG4gICAgICAgICAgaGFzX2Vycm9yID0gX3RoaXMkcHJvcHMuaGFzX2Vycm9yLFxcbiAgICAgICAgICBpY29uID0gX3RoaXMkcHJvcHMuaWNvbixcXG4gICAgICAgICAgaWQgPSBfdGhpcyRwcm9wcy5pZCxcXG4gICAgICAgICAgbWFyZ2luID0gX3RoaXMkcHJvcHMubWFyZ2luLFxcbiAgICAgICAgICBtZXNzYWdlID0gX3RoaXMkcHJvcHMubWVzc2FnZTtcXG4gICAgICB2YXIgaWNvbl9jbGFzc19uYW1lID0gZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoY2xhc3NOYW1lVGFyZ2V0SWNvbiwgaWNvbik7XFxuICAgICAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogXCJkYy1wb3BvdmVyXCIsXFxuICAgICAgICBpZDogaWQsXFxuICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMudG9nZ2xlT3BlbixcXG4gICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy50b2dnbGVDbG9zZVxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoY2xhc3NOYW1lVGFyZ2V0LCBcXCdkYy1wb3BvdmVyX190YXJnZXRcXCcpLFxcbiAgICAgICAgcmVmOiB0aGlzLnRhcmdldF9yZWZlcmVuY2VcXG4gICAgICB9LCAhZGlzYWJsZV90YXJnZXRfaWNvbiAmJiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImlcIiwge1xcbiAgICAgICAgY2xhc3NOYW1lOiBtZXNzYWdlID8gXFwnZGMtcG9wb3Zlcl9fdGFyZ2V0X19pY29uXFwnIDogXFwnZGMtcG9wb3Zlcl9fdGFyZ2V0X19pY29uLS1kaXNhYmxlZFxcJ1xcbiAgICAgIH0sIGljb24gPT09IFxcJ2luZm9cXCcgJiYgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoaWNvbl9pbmZvX291dGxpbmUsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogaWNvbl9jbGFzc19uYW1lXFxuICAgICAgfSksIGljb24gPT09IFxcJ3F1ZXN0aW9uXFwnICYmIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGljb25fcXVlc3Rpb24sIHtcXG4gICAgICAgIGNsYXNzTmFtZTogaWNvbl9jbGFzc19uYW1lXFxuICAgICAgfSksIGljb24gPT09IFxcJ2RvdFxcJyAmJiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChpY29uX3JlZF9kb3QsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogaWNvbl9jbGFzc19uYW1lXFxuICAgICAgfSkpLCBjaGlsZHJlbiksIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KHBvcG92ZXJfcG9wb3Zlcl9idWJibGUsIHtcXG4gICAgICAgIGFsaWdubWVudDogYWxpZ25tZW50LFxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVCdWJibGUsXFxuICAgICAgICBoYXNfZXJyb3I6IGhhc19lcnJvcixcXG4gICAgICAgIGljb246ICFkaXNhYmxlX21lc3NhZ2VfaWNvbiAmJiBpY29uLFxcbiAgICAgICAgaWQ6IFwiXCIuY29uY2F0KGlkLCBcIl9idWJibGVcIiksXFxuICAgICAgICBpc19vcGVuOiB0aGlzLnN0YXRlLmlzX29wZW4sXFxuICAgICAgICB0YXJnZXRfcmVjdGFuZ2xlOiB0aGlzLnN0YXRlLnRhcmdldF9yZWN0YW5nbGUsXFxuICAgICAgICBtYXJnaW46IG1hcmdpbixcXG4gICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXFxuICAgICAgICBwb3J0YWxfY29udGFpbmVyOiB0aGlzLnByb3BzLnBvcnRhbF9jb250YWluZXJcXG4gICAgICB9KSk7XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBQb3BvdmVyO1xcbn0oZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLlB1cmVDb21wb25lbnQpO1xcblxcbnBvcG92ZXJfUG9wb3Zlci5kZWZhdWx0UHJvcHMgPSB7XFxuICBwb3J0YWxfY29udGFpbmVyOiBcXCdkZXJpdl9hcHBcXCdcXG59O1xcbnBvcG92ZXJfUG9wb3Zlci5wcm9wVHlwZXMgPSB7XFxuICBhbGlnbm1lbnQ6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGNoaWxkcmVuOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ub2RlLFxcbiAgY2xhc3NOYW1lQnViYmxlOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBjbGFzc05hbWVUYXJnZXQ6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGNsYXNzTmFtZVRhcmdldEljb246IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGRpc2FibGVfdGFyZ2V0X2ljb246IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBoYXNfZXJyb3I6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBpY29uOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBpZDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgbWFyZ2luOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5udW1iZXIsXFxuICBtZXNzYWdlOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBwb3J0YWxfY29udGFpbmVyOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmdcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHBvcG92ZXJfcG9wb3ZlciA9IChwb3BvdmVyX1BvcG92ZXIpO1xcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvcG9wb3Zlci9pbmRleC5qc1xcbi8qIGNvbmNhdGVkIGhhcm1vbnkgcmVleHBvcnQgZGVmYXVsdCAqL19fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRlZmF1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBwb3BvdmVyX3BvcG92ZXI7IH0pO1xcblxcblxcbi8vIyBzb3VyY2VVUkw9W21vZHVsZV1cXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaU1URXVhbk1pTENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OWtaWEpwZGkxamIyMXdiMjVsYm5RdVcyNWhiV1ZkTHk0dmMzSmpMMk52YlhCdmJtVnVkSE12YVdOdmJpMXBibVp2TFdKc2RXVXVhbk40UDJZd01UVWlMQ0ozWldKd1lXTnJPaTh2WkdWeWFYWXRZMjl0Y0c5dVpXNTBMbHR1WVcxbFhTOHVMM055WXk5amIyMXdiMjVsYm5SekwzQnZjRzkyWlhJdmNHOXdiM1psY2kxaWRXSmliR1V1YW5ONFB6QTNaRFVpTENKM1pXSndZV05yT2k4dlpHVnlhWFl0WTI5dGNHOXVaVzUwTGx0dVlXMWxYUzh1TDNOeVl5OWpiMjF3YjI1bGJuUnpMMmxqYjI0dGFXNW1ieTF2ZFhSc2FXNWxMbXB6ZUQ5aE9USTVJaXdpZDJWaWNHRmphem92TDJSbGNtbDJMV052YlhCdmJtVnVkQzViYm1GdFpWMHZMaTl6Y21NdlkyOXRjRzl1Wlc1MGN5OXBZMjl1TFhGMVpYTjBhVzl1TG1wemVEODJNelJtSWl3aWQyVmljR0ZqYXpvdkwyUmxjbWwyTFdOdmJYQnZibVZ1ZEM1YmJtRnRaVjB2TGk5emNtTXZZMjl0Y0c5dVpXNTBjeTlwWTI5dUxYSmxaQzFrYjNRdWFuTjRQekkwT1dNaUxDSjNaV0p3WVdOck9pOHZaR1Z5YVhZdFkyOXRjRzl1Wlc1MExsdHVZVzFsWFM4dUwzTnlZeTlqYjIxd2IyNWxiblJ6TDNCdmNHOTJaWEl2Y0c5d2IzWmxjaTVxYzNnL016VTVNU0lzSW5kbFluQmhZMnM2THk5a1pYSnBkaTFqYjIxd2IyNWxiblF1VzI1aGJXVmRMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZjRzl3YjNabGNpOXBibVJsZUM1cWN6OWlOalkzSWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCUWNtOXdWSGx3WlhNZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ1VtVmhZM1FnSUNBZ0lHWnliMjBnSjNKbFlXTjBKenRjYmx4dUx5OGdWRTlFVHlCeVpXMXZkbVVnZEdocGN5Qm1hV3hsSUdWdWRHbHlaV3g1SUhkb1pXNGdhV052YmlCamIyMXdiMjVsYm5RZ2FYTWdjbVZoWkhrdVhHNWpiMjV6ZENCSlkyOXVTVzVtYjBKc2RXVWdQU0FvZXlCamJHRnpjMDVoYldVZ2ZTa2dQVDRnS0Z4dUlDQWdJRHh6ZG1jZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzA1aGJXVjlJSGRwWkhSb1BTY3hOaWNnYUdWcFoyaDBQU2N4TmljZ2RtbGxkMEp2ZUQwbk1DQXdJREUySURFMkp6NWNiaUFnSUNBZ0lDQWdQR2NnWm1sc2JEMG5ibTl1WlNjZ1ptbHNiRkoxYkdVOUoyVjJaVzV2WkdRblBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEdOcGNtTnNaU0JqZUQwbk9DY2dZM2s5SnpnbklISTlKemduSUdacGJHdzlKeU15TVRrMlJqTW5JQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQThaeUJtYVd4c1BTY2pSa1pHSnlCMGNtRnVjMlp2Y20wOUozUnlZVzV6YkdGMFpTZzJMalVnTkNrblBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGphWEpqYkdVZ1kzZzlKekV1TlNjZ1kzazlKekVuSUhJOUp6RW5JQzgrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhKbFkzUWdkMmxrZEdnOUp6SW5JR2hsYVdkb2REMG5OU2NnZUQwbkxqVW5JSGs5SnpNbklISjRQU2N4SnlBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnUEM5blBseHVJQ0FnSUNBZ0lDQThMMmMrWEc0Z0lDQWdQQzl6ZG1jK1hHNHBPMXh1WEc1SlkyOXVTVzVtYjBKc2RXVXVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQWdJR05zWVhOelRtRnRaVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFbGpiMjVKYm1adlFteDFaVHRjYmlJc0ltbHRjRzl5ZENCamJHRnpjMDVoYldWeklDQWdJQ0FnSUNBZ0lDQm1jbTl0SUNkamJHRnpjMjVoYldWekp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdJQ0FnSUNBZ0lDQWdJQ0JtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JTWldGamRDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRJQ2R5WldGamRDYzdYRzVwYlhCdmNuUWdVbVZoWTNSRVQwMGdJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJTQW5jbVZoWTNRdFpHOXRKenRjYm1sdGNHOXlkQ0J3YjNObFpDd2dleUJRYjNObFIzSnZkWEFnZlNCbWNtOXRJQ2R5WldGamRDMXdiM05sSnp0Y2JtbHRjRzl5ZENCSlkyOXVTVzVtYjBKc2RXVWdJQ0FnSUNBZ0lDQm1jbTl0SUNjdUxpOXBZMjl1TFdsdVptOHRZbXgxWlM1cWMzZ25PMXh1WEc1amIyNXpkQ0JHWVdSbFNXNGdQU0J3YjNObFpDNXpjR0Z1S0h0Y2JpQWdJQ0JsYm5SbGNqb2dlMXh1SUNBZ0lDQWdJQ0J2Y0dGamFYUjVJQ0FnT2lBeExGeHVJQ0FnSUNBZ0lDQjBjbUZ1YzJsMGFXOXVPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtkWEpoZEdsdmJqb2dNVFV3TEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUgwc1hHNGdJQ0FnWlhocGREb2dlMXh1SUNBZ0lDQWdJQ0J2Y0dGamFYUjVJQ0FnT2lBd0xGeHVJQ0FnSUNBZ0lDQjBjbUZ1YzJsMGFXOXVPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtkWEpoZEdsdmJqb2dNVFV3TEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUgwc1hHNTlLVHRjYmx4dVkyeGhjM01nVUc5d2IzWmxja0oxWW1Kc1pTQmxlSFJsYm1SeklGSmxZV04wTGxCMWNtVkRiMjF3YjI1bGJuUWdlMXh1SUNBZ0lHTmhiR04xYkdGMFpWQnZjMmwwYVc5dUlEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHRnNhV2R1YldWdWRDd2dkR0Z5WjJWMFgzSmxZM1JoYm1kc1pTd2diV0Z5WjJsdUlEMGdNQ0I5SUQwZ2RHaHBjeTV3Y205d2N6dGNibHh1SUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR0ZzYVdkdWJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmRHOXdKem9nY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWldaMElDQWdJQ0E2SUNoMFlYSm5aWFJmY21WamRHRnVaMnhsTG5kcFpIUm9JQzhnTWlrZ0t5QjBZWEpuWlhSZmNtVmpkR0Z1WjJ4bExteGxablFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05MGRHOXRJQ0FnT2lBb2QybHVaRzkzTG1sdWJtVnlTR1ZwWjJoMElDMGdkR0Z5WjJWMFgzSmxZM1JoYm1kc1pTNTBiM0FwSUNzZ2JXRnlaMmx1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeVlXNXpabTl5YlRvZ0ozUnlZVzV6YkdGMFpWZ29MVFV3SlNrbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oySnZkSFJ2YlNjNklISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kQ0FnSUNBZ09pQW9kR0Z5WjJWMFgzSmxZM1JoYm1kc1pTNTNhV1IwYUNBdklESXBJQ3NnZEdGeVoyVjBYM0psWTNSaGJtZHNaUzVzWldaMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZjQ0FnSUNBZ0lEb2dkR0Z5WjJWMFgzSmxZM1JoYm1kc1pTNWliM1IwYjIwZ0t5QnRZWEpuYVc0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5tYjNKdE9pQW5kSEpoYm5Oc1lYUmxXQ2d0TlRBbEtTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5iR1ZtZENjNklISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtbG5hSFFnSUNBZ09pQW9kMmx1Wkc5M0xtbHVibVZ5VjJsa2RHZ2dMU0IwWVhKblpYUmZjbVZqZEdGdVoyeGxMbXhsWm5RcElDc2diV0Z5WjJsdUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZjQ0FnSUNBZ0lEb2dLSFJoY21kbGRGOXlaV04wWVc1bmJHVXVhR1ZwWjJoMElDOGdNaWtnS3lCMFlYSm5aWFJmY21WamRHRnVaMnhsTG5SdmNDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJadmNtMDZJQ2QwY21GdWMyeGhkR1ZaS0MwMU1DVXBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2R5YVdkb2RDYzZJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1ZtZENBZ0lDQWdPaUIwWVhKblpYUmZjbVZqZEdGdVoyeGxMbkpwWjJoMElDc2diV0Z5WjJsdUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZjQ0FnSUNBZ0lEb2dLSFJoY21kbGRGOXlaV04wWVc1bmJHVXVhR1ZwWjJoMElDOGdNaWtnS3lCMFlYSm5aWFJmY21WamRHRnVaMnhsTG5SdmNDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJadmNtMDZJQ2QwY21GdWMyeGhkR1ZaS0MwMU1DVXBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2lCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bFpuUTZJSFJoY21kbGRGOXlaV04wWVc1bmJHVXViR1ZtZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIzQWdPaUIwWVhKblpYUmZjbVZqZEdGdVoyeGxMblJ2Y0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnY21WdVpHVnlLQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhiR2xuYm0xbGJuUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWVhOZlpYSnliM0lzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBZMjl1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMTl2Y0dWdUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZEY5eVpXTjBZVzVuYkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjNKMFlXeGZZMjl1ZEdGcGJtVnlMRnh1SUNBZ0lDQWdJQ0I5SUQwZ2RHaHBjeTV3Y205d2N6dGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYUmhjbWRsZEY5eVpXTjBZVzVuYkdVcElISmxkSFZ5YmlCdWRXeHNPMXh1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJ2Y0c5MlpYSmZZblZpWW14bElEMGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BGQnZjMlZIY205MWNENWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJR2x6WDI5d1pXNGdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4Um1Ga1pVbHVJR3RsZVQwblptRmtaVjlwYmljZ2FXNXBkR2xoYkZCdmMyVTlKMlY0YVhRbklITjBlV3hsUFh0N0lIQnZjMmwwYVc5dU9pQW5abWw0WldRbkxDQjZTVzVrWlhnNklEazVPU0I5ZlQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE53WVc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGVXeGxQWHNnZEdGeVoyVjBYM0psWTNSaGJtZHNaU0EvSUhSb2FYTXVZMkZzWTNWc1lYUmxVRzl6YVhScGIyNG9LU0E2SUh0OWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZUzF3YjNCdmRtVnlMWEJ2Y3oxN1lXeHBaMjV0Wlc1MGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBYdGpiR0Z6YzA1aGJXVnpLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5aR010Y0c5d2IzWmxjbDlmWW5WaVlteGxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lDZGtZeTF3YjNCdmRtVnlYMTlpZFdKaWJHVXRMV1Z5Y205eUp6b2dhR0Z6WDJWeWNtOXlJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdROWUybGtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lHbGpiMjRnUFQwOUlDZHBibVp2SnlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhwSUdOc1lYTnpUbUZ0WlQwblpHTXRjRzl3YjNabGNsOWZZblZpWW14bFgxOXBZMjl1Sno1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEVsamIyNUpibVp2UW14MVpTQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmFUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE53WVc0Z1kyeGhjM05PWVcxbFBTZGtZeTF3YjNCdmRtVnlYMTlpZFdKaWJHVmZYM1JsZUhRblBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnYldWemMyRm5aU0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNOd1lXNCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjM0JoYmlCamJHRnpjMDVoYldVOUoyUmpMWEJ2Y0c5MlpYSmZYMkoxWW1Kc1pWOWZZWEp5YjNjbklDOCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmMzQmhiajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDBaaFpHVkpiajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQThMMUJ2YzJWSGNtOTFjRDVjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VtVmhZM1JFVDAwdVkzSmxZWFJsVUc5eWRHRnNLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXdiM1psY2w5aWRXSmliR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNod2IzSjBZV3hmWTI5dWRHRnBibVZ5S1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JuMWNibHh1VUc5d2IzWmxja0oxWW1Kc1pTNXdjbTl3Vkhsd1pYTWdQU0I3WEc0Z0lDQWdZV3hwWjI1dFpXNTBJQ0FnSUNBZ0lEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNCamFHbHNaSEpsYmlBZ0lDQWdJQ0FnT2lCUWNtOXdWSGx3WlhNdWJtOWtaU3hjYmlBZ0lDQmpiR0Z6YzA1aGJXVWdJQ0FnSUNBZ09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUdoaGMxOWxjbkp2Y2lBZ0lDQWdJQ0E2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lHbGpiMjRnSUNBZ0lDQWdJQ0FnSUNBNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnYVdRZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQnBjMTl2Y0dWdUlDQWdJQ0FnSUNBZ09pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0J0WVhKbmFXNGdJQ0FnSUNBZ0lDQWdPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMRnh1SUNBZ0lHMWxjM05oWjJVZ0lDQWdJQ0FnSUNBNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jdWFYTlNaWEYxYVhKbFpDeGNiaUFnSUNCMFlYSm5aWFJmY21WamRHRnVaMnhsT2lCUWNtOXdWSGx3WlhNdWIySnFaV04wTEZ4dWZUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdVRzl3YjNabGNrSjFZbUpzWlR0Y2JpSXNJbWx0Y0c5eWRDQmpiR0Z6YzA1aGJXVnpJR1p5YjIwZ0oyTnNZWE56Ym1GdFpYTW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUFnWm5KdmJTQW5jSEp2Y0MxMGVYQmxjeWM3WEc1cGJYQnZjblFnVW1WaFkzUWdJQ0FnSUNCbWNtOXRJQ2R5WldGamRDYzdYRzVjYmk4dklGUlBSRThnY21WdGIzWmxJSFJvYVhNZ1ptbHNaU0JsYm5ScGNtVnNlU0IzYUdWdUlHbGpiMjRnWTI5dGNHOXVaVzUwSUdseklISmxZV1I1TGx4dVkyOXVjM1FnU1dOdmJrbHVabTlQZFhSc2FXNWxJRDBnS0hzZ1kyeGhjM05PWVcxbExDQnZiazF2ZFhObFJXNTBaWElzSUc5dVRXOTFjMlZNWldGMlpTQjlLU0E5UGlBb1hHNGdJQ0FnUEhOMloxeHVJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk5zWVhOelRtRnRaWE1vSjJsdWJHbHVaUzFwWTI5dUp5d2dZMnhoYzNOT1lXMWxLWDFjYmlBZ0lDQWdJQ0FnYUdWcFoyaDBQU2N4TmlkY2JpQWdJQ0FnSUNBZ2IyNU5iM1Z6WlVWdWRHVnlQWHR2YmsxdmRYTmxSVzUwWlhKOVhHNGdJQ0FnSUNBZ0lHOXVUVzkxYzJWTVpXRjJaVDE3YjI1TmIzVnpaVXhsWVhabGZWeHVJQ0FnSUNBZ0lDQjJhV1YzUW05NFBTY3dJREFnTVRZZ01UWW5YRzRnSUNBZ0lDQWdJSGRwWkhSb1BTY3hOaWRjYmx4dUlDQWdJRDVjYmlBZ0lDQWdJQ0FnUEhCaGRHZ2dZMnhoYzNOT1lXMWxQU2RqYjJ4dmNqRXRabWxzYkNjZ1ptbHNiRDBuY21kaVlTZ3dMQ0F3TENBd0xDQXdMakUyS1NjZ1ptbHNiRkoxYkdVOUoyVjJaVzV2WkdRbklHUTlKMDA0SURFMVFUY2dOeUF3SURFZ01DQTRJREZoTnlBM0lEQWdNQ0F3SURBZ01UUjZiVEFnTVVFNElEZ2dNQ0F4SURFZ09DQXdZVGdnT0NBd0lEQWdNU0F3SURFMmVrMDRJRFpoTGpjMUxqYzFJREFnTVNBd0lEQXRNUzQxUVM0M05TNDNOU0F3SURBZ01DQTRJRFo2YlRBZ01XRXVOUzQxSURBZ01DQXdMUzQxTGpWMk5HRXVOUzQxSURBZ01TQXdJREVnTUhZdE5FRXVOUzQxSURBZ01DQXdJRGdnTjNvbklDOCtYRzRnSUNBZ1BDOXpkbWMrWEc0cE8xeHVYRzVKWTI5dVNXNW1iMDkxZEd4cGJtVXVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQWdJR05zWVhOelRtRnRaVG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFbGpiMjVKYm1adlQzVjBiR2x1WlR0Y2JpSXNJbWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdVbVZoWTNRZ0lDQWdJR1p5YjIwZ0ozSmxZV04wSnp0Y2JseHVMeThnVkU5RVR5QnlaVzF2ZG1VZ2RHaHBjeUJtYVd4bElHVnVkR2x5Wld4NUlIZG9aVzRnYVdOdmJpQmpiMjF3YjI1bGJuUWdhWE1nY21WaFpIa3VYRzVqYjI1emRDQkpZMjl1VVhWbGMzUnBiMjRnUFNBb2V5QmpiR0Z6YzA1aGJXVWdmU2tnUFQ0Z0tGeHVJQ0FnSUR4emRtY2dZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Y5SUhkcFpIUm9QU2N4TmljZ2FHVnBaMmgwUFNjeE5pY2dkbWxsZDBKdmVEMG5NQ0F3SURFMklERTJKejVjYmlBZ0lDQWdJQ0FnUEdjZ1ptbHNiRDBuSTBaR1JpY2dabWxzYkZKMWJHVTlKMlYyWlc1dlpHUW5QbHh1SUNBZ0lDQWdJQ0FnSUNBZ1BIQmhkR2dnWkQwblRUZ2dNVFpCT0NBNElEQWdNU0F4SURnZ01HRTRJRGdnTUNBd0lERWdNQ0F4Tm5wdE1DMHhRVGNnTnlBd0lERWdNQ0E0SURGaE55QTNJREFnTUNBd0lEQWdNVFI2SnlCbWFXeHNVblZzWlQwbmJtOXVlbVZ5YnljZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUR4d1lYUm9JR1E5SjAwM0xqTTVJRGt1TlRFNFl5NHdNRGN0TGpNM015NHdOVEl0TGpZMk9DNHhNelF0TGpnNE5TNHdPREl0TGpJeE5pNHlOUzB1TkRVMkxqVXdNeTB1TnpKc0xqWTBOaTB1TmpNMll5NHlOell0TGpJNU9DNDBNVFV0TGpZeE9DNDBNVFV0TGprMklEQXRMak16TFM0d09TMHVOVGc0TFM0eU56SXRMamMzTkMwdU1UZ3RMakU0TnkwdU5EUTBMUzR5T0MwdU56ZzVMUzR5T0MwdU16TTFJREF0TGpZd05TNHdPRFF0TGpnd09TNHlOVFJoTGpnME1pNDRORElnTUNBd0lEQXRMak13Tmk0Mk9ESklObU11TURBM0xTNDFNRGd1TVRrMkxTNDVNVGd1TlRjdE1TNHlNeTR6TnpNdExqTXhNeTQ0TlRrdExqUTJPU0F4TGpRMU55MHVORFk1TGpZeU1pQXdJREV1TVRBMkxqRTJJREV1TkRVekxqUTNPQzR6TkRjdU16RTRMalV5TGpjMU5TNDFNaUF4TGpNeElEQWdMalUxTFM0eU5qWWdNUzR3T1RFdExqYzVPU0F4TGpZeU5Xd3RMalV6T0M0MU1EaGpMUzR5TkM0eU5UVXRMak0yTGpZeUxTNHpOaUF4TGpBNU4yZ3RMamt4TW5wdExTNHdNemtnTVM0ME9USmhMalV1TlNBd0lEQWdNU0F1TVRNMkxTNHpOVFZqTGpBNUxTNHdPVFl1TWpJMExTNHhORFF1TkRBeUxTNHhORFF1TVRjNElEQWdMak14TWk0d05EZ3VOREEwTGpFME5HRXVORGt6TGpRNU15QXdJREFnTVNBdU1UTTVMak0xTlM0ME56Y3VORGMzSURBZ01DQXhMUzR4TXprdU16VXhZeTB1TURreUxqQTVNeTB1TWpJMkxqRXpPUzB1TkRBMExqRXpPUzB1TVRjNElEQXRMak14TWkwdU1EUTJMUzQwTURJdExqRXpPV0V1TkRneExqUTRNU0F3SURBZ01TMHVNVE0yTFM0ek5Yb25JQzgrWEc0Z0lDQWdJQ0FnSUR3dlp6NWNiaUFnSUNBOEwzTjJaejVjYmlrN1hHNWNia2xqYjI1UmRXVnpkR2x2Ymk1d2NtOXdWSGx3WlhNZ1BTQjdYRzRnSUNBZ1kyeGhjM05PWVcxbE9pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnU1dOdmJsRjFaWE4wYVc5dU8xeHVJaXdpYVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUJtY205dElDZHdjbTl3TFhSNWNHVnpKenRjYm1sdGNHOXlkQ0JTWldGamRDQWdJQ0FnWm5KdmJTQW5jbVZoWTNRbk8xeHVYRzR2THlCVVQwUlBJSEpsYlc5MlpTQjBhR2x6SUdacGJHVWdaVzUwYVhKbGJIa2dkMmhsYmlCcFkyOXVJR052YlhCdmJtVnVkQ0JwY3lCeVpXRmtlUzVjYm1OdmJuTjBJRWxqYjI1U1pXUkViM1FnUFNBb2V5QmpiR0Z6YzA1aGJXVWdmU2tnUFQ0Z0tGeHVJQ0FnSUR4emRtY2dZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Y5SUhkcFpIUm9QU2MwSnlCb1pXbG5hSFE5SnpRblBseHVJQ0FnSUNBZ0lDQThZMmx5WTJ4bElHTjRQU2N4TVRZekp5QmplVDBuTmpJMkp5QnlQU2N5SnlCMGNtRnVjMlp2Y20wOUozUnlZVzV6YkdGMFpTZ3RNVEUyTVNBdE5qSTBLU2NnWm1sc2JEMG5JMFV6TVVNMFFpY2dabWxzYkZKMWJHVTlKMjV2Ym5wbGNtOG5JQzgrWEc0Z0lDQWdQQzl6ZG1jK1hHNHBPMXh1WEc1SlkyOXVVbVZrUkc5MExuQnliM0JVZVhCbGN5QTlJSHRjYmlBZ0lDQmpiR0Z6YzA1aGJXVTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzU5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCSlkyOXVVbVZrUkc5ME8xeHVJaXdpYVcxd2IzSjBJR05zWVhOelRtRnRaWE1nSUNBZ0lDQm1jbTl0SUNkamJHRnpjMjVoYldWekp6dGNibWx0Y0c5eWRDQlFjbTl3Vkhsd1pYTWdJQ0FnSUNBZ1puSnZiU0FuY0hKdmNDMTBlWEJsY3ljN1hHNXBiWEJ2Y25RZ1VtVmhZM1FnSUNBZ0lDQWdJQ0FnSUdaeWIyMGdKM0psWVdOMEp6dGNibWx0Y0c5eWRDQlFiM0J2ZG1WeVFuVmlZbXhsSUNBZ1puSnZiU0FuTGk5d2IzQnZkbVZ5TFdKMVltSnNaUzVxYzNnbk8xeHVhVzF3YjNKMElFbGpiMjVKYm1adlQzVjBiR2x1WlNCbWNtOXRJQ2N1TGk5cFkyOXVMV2x1Wm04dGIzVjBiR2x1WlM1cWMzZ25PMXh1YVcxd2IzSjBJRWxqYjI1UmRXVnpkR2x2YmlBZ0lDQm1jbTl0SUNjdUxpOXBZMjl1TFhGMVpYTjBhVzl1TG1wemVDYzdYRzVwYlhCdmNuUWdTV052YmxKbFpFUnZkQ0FnSUNBZ0lHWnliMjBnSnk0dUwybGpiMjR0Y21Wa0xXUnZkQzVxYzNnbk8xeHVYRzVqYkdGemN5QlFiM0J2ZG1WeUlHVjRkR1Z1WkhNZ1VtVmhZM1F1VUhWeVpVTnZiWEJ2Ym1WdWRDQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSWdLSEJ5YjNCektTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtIQnliM0J6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdGMFpTQWdJQ0FnSUNBZ0lDQWdJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhWE5mYjNCbGJpQWdJQ0FnSUNBZ0lEb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUmZjbVZqZEdGdVoyeGxPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUmhjbWRsZEY5eVpXWmxjbVZ1WTJVZ1BTQlNaV0ZqZEM1amNtVmhkR1ZTWldZb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyMXdiMjVsYm5SRWFXUk5iM1Z1ZENBb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhOZmIzQmxiaUFnSUNBZ0lDQWdJRG9nZEdocGN5NXdjbTl3Y3k1b1lYTmZaWEp5YjNJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUmZjbVZqZEdGdVoyeGxPaUIwYUdsekxuUmhjbWRsZEY5eVpXWmxjbVZ1WTJVdVkzVnljbVZ1ZEM1blpYUkNiM1Z1WkdsdVowTnNhV1Z1ZEZKbFkzUW9LU3hjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEc5bloyeGxUM0JsYmlBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSVGRHRjBaU2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMTl2Y0dWdUlDQWdJQ0FnSUNBZ09pQkNiMjlzWldGdUtIUm9hWE11Y0hKdmNITXViV1Z6YzJGblpTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFJmY21WamRHRnVaMnhsT2lCMGFHbHpMblJoY21kbGRGOXlaV1psY21WdVkyVXVZM1Z5Y21WdWRDNW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1N4Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lIUnZaMmRzWlVOc2IzTmxJRDBnS0NrZ1BUNGdkR2hwY3k1elpYUlRkR0YwWlNoN0lHbHpYMjl3Wlc0NklHWmhiSE5sSUgwcE8xeHVYRzRnSUNBZ2NtVnVaR1Z5SUNncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVd4cFoyNXRaVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhwYkdSeVpXNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldWQ2RXSmliR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVlVZWEpuWlhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1ZVWVhKblpYUkpZMjl1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR2x6WVdKc1pWOTBZWEpuWlhSZmFXTnZiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnBjMkZpYkdWZmJXVnpjMkZuWlY5cFkyOXVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FHRnpYMlZ5Y205eUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdOdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYldGeVoybHVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlN4Y2JpQWdJQ0FnSUNBZ2ZTQTlJSFJvYVhNdWNISnZjSE03WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYVdOdmJsOWpiR0Z6YzE5dVlXMWxJRDBnWTJ4aGMzTk9ZVzFsY3loamJHRnpjMDVoYldWVVlYSm5aWFJKWTI5dUxDQnBZMjl1S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOUoyUmpMWEJ2Y0c5MlpYSW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1E5ZTJsa2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVUVzkxYzJWRmJuUmxjajE3ZEdocGN5NTBiMmRuYkdWUGNHVnVmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1VFc5MWMyVk1aV0YyWlQxN2RHaHBjeTUwYjJkbmJHVkRiRzl6WlgxY2JpQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4WkdsMklHTnNZWE56VG1GdFpUMTdZMnhoYzNOT1lXMWxjeWhqYkdGemMwNWhiV1ZVWVhKblpYUXNJQ2RrWXkxd2IzQnZkbVZ5WDE5MFlYSm5aWFFuS1gwZ2NtVm1QWHQwYUdsekxuUmhjbWRsZEY5eVpXWmxjbVZ1WTJWOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3SVdScGMyRmliR1ZmZEdGeVoyVjBYMmxqYjI0Z0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEdrZ1kyeGhjM05PWVcxbFBYdHRaWE56WVdkbElEOGdKMlJqTFhCdmNHOTJaWEpmWDNSaGNtZGxkRjlmYVdOdmJpY2dPaUFuWkdNdGNHOXdiM1psY2w5ZmRHRnlaMlYwWDE5cFkyOXVMUzFrYVhOaFlteGxaQ2Q5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlocFkyOXVJRDA5UFNBbmFXNW1ieWNwSUNZbUlEeEpZMjl1U1c1bWIwOTFkR3hwYm1VZ1kyeGhjM05PWVcxbFBYdHBZMjl1WDJOc1lYTnpYMjVoYldWOUlDOCtmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdleWhwWTI5dUlEMDlQU0FuY1hWbGMzUnBiMjRuS1NBbUppQThTV052YmxGMVpYTjBhVzl1SUdOc1lYTnpUbUZ0WlQxN2FXTnZibDlqYkdGemMxOXVZVzFsZlNBdlBuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc29hV052YmlBOVBUMGdKMlJ2ZENjcElDWW1JRHhKWTI5dVVtVmtSRzkwSUdOc1lYTnpUbUZ0WlQxN2FXTnZibDlqYkdGemMxOXVZVzFsZlNBdlBuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5cFBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMk5vYVd4a2NtVnVmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2WkdsMlBseHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQRkJ2Y0c5MlpYSkNkV0ppYkdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV3hwWjI1dFpXNTBQWHRoYkdsbmJtMWxiblI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdZMnhoYzNOT1lXMWxRblZpWW14bGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVhOZlpYSnliM0k5ZTJoaGMxOWxjbkp2Y24xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV052YmoxN0lXUnBjMkZpYkdWZmJXVnpjMkZuWlY5cFkyOXVJQ1ltSUdsamIyNTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsa1BYdGdKSHRwWkgxZlluVmlZbXhsWUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5mYjNCbGJqMTdkR2hwY3k1emRHRjBaUzVwYzE5dmNHVnVmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFJmY21WamRHRnVaMnhsUFh0MGFHbHpMbk4wWVhSbExuUmhjbWRsZEY5eVpXTjBZVzVuYkdWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoY21kcGJqMTdiV0Z5WjJsdWZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxQWHR0WlhOellXZGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IzSjBZV3hmWTI5dWRHRnBibVZ5UFh0MGFHbHpMbkJ5YjNCekxuQnZjblJoYkY5amIyNTBZV2x1WlhKOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x6NWNiaUFnSUNBZ0lDQWdJQ0FnSUR3dlpHbDJQbHh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYm4xY2JseHVVRzl3YjNabGNpNWtaV1poZFd4MFVISnZjSE1nUFNCN1hHNGdJQ0FnY0c5eWRHRnNYMk52Ym5SaGFXNWxjam9nSjJSbGNtbDJYMkZ3Y0Njc1hHNTlPMXh1WEc1UWIzQnZkbVZ5TG5CeWIzQlVlWEJsY3lBOUlIdGNiaUFnSUNCaGJHbG5ibTFsYm5RZ0lDQWdJQ0FnSUNBZ09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUdOb2FXeGtjbVZ1SUNBZ0lDQWdJQ0FnSUNBNklGQnliM0JVZVhCbGN5NXViMlJsTEZ4dUlDQWdJR05zWVhOelRtRnRaVUoxWW1Kc1pTQWdJQ0E2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdZMnhoYzNOT1lXMWxWR0Z5WjJWMElDQWdJRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQmpiR0Z6YzA1aGJXVlVZWEpuWlhSSlkyOXVPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHUnBjMkZpYkdWZmRHRnlaMlYwWDJsamIyNDZJRkJ5YjNCVWVYQmxjeTVpYjI5c0xGeHVJQ0FnSUdoaGMxOWxjbkp2Y2lBZ0lDQWdJQ0FnSUNBNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJR2xqYjI0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdhV1FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQnRZWEpuYVc0Z0lDQWdJQ0FnSUNBZ0lDQWdPaUJRY205d1ZIbHdaWE11Ym5WdFltVnlMRnh1SUNBZ0lHMWxjM05oWjJVZ0lDQWdJQ0FnSUNBZ0lDQTZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ2NHOXlkR0ZzWDJOdmJuUmhhVzVsY2lBZ0lEb2dVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZCdmNHOTJaWEk3WEc0aUxDSnBiWEJ2Y25RZ0p5NHZjRzl3YjNabGNpNXpZM056Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puSnZiU0FuTGk5d2IzQnZkbVZ5TG1wemVDYzdYRzVjYmlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJUa0U3UVVGRFFUdEJRVmRCTzBGQlEwRTdRVUZFUVR0QlFVbEJPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNCQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJFRTdRVUZHUVR0QlFVMUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSRUU3UVVGR1FUdEJRVkJCTzBGQlEwRTdRVUZqUVRzN096czdPenM3T3pzN096czdPenM3TzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRklRVHRCUVVOQk8wRkJTVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVaEJPMEZCUTBFN1FVRkpRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlNFRTdRVUZEUVR0QlFVbEJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGSVFUdEJRVU5CTzBGQlNVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkdRVHRCUVhKQ1FUdEJRVEJDUVR0QlFVTkJPenM3T3pzN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJZVUU3UVVGRlFUdEJRVWRCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlIwRTdRVUZCUVR0QlFVVkJPMEZCVWtFN1FVRlhRVHRCUVVGQk8wRkJTMEU3UVVGQlFUdEJRVWRCTzBGQlFVRTdRVUZQUVR0QlFVbEJPenM3TzBGQmFrWkJPMEZCUTBFN1FVRnRSa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVlpCTzBGQllVRTdPMEZEZGtoQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVNUJPMEZCVTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVlpCTzBGQlEwRTdRVUZoUVR0QlFVTkJPMEZCUkVFN1FVRkpRVHM3UVVOMlFrRTdRVUZEUVR0QlFVTkJPMEZCUlVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZLUVR0QlFVTkJPMEZCVVVFN1FVRkRRVHRCUVVSQk8wRkJTVUU3TzBGRGFrSkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZHUVR0QlFVTkJPMEZCUzBFN1FVRkRRVHRCUVVSQk8wRkJTVUU3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFpFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096dEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVUkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJSa0U3UVVGcFFrRTdRVUZEUVR0QlFVTkJPMEZCUmtFN1FVRkpRVHRCUVVOQk8wRkJkRUpCTzBGQmRVSkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGMFFrRTdRVUZEUVR0QlFVTkJPMEZCUmtFN1FVRkpRVHRCUVU1Qk8wRkJUMEU3UVVGRFFUczdPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGR1FUdEJRVWxCT3pzN1FVRlhRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlowSkJPMEZCUTBFN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVXBCTzBGQlRVRTdRVUZCUVR0QlFVRkJPMEZCUlVFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVUZCTzBGQlEwRTdRVUZCUVR0QlFWRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCVmtFN1FVRmpRVHM3T3p0QlFUVkZRVHRCUVVOQk8wRkJPRVZCTzBGQlEwRTdRVUZFUVR0QlFVbEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJXa0U3UVVGbFFUczdRVU14UjBFN1FVRkJRVHRCUVVWQk95SXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMTFcXG4nKX0sLGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoXCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cXG4gICAgaWYoZmFsc2UpIHsgdmFyIGNzc1JlbG9hZDsgfVxcbiAgLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTVRNdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5a1pYSnBkaTFqYjIxd2IyNWxiblF1VzI1aGJXVmRMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZjRzl3YjNabGNpOXdiM0J2ZG1WeUxuTmpjM00vWldWa05TSmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCbGVIUnlZV04wWldRZ1lua2diV2x1YVMxamMzTXRaWGgwY21GamRDMXdiSFZuYVc1Y2JpQWdJQ0JwWmlodGIyUjFiR1V1YUc5MEtTQjdYRzRnSUNBZ0lDQXZMeUF4TlRZNU16RXdNamMyT1RNM1hHNGdJQ0FnSUNCMllYSWdZM056VW1Wc2IyRmtJRDBnY21WeGRXbHlaU2hjSWlFdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZZM056TFdodmRDMXNiMkZrWlhJdmFHOTBUVzlrZFd4bFVtVndiR0ZqWlcxbGJuUXVhbk5jSWlrb2JXOWtkV3hsTG1sa0xDQjdYQ0ptYVd4bFRXRndYQ0k2WENKN1ptbHNaVTVoYldWOVhDSjlLVHRjYmlBZ0lDQWdJRzF2WkhWc1pTNW9iM1F1WkdsemNHOXpaU2hqYzNOU1pXeHZZV1FwTzF4dUlDQWdJQ0FnYlc5a2RXeGxMbWh2ZEM1aFkyTmxjSFFvZFc1a1pXWnBibVZrTENCamMzTlNaV3h2WVdRcE96dGNiaUFnSUNCOVhHNGdJQ0pkTENKdFlYQndhVzVuY3lJNklrRkJRVUU3UVVGRFFTeG5RMEZMUVR0QlFVTkJJaXdpYzI5MWNtTmxVbTl2ZENJNklpSjlcXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMTNcXG5cIil9LCwsLCwsLCwsZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7ZXZhbChcIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxcbiAgICBpZihmYWxzZSkgeyB2YXIgY3NzUmVsb2FkOyB9XFxuICAvLyMgc291cmNlVVJMPVttb2R1bGVdXFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lNakl1YW5NaUxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTlrWlhKcGRpMWpiMjF3YjI1bGJuUXVXMjVoYldWZEx5NHZjM0pqTDJOdmJYQnZibVZ1ZEhNdlpISnZjR1J2ZDI0dlpISnZjR1J2ZDI0dWMyTnpjejh3WmpVd0lsMHNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaTh2SUdWNGRISmhZM1JsWkNCaWVTQnRhVzVwTFdOemN5MWxlSFJ5WVdOMExYQnNkV2RwYmx4dUlDQWdJR2xtS0cxdlpIVnNaUzVvYjNRcElIdGNiaUFnSUNBZ0lDOHZJREUxTmprek1UQXlOelkyTXpoY2JpQWdJQ0FnSUhaaGNpQmpjM05TWld4dllXUWdQU0J5WlhGMWFYSmxLRndpSVM0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpjM010YUc5MExXeHZZV1JsY2k5b2IzUk5iMlIxYkdWU1pYQnNZV05sYldWdWRDNXFjMXdpS1NodGIyUjFiR1V1YVdRc0lIdGNJbVpwYkdWTllYQmNJanBjSW50bWFXeGxUbUZ0WlgxY0luMHBPMXh1SUNBZ0lDQWdiVzlrZFd4bExtaHZkQzVrYVhOd2IzTmxLR056YzFKbGJHOWhaQ2s3WEc0Z0lDQWdJQ0J0YjJSMWJHVXVhRzkwTG1GalkyVndkQ2gxYm1SbFptbHVaV1FzSUdOemMxSmxiRzloWkNrN08xeHVJQ0FnSUgxY2JpQWdJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQkxHZERRVXRCTzBGQlEwRWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMjJcXG5cIil9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe2V2YWwoXCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cXG4gICAgaWYoZmFsc2UpIHsgdmFyIGNzc1JlbG9hZDsgfVxcbiAgLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTWpNdWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5a1pYSnBkaTFqYjIxd2IyNWxiblF1VzI1aGJXVmRMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZaSEp2Y0dSdmQyNHZiR2x6ZEM1elkzTnpQMlpoWmpZaVhTd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeThnWlhoMGNtRmpkR1ZrSUdKNUlHMXBibWt0WTNOekxXVjRkSEpoWTNRdGNHeDFaMmx1WEc0Z0lDQWdhV1lvYlc5a2RXeGxMbWh2ZENrZ2UxeHVJQ0FnSUNBZ0x5OGdNVFUyT1RNeE1ESTNOamMyTTF4dUlDQWdJQ0FnZG1GeUlHTnpjMUpsYkc5aFpDQTlJSEpsY1hWcGNtVW9YQ0loTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwyTnpjeTFvYjNRdGJHOWhaR1Z5TDJodmRFMXZaSFZzWlZKbGNHeGhZMlZ0Wlc1MExtcHpYQ0lwS0cxdlpIVnNaUzVwWkN3Z2Uxd2labWxzWlUxaGNGd2lPbHdpZTJacGJHVk9ZVzFsZlZ3aWZTazdYRzRnSUNBZ0lDQnRiMlIxYkdVdWFHOTBMbVJwYzNCdmMyVW9ZM056VW1Wc2IyRmtLVHRjYmlBZ0lDQWdJRzF2WkhWc1pTNW9iM1F1WVdOalpYQjBLSFZ1WkdWbWFXNWxaQ3dnWTNOelVtVnNiMkZrS1RzN1hHNGdJQ0FnZlZ4dUlDQWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFc1owTkJTMEU3UVVGRFFTSXNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMjNcXG5cIil9LCwsLCxmdW5jdGlvbihtb2R1bGUsX193ZWJwYWNrX2V4cG9ydHNfXyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtldmFsKCdfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL2Ryb3Bkb3duL2Ryb3Bkb3duLnNjc3NcXG52YXIgZHJvcGRvd24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vbGlzdC5zY3NzXFxudmFyIGRyb3Bkb3duX2xpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTtcXG5cXG4vLyBFWFRFUk5BTCBNT0RVTEU6IGV4dGVybmFsIFwiY2xhc3NuYW1lc1wiXFxudmFyIGV4dGVybmFsX2NsYXNzbmFtZXNfID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcXG52YXIgZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihleHRlcm5hbF9jbGFzc25hbWVzXyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInByb3AtdHlwZXNcIlxcbnZhciBleHRlcm5hbF9wcm9wX3R5cGVzXyA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XFxudmFyIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oZXh0ZXJuYWxfcHJvcF90eXBlc18pO1xcblxcbi8vIEVYVEVSTkFMIE1PRFVMRTogZXh0ZXJuYWwgXCJyZWFjdFwiXFxudmFyIGV4dGVybmFsX3JlYWN0XyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XFxudmFyIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGV4dGVybmFsX3JlYWN0Xyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInJlYWN0LXRyYW5zaXRpb24tZ3JvdXBcIlxcbnZhciBleHRlcm5hbF9yZWFjdF90cmFuc2l0aW9uX2dyb3VwXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XFxuXFxuLy8gRVhURVJOQUwgTU9EVUxFOiBleHRlcm5hbCBcInR0LXJlYWN0LWN1c3RvbS1zY3JvbGxiYXJzXCJcXG52YXIgZXh0ZXJuYWxfdHRfcmVhY3RfY3VzdG9tX3Njcm9sbGJhcnNfID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XFxuXFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9pY29uLWFycm93LmpzeFxcblxcblxcbiAvLyBUT0RPIHJlbW92ZSB0aGlzIGZpbGUgZW50aXJlbHkgd2hlbiBpY29uIGNvbXBvbmVudCBpcyByZWFkeS5cXG5cXG52YXIgaWNvbl9hcnJvd19JY29uQXJyb3cgPSBmdW5jdGlvbiBJY29uQXJyb3coX3JlZikge1xcbiAgdmFyIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxcbiAgICAgIGNsYXNzTmFtZVBhdGggPSBfcmVmLmNsYXNzTmFtZVBhdGg7XFxuICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwge1xcbiAgICBjbGFzc05hbWU6IGV4dGVybmFsX2NsYXNzbmFtZXNfZGVmYXVsdCgpKFxcJ2lubGluZS1pY29uXFwnLCBjbGFzc05hbWUpLFxcbiAgICB3aWR0aDogXCIxNlwiLFxcbiAgICBoZWlnaHQ6IFwiMTZcIlxcbiAgfSwgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShjbGFzc05hbWVQYXRoLCBcXCdjb2xvcjEtZmlsbFxcJyksXFxuICAgIGZpbGw6IFwicmdiYSgwLCAwLCAwLCAwLjgpXCIsXFxuICAgIGZpbGxSdWxlOiBcIm5vbnplcm9cIixcXG4gICAgZDogXCJNMTMuMTY0IDUuMTNhLjUuNSAwIDEgMSAuNjcyLjc0bC01LjUgNWEuNS41IDAgMCAxLS42NzIgMGwtNS41LTVhLjUuNSAwIDAgMSAuNjcyLS43NEw4IDkuODI0bDUuMTY0LTQuNjk0elwiXFxuICB9KSk7XFxufTtcXG5cXG5pY29uX2Fycm93X0ljb25BcnJvdy5wcm9wVHlwZXMgPSB7XFxuICBjbGFzc05hbWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGNsYXNzTmFtZVBhdGg6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZ1xcbn07XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgaWNvbl9hcnJvdyA9IChpY29uX2Fycm93X0ljb25BcnJvdyk7XFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9kcm9wZG93bi9kcm9wZG93bi5qc1xcblxcbnZhciBnZXREaXNwbGF5VGV4dCA9IGZ1bmN0aW9uIGdldERpc3BsYXlUZXh0KGxpc3QsIHZhbHVlKSB7XFxuICB2YXIgZmluZEluQXJyYXkgPSBmdW5jdGlvbiBmaW5kSW5BcnJheShhcnJfbGlzdCkge1xcbiAgICByZXR1cm4gKGFycl9saXN0LmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHtcXG4gICAgICByZXR1cm4gaXRlbS52YWx1ZSA9PT0gdmFsdWU7XFxuICAgIH0pIHx8IHt9KS50ZXh0O1xcbiAgfTtcXG5cXG4gIHZhciB0ZXh0ID0gXFwnXFwnO1xcblxcbiAgaWYgKEFycmF5LmlzQXJyYXkobGlzdCkpIHtcXG4gICAgdGV4dCA9IGZpbmRJbkFycmF5KGxpc3QpO1xcbiAgfSBlbHNlIHtcXG4gICAgT2JqZWN0LmtleXMobGlzdCkuc29tZShmdW5jdGlvbiAoa2V5KSB7XFxuICAgICAgdGV4dCA9IGZpbmRJbkFycmF5KGxpc3Rba2V5XSk7XFxuICAgICAgcmV0dXJuIHRleHQ7XFxuICAgIH0pO1xcbiAgfVxcblxcbiAgcmV0dXJuIHRleHQ7XFxufTtcXG52YXIgZ2V0SXRlbUZyb21WYWx1ZSA9IGZ1bmN0aW9uIGdldEl0ZW1Gcm9tVmFsdWUobGlzdCwgdmFsdWUpIHtcXG4gIHZhciBmaW5kSW5BcnJheSA9IGZ1bmN0aW9uIGZpbmRJbkFycmF5KGFycl9saXN0KSB7XFxuICAgIHJldHVybiBhcnJfbGlzdC5maW5kSW5kZXgoZnVuY3Rpb24gKGl0ZW0pIHtcXG4gICAgICByZXR1cm4gaXRlbS52YWx1ZSA9PT0gdmFsdWU7XFxuICAgIH0pO1xcbiAgfTtcXG5cXG4gIHZhciBpdGVtID0ge307XFxuXFxuICBpZiAoQXJyYXkuaXNBcnJheShsaXN0KSkge1xcbiAgICBpdGVtID0ge1xcbiAgICAgIG51bWJlcjogZmluZEluQXJyYXkobGlzdCksXFxuICAgICAgbGVuZ3RoOiBsaXN0Lmxlbmd0aFxcbiAgICB9O1xcbiAgfSBlbHNlIHtcXG4gICAgT2JqZWN0LmtleXMobGlzdCkuc29tZShmdW5jdGlvbiAoa2V5KSB7XFxuICAgICAgaXRlbSA9IHtcXG4gICAgICAgIG51bWJlcjogZmluZEluQXJyYXkobGlzdFtrZXldKSxcXG4gICAgICAgIGxlbmd0aDogbGlzdFtrZXldLmxlbmd0aFxcbiAgICAgIH07XFxuICAgICAgcmV0dXJuIGl0ZW07XFxuICAgIH0pO1xcbiAgfVxcblxcbiAgcmV0dXJuIGl0ZW07XFxufTtcXG52YXIgZ2V0VmFsdWVGcm9tSW5kZXggPSBmdW5jdGlvbiBnZXRWYWx1ZUZyb21JbmRleChsaXN0LCBpbmRleCkge1xcbiAgdmFyIGZpbmRJbkFycmF5ID0gZnVuY3Rpb24gZmluZEluQXJyYXkoYXJyX2xpc3QpIHtcXG4gICAgcmV0dXJuIGFycl9saXN0W2luZGV4XTtcXG4gIH07XFxuXFxuICB2YXIgcmVzdWx0O1xcblxcbiAgaWYgKEFycmF5LmlzQXJyYXkobGlzdCkpIHtcXG4gICAgcmVzdWx0ID0gZmluZEluQXJyYXkobGlzdCk7XFxuICB9IGVsc2Uge1xcbiAgICBPYmplY3Qua2V5cyhsaXN0KS5zb21lKGZ1bmN0aW9uIChrZXkpIHtcXG4gICAgICByZXN1bHQgPSBmaW5kSW5BcnJheShsaXN0W2tleV0pO1xcbiAgICAgIHJldHVybiByZXN1bHQudmFsdWU7XFxuICAgIH0pO1xcbiAgfVxcblxcbiAgcmV0dXJuIHJlc3VsdC52YWx1ZTtcXG59O1xcbnZhciBnZXRQcmV2SW5kZXggPSBmdW5jdGlvbiBnZXRQcmV2SW5kZXgoaW5kZXgsIGxlbmd0aCkge1xcbiAgdmFyIHByZXZfaW5kZXggPSBpbmRleCAtIDEgPCAwID8gbGVuZ3RoIC0gMSA6IGluZGV4IC0gMTtcXG4gIHJldHVybiBwcmV2X2luZGV4O1xcbn07XFxudmFyIGdldE5leHRJbmRleCA9IGZ1bmN0aW9uIGdldE5leHRJbmRleChpbmRleCwgbGVuZ3RoKSB7XFxuICB2YXIgbmV4dF9pbmRleCA9IGluZGV4ICsgMSA9PT0gbGVuZ3RoID8gMCA6IGluZGV4ICsgMTtcXG4gIHJldHVybiBuZXh0X2luZGV4O1xcbn07XFxudmFyIGRyb3Bkb3duX2xpc3RQcm9wVHlwZSA9IGZ1bmN0aW9uIGxpc3RQcm9wVHlwZSgpIHtcXG4gIHJldHVybiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmFycmF5T2YoZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc2hhcGUoe1xcbiAgICBkaXNhYmxlZDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuYm9vbCxcXG4gICAgaGFzX3Rvb2x0aXA6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICAgIHRleHQ6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gICAgdG9vbHRpcDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgICB2YWx1ZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2ZUeXBlKFtleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm51bWJlcl0pXFxuICB9KSksIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9iamVjdF0pO1xcbn07XFxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9jb21wb25lbnRzL3BvcG92ZXIvaW5kZXguanMgKyA2IG1vZHVsZXNcXG52YXIgcG9wb3ZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xcblxcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vaXRlbXMuanN4XFxuXFxuXFxuXFxuXFxuXFxudmFyIGl0ZW1zX0l0ZW1zID0gZnVuY3Rpb24gSXRlbXMoX3JlZikge1xcbiAgdmFyIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxcbiAgICAgIGluZGV4ID0gX3JlZi5pbmRleCxcXG4gICAgICBoYW5kbGVTZWxlY3QgPSBfcmVmLmhhbmRsZVNlbGVjdCxcXG4gICAgICBoYXNfc3ltYm9sID0gX3JlZi5oYXNfc3ltYm9sLFxcbiAgICAgIGl0ZW1zID0gX3JlZi5pdGVtcyxcXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxcbiAgICAgIGlzX2FsaWduX3RleHRfbGVmdCA9IF9yZWYuaXNfYWxpZ25fdGV4dF9sZWZ0LFxcbiAgICAgIHZhbHVlID0gX3JlZi52YWx1ZTtcXG4gIHJldHVybiBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0sIGlkeCkge1xcbiAgICB2YXIgc3ltYm9sX3R5cGVfY2xhc3NfbmFtZSA9IGl0ZW0udGV4dCAmJiB0eXBlb2YgaXRlbS50ZXh0ID09PSBcXCdzdHJpbmdcXCcgPyBcInN5bWJvbHMtLVwiLmNvbmNhdChpdGVtLnRleHQudG9Mb3dlckNhc2UoKSkgOiBudWxsO1xcbiAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xcbiAgICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoXFwnZGMtbGlzdF9faXRlbVxcJywge1xcbiAgICAgICAgXFwnZGMtbGlzdF9faXRlbS0taGlnaGxpZ2h0ZWRcXCc6IGlkeCA9PT0gaW5kZXhcXG4gICAgICB9LCB7XFxuICAgICAgICBcXCdkYy1saXN0X19pdGVtLS1zZWxlY3RlZFxcJzogdmFsdWUgPT09IGl0ZW0udmFsdWVcXG4gICAgICB9LCB7XFxuICAgICAgICBcXCdkYy1saXN0X19pdGVtLS1kaXNhYmxlZFxcJzogaXRlbS5kaXNhYmxlZFxcbiAgICAgIH0pLFxcbiAgICAgIG5hbWU6IG5hbWUsXFxuICAgICAgdmFsdWU6IGl0ZW0udmFsdWUsXFxuICAgICAgb25DbGljazogaXRlbS5kaXNhYmxlZCA/IG51bGwgOiBoYW5kbGVTZWxlY3QuYmluZChudWxsLCBpdGVtKSxcXG4gICAgICBrZXk6IGlkeFxcbiAgICB9LCAhIWhhc19zeW1ib2wgJiYgaXRlbS5oYXNfdG9vbHRpcCAmJiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChwb3BvdmVyW1wiZGVmYXVsdFwiXSwge1xcbiAgICAgIGFsaWdubWVudDogXCJsZWZ0XCIsXFxuICAgICAgbWVzc2FnZTogaXRlbS50ZXh0XFxuICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XFxuICAgICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdzeW1ib2xzXFwnLCBcXCdkYy1saXN0X19pdGVtLXN5bWJvbFxcJywgc3ltYm9sX3R5cGVfY2xhc3NfbmFtZSlcXG4gICAgfSkpLCAhIWhhc19zeW1ib2wgJiYgIWl0ZW0uaGFzX3Rvb2x0aXAgJiYgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcXG4gICAgICBjbGFzc05hbWU6IGV4dGVybmFsX2NsYXNzbmFtZXNfZGVmYXVsdCgpKFxcJ3N5bWJvbHNcXCcsIFxcJ2RjLWxpc3RfX2l0ZW0tdGV4dFxcJywgc3ltYm9sX3R5cGVfY2xhc3NfbmFtZSlcXG4gICAgfSksICFoYXNfc3ltYm9sICYmIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XFxuICAgICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1saXN0X19pdGVtLXRleHRcXCcsIHtcXG4gICAgICAgIFxcJ2RjLWxpc3RfX2l0ZW0tdGV4dC0tbGVmdFxcJzogaXNfYWxpZ25fdGV4dF9sZWZ0XFxuICAgICAgfSwgY2xhc3NOYW1lKVxcbiAgICB9LCBpdGVtLnRleHQpKTtcXG4gIH0pO1xcbn07XFxuXFxuaXRlbXNfSXRlbXMucHJvcFR5cGVzID0ge1xcbiAgY2xhc3NOYW1lOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBoYW5kbGVTZWxlY3Q6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmZ1bmMsXFxuICBoYXNfc3ltYm9sOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sLFxcbiAgbmFtZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgdmFsdWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9uZU9mVHlwZShbZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubnVtYmVyLCBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmddKVxcbn07XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZHJvcGRvd25faXRlbXMgPSAoaXRlbXNfSXRlbXMpO1xcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vbmF0aXZlLXNlbGVjdC5qc3hcXG5cXG5cXG5cXG52YXIgbmF0aXZlX3NlbGVjdF9OYXRpdmVTZWxlY3QgPSBmdW5jdGlvbiBOYXRpdmVTZWxlY3QoX3JlZikge1xcbiAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXFxuICAgICAgbGlzdCA9IF9yZWYubGlzdCxcXG4gICAgICB2YWx1ZSA9IF9yZWYudmFsdWUsXFxuICAgICAgb25DaGFuZ2UgPSBfcmVmLm9uQ2hhbmdlO1xcbiAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgY2xhc3NOYW1lOiBcIm5hdGl2ZS1zZWxlY3QgbmF0aXZlLXNlbGVjdF9fd3JhcHBlclwiXFxuICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiLCB7XFxuICAgIGNsYXNzTmFtZTogXCJzZWxlY3QgbmF0aXZlLXNlbGVjdF9fc2VsZWN0XCIsXFxuICAgIG5hbWU6IG5hbWUsXFxuICAgIHZhbHVlOiB2YWx1ZSxcXG4gICAgb25DaGFuZ2U6IG9uQ2hhbmdlXFxuICB9LCBBcnJheS5pc0FycmF5KGxpc3QpID8gbGlzdC5tYXAoZnVuY3Rpb24gKGl0ZW0sIGlkeCkge1xcbiAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIiwge1xcbiAgICAgIGtleTogaWR4LFxcbiAgICAgIHZhbHVlOiBpdGVtLnZhbHVlXFxuICAgIH0sIGl0ZW0udGV4dCk7XFxuICB9KSA6IE9iamVjdC5rZXlzKGxpc3QpLm1hcChmdW5jdGlvbiAoa2V5KSB7XFxuICAgIHJldHVybiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuRnJhZ21lbnQsIHtcXG4gICAgICBrZXk6IGtleVxcbiAgICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcIm9wdGdyb3VwXCIsIHtcXG4gICAgICBsYWJlbDoga2V5XFxuICAgIH0sIGxpc3Rba2V5XS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGlkeCkge1xcbiAgICAgIHJldHVybiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiLCB7XFxuICAgICAgICBrZXk6IGlkeCxcXG4gICAgICAgIHZhbHVlOiBpdGVtLnZhbHVlXFxuICAgICAgfSwgaXRlbS50ZXh0KTtcXG4gICAgfSkpKTtcXG4gIH0pKSk7XFxufTtcXG5cXG5uYXRpdmVfc2VsZWN0X05hdGl2ZVNlbGVjdC5wcm9wVHlwZXMgPSB7XFxuICBsaXN0OiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9iamVjdCwgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuYXJyYXldKSxcXG4gIG5hbWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIG9uQ2hhbmdlOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5mdW5jLFxcbiAgdmFsdWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLm9uZU9mVHlwZShbZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubnVtYmVyLCBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmddKVxcbn07XFxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgbmF0aXZlX3NlbGVjdCA9IChuYXRpdmVfc2VsZWN0X05hdGl2ZVNlbGVjdCk7XFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9kcm9wZG93bi9kaXNwbGF5LXRleHQuanN4XFxuXFxuXFxuXFxuXFxuXFxudmFyIGRpc3BsYXlfdGV4dF9EaXNwbGF5VGV4dCA9IGZ1bmN0aW9uIERpc3BsYXlUZXh0KF9yZWYpIHtcXG4gIHZhciBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcXG4gICAgICBoYXNfc3ltYm9sID0gX3JlZi5oYXNfc3ltYm9sLFxcbiAgICAgIGxpc3QgPSBfcmVmLmxpc3QsXFxuICAgICAgaXNfYWxpZ25fdGV4dF9sZWZ0ID0gX3JlZi5pc19hbGlnbl90ZXh0X2xlZnQsXFxuICAgICAgcGxhY2Vob2xkZXIgPSBfcmVmLnBsYWNlaG9sZGVyLFxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXFxuICAgICAgdmFsdWUgPSBfcmVmLnZhbHVlO1xcbiAgdmFyIHN5bWJvbF92YWx1ZV9jbGFzcyA9IGhhc19zeW1ib2wgPyBcInN5bWJvbHMtLVwiLmNvbmNhdCh2YWx1ZS50b0xvd2VyQ2FzZSgpKSA6IG51bGw7XFxuICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLkZyYWdtZW50LCBudWxsLCBoYXNfc3ltYm9sID8gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdzeW1ib2xzIGRjLWRyb3Bkb3duX19kaXNwbGF5LXN5bWJvbFxcJywgc3ltYm9sX3ZhbHVlX2NsYXNzLCBjbGFzc05hbWUpLFxcbiAgICBuYW1lOiBuYW1lLFxcbiAgICB2YWx1ZTogdmFsdWVcXG4gIH0pIDogZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcXG4gICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1kcm9wZG93bl9fZGlzcGxheS10ZXh0XFwnLCBjbGFzc05hbWUpLFxcbiAgICBuYW1lOiBuYW1lLFxcbiAgICB2YWx1ZTogdmFsdWVcXG4gIH0sIGdldERpc3BsYXlUZXh0KGxpc3QsIHZhbHVlKSksIHBsYWNlaG9sZGVyICYmIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1kcm9wZG93bl9fZGlzcGxheS1wbGFjZWhvbGRlclxcJywge1xcbiAgICAgIFxcJ2RjLWRyb3Bkb3duX19kaXNwbGF5LXBsYWNlaG9sZGVyLS1pcy10aXRsZVxcJzogdmFsdWUsXFxuICAgICAgXFwnZGMtZHJvcGRvd25fX2Rpc3BsYXktcGxhY2Vob2xkZXItLWlzLWxlZnQtdGV4dFxcJzogaXNfYWxpZ25fdGV4dF9sZWZ0XFxuICAgIH0pXFxuICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xcbiAgICBjbGFzc05hbWU6IFwiZGMtZHJvcGRvd25fX2Rpc3BsYXktcGxhY2Vob2xkZXItdGV4dFwiXFxuICB9LCBwbGFjZWhvbGRlcikpKTtcXG59O1xcblxcbmRpc3BsYXlfdGV4dF9EaXNwbGF5VGV4dC5wcm9wVHlwZXMgPSB7XFxuICBjbGFzc05hbWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGhhc19zeW1ib2w6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBpc190aXRsZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuYm9vbCxcXG4gIGxpc3Q6IGRyb3Bkb3duX2xpc3RQcm9wVHlwZSgpLFxcbiAgbmFtZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgcGxhY2Vob2xkZXI6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIHZhbHVlOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5vbmVPZlR5cGUoW2V4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZywgZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEubnVtYmVyXSlcXG59O1xcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIGRpc3BsYXlfdGV4dCA9IChkaXNwbGF5X3RleHRfRGlzcGxheVRleHQpO1xcbi8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2NvbXBvbmVudHMvZHJvcGRvd24vZHJvcGRvd24uanN4XFxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cXG5cXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxcblxcbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XFxuXFxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxcblxcbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XFxuXFxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxcblxcbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzblxcJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzblxcJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cXG5cXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XFxuXFxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cXG5cXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcbnZhciBkcm9wZG93bl9Ecm9wZG93biA9XFxuLyojX19QVVJFX18qL1xcbmZ1bmN0aW9uIChfUmVhY3QkUHVyZUNvbXBvbmVudCkge1xcbiAgX2luaGVyaXRzKERyb3Bkb3duLCBfUmVhY3QkUHVyZUNvbXBvbmVudCk7XFxuXFxuICBmdW5jdGlvbiBEcm9wZG93bigpIHtcXG4gICAgdmFyIF9nZXRQcm90b3R5cGVPZjI7XFxuXFxuICAgIHZhciBfdGhpcztcXG5cXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERyb3Bkb3duKTtcXG5cXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XFxuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcXG4gICAgfVxcblxcbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfZ2V0UHJvdG90eXBlT2YyID0gX2dldFByb3RvdHlwZU9mKERyb3Bkb3duKSkuY2FsbC5hcHBseShfZ2V0UHJvdG90eXBlT2YyLCBbdGhpc10uY29uY2F0KGFyZ3MpKSk7XFxuICAgIF90aGlzLmxpc3RfcmVmID0gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZVJlZigpO1xcbiAgICBfdGhpcy5zdGF0ZSA9IHtcXG4gICAgICBjdXJyX2luZGV4OiBnZXRJdGVtRnJvbVZhbHVlKF90aGlzLnByb3BzLmxpc3QsIF90aGlzLnByb3BzLnZhbHVlKS5udW1iZXIsXFxuICAgICAgaXNfbGlzdF92aXNpYmxlOiBmYWxzZSxcXG4gICAgICBsaXN0X2hlaWdodDogMCxcXG4gICAgICBsaXN0X3dpZHRoOiAwXFxuICAgIH07XFxuXFxuICAgIF90aGlzLmhhbmRsZVNlbGVjdCA9IGZ1bmN0aW9uIChpdGVtKSB7XFxuICAgICAgaWYgKGl0ZW0udmFsdWUgIT09IF90aGlzLnByb3BzLnZhbHVlKSB7XFxuICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZSh7XFxuICAgICAgICAgIHRhcmdldDoge1xcbiAgICAgICAgICAgIG5hbWU6IF90aGlzLnByb3BzLm5hbWUsXFxuICAgICAgICAgICAgdmFsdWU6IGl0ZW0udmFsdWVcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgfVxcblxcbiAgICAgIF90aGlzLmhhbmRsZVZpc2liaWxpdHkoKTtcXG4gICAgfTtcXG5cXG4gICAgX3RoaXMuc2V0V3JhcHBlclJlZiA9IGZ1bmN0aW9uIChub2RlKSB7XFxuICAgICAgcmV0dXJuIF90aGlzLndyYXBwZXJfcmVmID0gbm9kZTtcXG4gICAgfTtcXG5cXG4gICAgX3RoaXMuaGFuZGxlQ2xpY2tPdXRzaWRlID0gZnVuY3Rpb24gKGV2ZW50KSB7XFxuICAgICAgaWYgKF90aGlzLndyYXBwZXJfcmVmICYmICFfdGhpcy53cmFwcGVyX3JlZi5jb250YWlucyhldmVudC50YXJnZXQpICYmIF90aGlzLnN0YXRlLmlzX2xpc3RfdmlzaWJsZSkge1xcbiAgICAgICAgaWYgKHR5cGVvZiBfdGhpcy5wcm9wcy5oYW5kbGVCbHVyID09PSBcXCdmdW5jdGlvblxcJykge1xcbiAgICAgICAgICBfdGhpcy5wcm9wcy5oYW5kbGVCbHVyKHtcXG4gICAgICAgICAgICB0YXJnZXQ6IHtcXG4gICAgICAgICAgICAgIG5hbWU6IF90aGlzLnByb3BzLm5hbWVcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xcbiAgICAgICAgICBpc19saXN0X3Zpc2libGU6IGZhbHNlXFxuICAgICAgICB9KTtcXG4gICAgICB9XFxuICAgIH07XFxuXFxuICAgIF90aGlzLmhhbmRsZVZpc2liaWxpdHkgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlKSB7XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICBpc19saXN0X3Zpc2libGU6ICFzdGF0ZS5pc19saXN0X3Zpc2libGVcXG4gICAgICAgIH07XFxuICAgICAgfSk7XFxuICAgIH07XFxuXFxuICAgIF90aGlzLmhhbmRsZVRvZ2dsZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xcbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5pc19saXN0X3Zpc2libGUgJiYgX3RoaXMucHJvcHMudmFsdWUgIT09IHZhbHVlKSB7XFxuICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZSh7XFxuICAgICAgICAgIHRhcmdldDoge1xcbiAgICAgICAgICAgIG5hbWU6IF90aGlzLnByb3BzLm5hbWUsXFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXFxuICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgIH1cXG5cXG4gICAgICBfdGhpcy5oYW5kbGVWaXNpYmlsaXR5KCk7XFxuICAgIH07XFxuXFxuICAgIF90aGlzLm9uS2V5UHJlc3NlZCA9IGZ1bmN0aW9uIChldmVudCkge1xcbiAgICAgIGlmIChfdGhpcy5pc19zaW5nbGVfb3B0aW9uKSByZXR1cm47XFxuXFxuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDkpIHtcXG4gICAgICAgIC8vIFRhYiBpcyBwcmVzc2VkXFxuICAgICAgICBpZiAoX3RoaXMuc3RhdGUuaXNfbGlzdF92aXNpYmxlKSB7XFxuICAgICAgICAgIF90aGlzLmhhbmRsZVZpc2liaWxpdHkoKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuXFxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcXG4gICAgICB2YXIgaW5kZXggPSBfdGhpcy5wcm9wcy52YWx1ZSA/IGdldEl0ZW1Gcm9tVmFsdWUoX3RoaXMucHJvcHMubGlzdCwgX3RoaXMucHJvcHMudmFsdWUpIDogMDtcXG4gICAgICB2YXIgdmFsdWUgPSBfdGhpcy5wcm9wcy52YWx1ZSA/IGdldFZhbHVlRnJvbUluZGV4KF90aGlzLnByb3BzLmxpc3QsIF90aGlzLnN0YXRlLmN1cnJfaW5kZXgpIDogbnVsbDtcXG5cXG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcXG4gICAgICAgIGNhc2UgMTM6IC8vIEVudGVyIGlzIHByZXNzZWRcXG5cXG4gICAgICAgIGNhc2UgMzI6XFxuICAgICAgICAgIC8vIFNwYWNlIGlzIHByZXNzZWRcXG4gICAgICAgICAgaWYgKHZhbHVlKSBfdGhpcy5oYW5kbGVUb2dnbGUodmFsdWUpO1xcbiAgICAgICAgICBicmVhaztcXG5cXG4gICAgICAgIGNhc2UgMzg6XFxuICAgICAgICAgIC8vIFVwIEFycm93IGlzIHByZXNzZWRcXG4gICAgICAgICAgaWYgKF90aGlzLnN0YXRlLmlzX2xpc3RfdmlzaWJsZSkge1xcbiAgICAgICAgICAgIHZhciBwcmV2X2luZGV4ID0gZ2V0UHJldkluZGV4KF90aGlzLnN0YXRlLmN1cnJfaW5kZXgsIGluZGV4Lmxlbmd0aCk7XFxuXFxuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xcbiAgICAgICAgICAgICAgY3Vycl9pbmRleDogcHJldl9pbmRleFxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGJyZWFrO1xcblxcbiAgICAgICAgY2FzZSA0MDpcXG4gICAgICAgICAgLy8gRG93biBBcnJvdyBpcyBwcmVzc2VkXFxuICAgICAgICAgIGlmIChfdGhpcy5zdGF0ZS5pc19saXN0X3Zpc2libGUpIHtcXG4gICAgICAgICAgICB2YXIgbmV4dF9pbmRleCA9IGdldE5leHRJbmRleChfdGhpcy5zdGF0ZS5jdXJyX2luZGV4LCBpbmRleC5sZW5ndGgpO1xcblxcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcXG4gICAgICAgICAgICAgIGN1cnJfaW5kZXg6IG5leHRfaW5kZXhcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgfSBlbHNlIGlmICghX3RoaXMucHJvcHMuaXNfYWxpZ25tZW50X2xlZnQpIHtcXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVWaXNpYmlsaXR5KCk7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgYnJlYWs7XFxuXFxuICAgICAgICBjYXNlIDM3OlxcbiAgICAgICAgICAvLyBMZWZ0IGFycm93IGlzIHByZXNzZWRcXG4gICAgICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5pc19saXN0X3Zpc2libGUgJiYgX3RoaXMucHJvcHMuaXNfYWxpZ25tZW50X2xlZnQpIHtcXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVWaXNpYmlsaXR5KCk7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgYnJlYWs7XFxuXFxuICAgICAgICBjYXNlIDM5OlxcbiAgICAgICAgICAvLyBSaWdodCBBcnJvdyBpcyBwcmVzc2VkXFxuICAgICAgICAgIGlmIChfdGhpcy5zdGF0ZS5pc19saXN0X3Zpc2libGUgJiYgX3RoaXMucHJvcHMuaXNfYWxpZ25tZW50X2xlZnQpIHtcXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVWaXNpYmlsaXR5KCk7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgYnJlYWs7XFxuXFxuICAgICAgICBkZWZhdWx0OlxcbiAgICAgIH0gLy8gRm9yIGNoYXIgcHJlc3Nlcywgd2UgZG8gYSBzZWFyY2ggZm9yIHRoZSBpdGVtOlxcblxcblxcbiAgICAgIGlmIChldmVudC5rZXkubGVuZ3RoID09PSAxICYmIF90aGlzLnByb3BzLmxpc3QubGVuZ3RoKSB7XFxuICAgICAgICB2YXIgX2NoYXIgPSBldmVudC5rZXkudG9Mb3dlckNhc2UoKTtcXG5cXG4gICAgICAgIHZhciBmaXJzdENoYXJzID0gX3RoaXMucHJvcHMubGlzdC5tYXAoZnVuY3Rpb24gKHgpIHtcXG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcXCdzdHJpbmdcXCcgJiYgeC50ZXh0WzBdLnRvTG93ZXJDYXNlKCk7XFxuICAgICAgICB9KTtcXG5cXG4gICAgICAgIHZhciBpZHg7IC8vIFRhcHBpbmcgdGhlIHNhbWUgY2hhcmFjdGVyIGFnYWluIGp1bXBzIHRvIHRoZSBuZXh0IG1hdGNoOlxcblxcbiAgICAgICAgaWYgKF90aGlzLnN0YXRlLmN1cnJfaW5kZXgpIHtcXG4gICAgICAgICAgaWR4ID0gZmlyc3RDaGFycy5pbmRleE9mKF9jaGFyLCBfdGhpcy5zdGF0ZS5jdXJyX2luZGV4ICsgMSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpZiAoaWR4ID09PSB1bmRlZmluZWQgfHwgaWR4ID09PSAtMSkge1xcbiAgICAgICAgICBpZHggPSBmaXJzdENoYXJzLmluZGV4T2YoX2NoYXIpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XFxuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcXG4gICAgICAgICAgICBjdXJyX2luZGV4OiBpZHhcXG4gICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9O1xcblxcbiAgICBfdGhpcy5zZXRMaXN0RGltZW5zaW9uID0gZnVuY3Rpb24gKCkge1xcbiAgICAgIHJldHVybiBfdGhpcy5zZXRTdGF0ZSh7XFxuICAgICAgICBsaXN0X3dpZHRoOiBfdGhpcy5saXN0X3JlZi5jdXJyZW50Lm9mZnNldFdpZHRoLFxcbiAgICAgICAgbGlzdF9oZWlnaHQ6IF90aGlzLmxpc3RfcmVmLmN1cnJlbnQub2Zmc2V0SGVpZ2h0XFxuICAgICAgfSk7XFxuICAgIH07XFxuXFxuICAgIHJldHVybiBfdGhpcztcXG4gIH1cXG5cXG4gIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgW3tcXG4gICAga2V5OiBcImNvbXBvbmVudERpZE1vdW50XCIsXFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxcJ21vdXNlZG93blxcJywgdGhpcy5oYW5kbGVDbGlja091dHNpZGUsIHtcXG4gICAgICAgIHBhc3NpdmU6IHRydWVcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXFwnbW91c2Vkb3duXFwnLCB0aGlzLmhhbmRsZUNsaWNrT3V0c2lkZSk7XFxuICAgIH1cXG4gIH0sIHtcXG4gICAga2V5OiBcInJlbmRlclwiLFxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xcblxcbiAgICAgIGlmICh0aGlzLnByb3BzLmlzX25hdGl2ZXBpY2tlcikge1xcbiAgICAgICAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KG5hdGl2ZV9zZWxlY3QsIHtcXG4gICAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLFxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSxcXG4gICAgICAgICAgbGlzdDogdGhpcy5wcm9wcy5saXN0LFxcbiAgICAgICAgICBvbkNoYW5nZTogdGhpcy5wcm9wcy5vbkNoYW5nZVxcbiAgICAgICAgfSk7XFxuICAgICAgfVxcblxcbiAgICAgIHZhciBnZXREcm9wRG93bkFsaWdubWVudCA9IGZ1bmN0aW9uIGdldERyb3BEb3duQWxpZ25tZW50KCkge1xcbiAgICAgICAgaWYgKF90aGlzMi5wcm9wcy5pc19hbGlnbm1lbnRfbGVmdCkgcmV0dXJuIF90aGlzMi5jb21wdXRlZF9vZmZzZXRfbGVmdDtlbHNlIGlmIChfdGhpczIucHJvcHMuaXNfYWxpZ25tZW50X3RvcCkgcmV0dXJuIF90aGlzMi5jb21wdXRlZF9vZmZzZXRfdG9wO1xcbiAgICAgICAgcmV0dXJuIG51bGw7XFxuICAgICAgfTtcXG5cXG4gICAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLkZyYWdtZW50LCBudWxsLCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogXCJkYy1kcm9wZG93bl9faW5uZXJcIixcXG4gICAgICAgIGF1dG9Db21wbGV0ZTogXCJvZmZcIixcXG4gICAgICAgIG5hbWU6IHRoaXMucHJvcHMubmFtZSxcXG4gICAgICAgIHJlYWRPbmx5OiBcInJlYWRvbmx5XCIsXFxuICAgICAgICB0eXBlOiBcImhpZGRlblwiLFxcbiAgICAgICAgdmFsdWU6IHRoaXMucHJvcHMudmFsdWUgfHwgMFxcbiAgICAgIH0pLCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XFxuICAgICAgICByZWY6IHRoaXMuc2V0V3JhcHBlclJlZixcXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5jb250YWluZXJfY2xhc3NfbmFtZVxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5kcm9wZG93bl9kaXNwbGF5X2NsYXNzX25hbWUsXFxuICAgICAgICB0YWJJbmRleDogdGhpcy5pc19zaW5nbGVfb3B0aW9uID8gXFwnLTFcXCcgOiBcXCcwXFwnLFxcbiAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVWaXNpYmlsaXR5LFxcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLm9uS2V5UHJlc3NlZFxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGRpc3BsYXlfdGV4dCwge1xcbiAgICAgICAgaGFzX3N5bWJvbDogdGhpcy5wcm9wcy5oYXNfc3ltYm9sLFxcbiAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLFxcbiAgICAgICAgaXNfdGl0bGU6IHRoaXMuc3RhdGUuaXNfbGlzdF92aXNpYmxlLFxcbiAgICAgICAgcGxhY2Vob2xkZXI6IHRoaXMucHJvcHMucGxhY2Vob2xkZXIsXFxuICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSB8fCAwLFxcbiAgICAgICAgbGlzdDogdGhpcy5wcm9wcy5saXN0LFxcbiAgICAgICAgaXNfYWxpZ25fdGV4dF9sZWZ0OiB0aGlzLnByb3BzLmlzX2FsaWduX3RleHRfbGVmdFxcbiAgICAgIH0pKSwgIXRoaXMuaXNfc2luZ2xlX29wdGlvbiAmJiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChpY29uX2Fycm93LCB7XFxuICAgICAgICBpY29uOiBcIkljb25BcnJvd1wiLFxcbiAgICAgICAgY2xhc3NOYW1lOiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1kcm9wZG93bl9fc2VsZWN0LWFycm93XFwnLCB7XFxuICAgICAgICAgIFxcJ2RjLWRyb3Bkb3duX19zZWxlY3QtYXJyb3ctLWxlZnRcXCc6IHRoaXMucHJvcHMuaXNfYWxpZ25tZW50X2xlZnRcXG4gICAgICAgIH0pXFxuICAgICAgfSksIHRoaXMucHJvcHMuZXJyb3IgJiYgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogXCJkYy1maWVsZC1lcnJvclwiXFxuICAgICAgfSwgdGhpcy5wcm9wcy5lcnJvciksIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGV4dGVybmFsX3JlYWN0X3RyYW5zaXRpb25fZ3JvdXBfW1wiQ1NTVHJhbnNpdGlvblwiXSwge1xcbiAgICAgICAgXCJpblwiOiB0aGlzLnN0YXRlLmlzX2xpc3RfdmlzaWJsZSxcXG4gICAgICAgIHRpbWVvdXQ6IDEwMCxcXG4gICAgICAgIGNsYXNzTmFtZXM6IHRoaXMudHJhbnNpdGlvbl9jbGFzc19uYW1lcyxcXG4gICAgICAgIG9uRW50ZXJlZDogdGhpcy5zZXRMaXN0RGltZW5zaW9uLFxcbiAgICAgICAgdW5tb3VudE9uRXhpdDogdHJ1ZVxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcXG4gICAgICAgIGNsYXNzTmFtZTogdGhpcy5kcm9wZG93bl9saXN0X2NsYXNzX25hbWVzXFxuICAgICAgfSwgZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLmxpc3RfY2xhc3NfbmFtZXMsXFxuICAgICAgICByZWY6IHRoaXMubGlzdF9yZWYsXFxuICAgICAgICBzdHlsZTogZ2V0RHJvcERvd25BbGlnbm1lbnQoKVxcbiAgICAgIH0sIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGV4dGVybmFsX3R0X3JlYWN0X2N1c3RvbV9zY3JvbGxiYXJzX1tcIlNjcm9sbGJhcnNcIl0sIHtcXG4gICAgICAgIGF1dG9IZWlnaHQ6IHRydWUsXFxuICAgICAgICBhdXRvSGlkZTogdHJ1ZSxcXG4gICAgICAgIGF1dG9IZWlnaHRNYXg6IDIwMCxcXG4gICAgICAgIHJlbmRlclRyYWNrSG9yaXpvbnRhbDogZnVuY3Rpb24gcmVuZGVyVHJhY2tIb3Jpem9udGFsKHByb3BzKSB7XFxuICAgICAgICAgIHJldHVybiBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcXG4gICAgICAgICAgICBjbGFzc05hbWU6IFwidHJhY2staG9yaXpvbnRhbFwiLFxcbiAgICAgICAgICAgIHN0eWxlOiB7XFxuICAgICAgICAgICAgICBkaXNwbGF5OiBcXCdub25lXFwnXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9KSk7XFxuICAgICAgICB9LFxcbiAgICAgICAgcmVuZGVyVGh1bWJIb3Jpem9udGFsOiBmdW5jdGlvbiByZW5kZXJUaHVtYkhvcml6b250YWwocHJvcHMpIHtcXG4gICAgICAgICAgcmV0dXJuIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHt9LCBwcm9wcywge1xcbiAgICAgICAgICAgIGNsYXNzTmFtZTogXCJ0aHVtYi1ob3Jpem9udGFsXCIsXFxuICAgICAgICAgICAgc3R5bGU6IHtcXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFxcJ25vbmVcXCdcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH0pKTtcXG4gICAgICAgIH1cXG4gICAgICB9LCBBcnJheS5pc0FycmF5KHRoaXMucHJvcHMubGlzdCkgPyBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChkcm9wZG93bl9pdGVtcywge1xcbiAgICAgICAgY2xhc3NOYW1lOiB0aGlzLnByb3BzLmNsYXNzTmFtZUl0ZW1zLFxcbiAgICAgICAgaW5kZXg6IHRoaXMuc3RhdGUuY3Vycl9pbmRleCxcXG4gICAgICAgIGhhbmRsZVNlbGVjdDogdGhpcy5oYW5kbGVTZWxlY3QsXFxuICAgICAgICBoYXNfc3ltYm9sOiB0aGlzLnByb3BzLmhhc19zeW1ib2wsXFxuICAgICAgICBpdGVtczogdGhpcy5wcm9wcy5saXN0LFxcbiAgICAgICAgbmFtZTogdGhpcy5wcm9wcy5uYW1lLFxcbiAgICAgICAgaXNfYWxpZ25fdGV4dF9sZWZ0OiB0aGlzLnByb3BzLmlzX2FsaWduX3RleHRfbGVmdCxcXG4gICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlXFxuICAgICAgfSkgOiBPYmplY3Qua2V5cyh0aGlzLnByb3BzLmxpc3QpLm1hcChmdW5jdGlvbiAoa2V5KSB7XFxuICAgICAgICByZXR1cm4gZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoZXh0ZXJuYWxfcmVhY3RfZGVmYXVsdC5hLkZyYWdtZW50LCB7XFxuICAgICAgICAgIGtleToga2V5XFxuICAgICAgICB9LCBleHRlcm5hbF9yZWFjdF9kZWZhdWx0LmEuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XFxuICAgICAgICAgIGNsYXNzTmFtZTogZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoXFwnZGMtbGlzdF9fbGFiZWxcXCcsIF90aGlzMi5wcm9wcy5jbGFzc05hbWVMYWJlbClcXG4gICAgICAgIH0sIGtleSksIGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KGRyb3Bkb3duX2l0ZW1zLCB7XFxuICAgICAgICAgIGNsYXNzTmFtZTogX3RoaXMyLnByb3BzLmNsYXNzTmFtZUl0ZW1zLFxcbiAgICAgICAgICBoYW5kbGVTZWxlY3Q6IF90aGlzMi5oYW5kbGVTZWxlY3QsXFxuICAgICAgICAgIGhhc19zeW1ib2w6IF90aGlzMi5wcm9wcy5oYXNfc3ltYm9sLFxcbiAgICAgICAgICBpdGVtczogX3RoaXMyLnByb3BzLmxpc3Rba2V5XSxcXG4gICAgICAgICAgbmFtZTogX3RoaXMyLnByb3BzLm5hbWUsXFxuICAgICAgICAgIGlzX2FsaWduX3RleHRfbGVmdDogX3RoaXMyLnByb3BzLmlzX2FsaWduX3RleHRfbGVmdCxcXG4gICAgICAgICAgdmFsdWU6IF90aGlzMi5wcm9wcy52YWx1ZVxcbiAgICAgICAgfSkpO1xcbiAgICAgIH0pKSkpKSkpO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJjb21wdXRlZF9vZmZzZXRfbGVmdFwiLFxcblxcbiAgICAvKipcXG4gICAgICogQ2FsY3VsYXRlIHRoZSBvZmZzZXQgZm9yIHRoZSBkcm9wZG93biBsaXN0IGJhc2VkIG9uIGl0cyB3aWR0aFxcbiAgICAgKlxcbiAgICAgKiBAcmV0dXJuIHt7dHJhbnNmb3JtOiBzdHJpbmd9fVxcbiAgICAgKi9cXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHtcXG4gICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZChjYWxjKC1cIi5jb25jYXQodGhpcy5zdGF0ZS5saXN0X3dpZHRoLCBcInB4IC0gMTJweCksIDAsIDBweClcIilcXG4gICAgICB9O1xcbiAgICB9XFxuICAgIC8qKlxcbiAgICAgKiBDYWxjdWxhdGUgdGhlIG9mZnNldCBmb3IgdGhlIGRyb3Bkb3duIGxpc3QgYmFzZWQgb24gaXRzIGhlaWdodFxcbiAgICAgKlxcbiAgICAgKiBAcmV0dXJuIHt7dHJhbnNmb3JtOiBzdHJpbmd9fVxcbiAgICAgKi9cXG5cXG4gIH0sIHtcXG4gICAga2V5OiBcImNvbXB1dGVkX29mZnNldF90b3BcIixcXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XFxuICAgICAgcmV0dXJuIHtcXG4gICAgICAgIHRyYW5zZm9ybTogXCJ0cmFuc2xhdGUzZCgwLCBjYWxjKC1cIi5jb25jYXQodGhpcy5zdGF0ZS5saXN0X2hlaWdodCwgXCJweCAtIDE2cHgpLCAwcHgpXCIpXFxuICAgICAgfTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwiaXNfc2luZ2xlX29wdGlvblwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0aGlzLnByb3BzLmxpc3QpID8gdGhpcy5wcm9wcy5saXN0Lmxlbmd0aCA8IDIgOiAvLyBvYmplY3QgaGFzIGxlc3MgdGhhbiB0d28gcHJvcHMgb3IgaW5uZXIgb2JqZWN0IGhhcyBsZXNzIHRoYW4gdHdvIHByb3BzXFxuICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcy5saXN0KS5sZW5ndGggJiYgT2JqZWN0LmtleXModGhpcy5wcm9wcy5saXN0KS5sZW5ndGggPCAyICYmIHRoaXMucHJvcHMubGlzdFtPYmplY3Qua2V5cyh0aGlzLnByb3BzLmxpc3QpWzBdXS5sZW5ndGggPCAyO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJjb250YWluZXJfY2xhc3NfbmFtZVwiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoXFwnZGMtZHJvcGRvd24tY29udGFpbmVyXFwnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSwge1xcbiAgICAgICAgXFwnZGMtZHJvcGRvd24tLWhhcy1wbGFjZWhvbGRlclxcJzogdGhpcy5wcm9wcy5wbGFjZWhvbGRlcixcXG4gICAgICAgIFxcJ2RjLWRyb3Bkb3duLS1sZWZ0XFwnOiB0aGlzLnByb3BzLmlzX2FsaWdubWVudF9sZWZ0LFxcbiAgICAgICAgXFwnZGMtZHJvcGRvd24tLXNob3dcXCc6IHRoaXMuc3RhdGUuaXNfbGlzdF92aXNpYmxlLFxcbiAgICAgICAgXFwnZGMtZHJvcGRvd24tLWRpc2FibGVkXFwnOiB0aGlzLmlzX3NpbmdsZV9vcHRpb25cXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwiZHJvcGRvd25fZGlzcGxheV9jbGFzc19uYW1lXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1kcm9wZG93bl9fZGlzcGxheVxcJywgdGhpcy5wcm9wcy5jbGFzc05hbWVEaXNwbGF5LCB7XFxuICAgICAgICBcXCdkYy1kcm9wZG93bl9fZGlzcGxheS0tY2xpY2tlZFxcJzogdGhpcy5zdGF0ZS5pc19saXN0X3Zpc2libGUsXFxuICAgICAgICBcXCdkYy1kcm9wZG93bl9fZGlzcGxheS0taGFzLXN5bWJvbFxcJzogdGhpcy5wcm9wcy5oYXNfc3ltYm9sLFxcbiAgICAgICAgXFwnZGMtZHJvcGRvd25fX2Rpc3BsYXktLW5vLWJvcmRlclxcJzogdGhpcy5wcm9wcy5ub19ib3JkZXIsXFxuICAgICAgICBcXCdkYy1kcm9wZG93bl9fZGlzcGxheS0taXMtbGVmdC10ZXh0XFwnOiB0aGlzLnByb3BzLmlzX2FsaWduX3RleHRfbGVmdFxcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJkcm9wZG93bl9saXN0X2NsYXNzX25hbWVzXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiBleHRlcm5hbF9jbGFzc25hbWVzX2RlZmF1bHQoKShcXCdkYy1kcm9wZG93bl9fbGlzdFxcJywge1xcbiAgICAgICAgXFwnZGMtZHJvcGRvd25fX2xpc3QtLWxlZnRcXCc6IHRoaXMucHJvcHMuaXNfYWxpZ25tZW50X2xlZnQsXFxuICAgICAgICBcXCdkYy1kcm9wZG93bl9fbGlzdC0tdG9wXFwnOiB0aGlzLnByb3BzLmlzX2FsaWdubWVudF90b3BcXG4gICAgICB9KTtcXG4gICAgfVxcbiAgfSwge1xcbiAgICBrZXk6IFwibGlzdF9jbGFzc19uYW1lc1wiLFxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcXG4gICAgICByZXR1cm4gZXh0ZXJuYWxfY2xhc3NuYW1lc19kZWZhdWx0KCkoXFwnZGMtbGlzdFxcJywge1xcbiAgICAgICAgXFwnZGMtbGlzdC0tbGVmdFxcJzogdGhpcy5wcm9wcy5pc19hbGlnbm1lbnRfbGVmdFxcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9LCB7XFxuICAgIGtleTogXCJ0cmFuc2l0aW9uX2NsYXNzX25hbWVzXCIsXFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xcbiAgICAgIHJldHVybiB7XFxuICAgICAgICBlbnRlcjogXCJkYy1kcm9wZG93bl9fbGlzdC0tZW50ZXJcIi5jb25jYXQodGhpcy5wcm9wcy5pc19hbGlnbm1lbnRfbGVmdCA/IFxcJyBkYy1kcm9wZG93bl9fbGlzdC0tbGVmdC0tZW50ZXJcXCcgOiBcXCdcXCcpLFxcbiAgICAgICAgZW50ZXJEb25lOiBcImRjLWRyb3Bkb3duX19saXN0LS1lbnRlci1kb25lXCIuY29uY2F0KHRoaXMucHJvcHMuaXNfYWxpZ25tZW50X2xlZnQgPyBcXCcgZGMtZHJvcGRvd25fX2xpc3QtLWxlZnQtLWVudGVyLWRvbmVcXCcgOiBcXCdcXCcpLFxcbiAgICAgICAgZXhpdDogXCJkYy1kcm9wZG93bl9fbGlzdC0tZXhpdFwiLmNvbmNhdCh0aGlzLnByb3BzLmlzX2FsaWdubWVudF9sZWZ0ID8gXFwnIGRjLWRyb3Bkb3duX19saXN0LS1sZWZ0LS1leGl0XFwnIDogXFwnXFwnKVxcbiAgICAgIH07XFxuICAgIH1cXG4gIH1dKTtcXG5cXG4gIHJldHVybiBEcm9wZG93bjtcXG59KGV4dGVybmFsX3JlYWN0X2RlZmF1bHQuYS5QdXJlQ29tcG9uZW50KTtcXG5cXG5kcm9wZG93bl9Ecm9wZG93bi5wcm9wVHlwZXMgPSB7XFxuICBjbGFzc05hbWU6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGNsYXNzTmFtZURpc3BsYXk6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZyxcXG4gIGNsYXNzTmFtZUl0ZW1zOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBjbGFzc05hbWVMYWJlbDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuc3RyaW5nLFxcbiAgaGFzX3N5bWJvbDogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuYm9vbCxcXG4gIGlzX2FsaWdubWVudF9sZWZ0OiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sLFxcbiAgaXNfbmF0aXZlcGlja2VyOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5ib29sLFxcbiAgbGlzdDogZHJvcGRvd25fbGlzdFByb3BUeXBlKCksXFxuICBuYW1lOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICBub19ib3JkZXI6IGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLmJvb2wsXFxuICBvbkNoYW5nZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEuZnVuYyxcXG4gIHBsYWNlaG9sZGVyOiBleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5zdHJpbmcsXFxuICB2YWx1ZTogZXh0ZXJuYWxfcHJvcF90eXBlc19kZWZhdWx0LmEub25lT2ZUeXBlKFtleHRlcm5hbF9wcm9wX3R5cGVzX2RlZmF1bHQuYS5udW1iZXIsIGV4dGVybmFsX3Byb3BfdHlwZXNfZGVmYXVsdC5hLnN0cmluZ10pXFxufTtcXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBkcm9wZG93bl9kcm9wZG93biA9IChkcm9wZG93bl9Ecm9wZG93bik7XFxuLy8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvY29tcG9uZW50cy9kcm9wZG93bi9pbmRleC5qc1xcbi8qIGNvbmNhdGVkIGhhcm1vbnkgcmVleHBvcnQgZGVmYXVsdCAqL19fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImRlZmF1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBkcm9wZG93bl9kcm9wZG93bjsgfSk7XFxuXFxuXFxuXFxuLy8jIHNvdXJjZVVSTD1bbW9kdWxlXVxcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTWpndWFuTWlMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5a1pYSnBkaTFqYjIxd2IyNWxiblF1VzI1aGJXVmRMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZhV052YmkxaGNuSnZkeTVxYzNnL01ERTRPU0lzSW5kbFluQmhZMnM2THk5a1pYSnBkaTFqYjIxd2IyNWxiblF1VzI1aGJXVmRMeTR2YzNKakwyTnZiWEJ2Ym1WdWRITXZaSEp2Y0dSdmQyNHZaSEp2Y0dSdmQyNHVhbk0vT1RnNVpDSXNJbmRsWW5CaFkyczZMeTlrWlhKcGRpMWpiMjF3YjI1bGJuUXVXMjVoYldWZEx5NHZjM0pqTDJOdmJYQnZibVZ1ZEhNdlpISnZjR1J2ZDI0dmFYUmxiWE11YW5ONFAyWm1ObVVpTENKM1pXSndZV05yT2k4dlpHVnlhWFl0WTI5dGNHOXVaVzUwTGx0dVlXMWxYUzh1TDNOeVl5OWpiMjF3YjI1bGJuUnpMMlJ5YjNCa2IzZHVMMjVoZEdsMlpTMXpaV3hsWTNRdWFuTjRQemhqTm1RaUxDSjNaV0p3WVdOck9pOHZaR1Z5YVhZdFkyOXRjRzl1Wlc1MExsdHVZVzFsWFM4dUwzTnlZeTlqYjIxd2IyNWxiblJ6TDJSeWIzQmtiM2R1TDJScGMzQnNZWGt0ZEdWNGRDNXFjM2cvWTJRd055SXNJbmRsWW5CaFkyczZMeTlrWlhKcGRpMWpiMjF3YjI1bGJuUXVXMjVoYldWZEx5NHZjM0pqTDJOdmJYQnZibVZ1ZEhNdlpISnZjR1J2ZDI0dlpISnZjR1J2ZDI0dWFuTjRQelJrWkRjaUxDSjNaV0p3WVdOck9pOHZaR1Z5YVhZdFkyOXRjRzl1Wlc1MExsdHVZVzFsWFM4dUwzTnlZeTlqYjIxd2IyNWxiblJ6TDJSeWIzQmtiM2R1TDJsdVpHVjRMbXB6UHpjeFlXWWlYU3dpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJR05zWVhOelRtRnRaWE1nWm5KdmJTQW5ZMnhoYzNOdVlXMWxjeWM3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUNCbWNtOXRJQ2R3Y205d0xYUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCU1pXRmpkQ0FnSUNBZ0lHWnliMjBnSjNKbFlXTjBKenRjYmx4dUx5OGdWRTlFVHlCeVpXMXZkbVVnZEdocGN5Qm1hV3hsSUdWdWRHbHlaV3g1SUhkb1pXNGdhV052YmlCamIyMXdiMjVsYm5RZ2FYTWdjbVZoWkhrdVhHNWpiMjV6ZENCSlkyOXVRWEp5YjNjZ1BTQW9leUJqYkdGemMwNWhiV1VzSUdOc1lYTnpUbUZ0WlZCaGRHZ2dmU2tnUFQ0Z0tGeHVJQ0FnSUR4emRtY2dZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Z6S0NkcGJteHBibVV0YVdOdmJpY3NJR05zWVhOelRtRnRaU2w5SUhkcFpIUm9QU2N4TmljZ2FHVnBaMmgwUFNjeE5pYytYRzRnSUNBZ0lDQWdJRHh3WVhSb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5ZTJOc1lYTnpUbUZ0WlhNb1kyeGhjM05PWVcxbFVHRjBhQ3dnSjJOdmJHOXlNUzFtYVd4c0p5bDlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWFXeHNQU2R5WjJKaEtEQXNJREFzSURBc0lEQXVPQ2tuWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1hV3hzVW5Wc1pUMG5ibTl1ZW1WeWJ5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUdROUowMHhNeTR4TmpRZ05TNHhNMkV1TlM0MUlEQWdNU0F4SUM0Mk56SXVOelJzTFRVdU5TQTFZUzQxTGpVZ01DQXdJREV0TGpZM01pQXdiQzAxTGpVdE5XRXVOUzQxSURBZ01DQXhJQzQyTnpJdExqYzBURGdnT1M0NE1qUnNOUzR4TmpRdE5DNDJPVFI2SjF4dUlDQWdJQ0FnSUNBdlBseHVJQ0FnSUR3dmMzWm5QbHh1S1R0Y2JseHVTV052YmtGeWNtOTNMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JqYkdGemMwNWhiV1VnSUNBZ09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUdOc1lYTnpUbUZ0WlZCaGRHZzZJRkJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzU5TzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCSlkyOXVRWEp5YjNjN1hHNGlMQ0pwYlhCdmNuUWdVSEp2Y0ZSNWNHVnpJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdaMlYwUkdsemNHeGhlVlJsZUhRZ1BTQW9iR2x6ZEN3Z2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0JtYVc1a1NXNUJjbkpoZVNBOUlDaGhjbkpmYkdsemRDa2dQVDRnS0dGeWNsOXNhWE4wTG1acGJtUW9hWFJsYlNBOVBpQnBkR1Z0TG5aaGJIVmxJRDA5UFNCMllXeDFaU2tnZkh3Z2UzMHBMblJsZUhRN1hHNGdJQ0FnYkdWMElIUmxlSFFnUFNBbkp6dGNiaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoc2FYTjBLU2tnZTF4dUlDQWdJQ0FnSUNCMFpYaDBJRDBnWm1sdVpFbHVRWEp5WVhrb2JHbHpkQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdUMkpxWldOMExtdGxlWE1vYkdsemRDa3VjMjl0WlNoclpYa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZENBOUlHWnBibVJKYmtGeWNtRjVLR3hwYzNSYmEyVjVYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHVjRkRHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBaWGgwTzF4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHZGxkRWwwWlcxR2NtOXRWbUZzZFdVZ1BTQW9iR2x6ZEN3Z2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0JtYVc1a1NXNUJjbkpoZVNBOUlDaGhjbkpmYkdsemRDa2dQVDRnWVhKeVgyeHBjM1F1Wm1sdVpFbHVaR1Y0S0dsMFpXMGdQVDRnYVhSbGJTNTJZV3gxWlNBOVBUMGdkbUZzZFdVcE8xeHVJQ0FnSUd4bGRDQnBkR1Z0SUQwZ2UzMDdYRzRnSUNBZ2FXWWdLRUZ5Y21GNUxtbHpRWEp5WVhrb2JHbHpkQ2twSUh0Y2JpQWdJQ0FnSUNBZ2FYUmxiU0E5SUhzZ2JuVnRZbVZ5T2lCbWFXNWtTVzVCY25KaGVTaHNhWE4wS1N3Z2JHVnVaM1JvT2lCc2FYTjBMbXhsYm1kMGFDQjlPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lFOWlhbVZqZEM1clpYbHpLR3hwYzNRcExuTnZiV1VvYTJWNUlEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzBnUFNCN0lHNTFiV0psY2pvZ1ptbHVaRWx1UVhKeVlYa29iR2x6ZEZ0clpYbGRLU3dnYkdWdVozUm9PaUJzYVhOMFcydGxlVjB1YkdWdVozUm9JSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FYUmxiVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnBkR1Z0TzF4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHZGxkRlpoYkhWbFJuSnZiVWx1WkdWNElEMGdLR3hwYzNRc0lHbHVaR1Y0S1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnWm1sdVpFbHVRWEp5WVhrZ1BTQW9ZWEp5WDJ4cGMzUXBJRDArSUdGeWNsOXNhWE4wVzJsdVpHVjRYVHRjYmlBZ0lDQnNaWFFnY21WemRXeDBPMXh1SUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHeHBjM1FwS1NCN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZENBOUlHWnBibVJKYmtGeWNtRjVLR3hwYzNRcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUU5aWFtVmpkQzVyWlhsektHeHBjM1FwTG5OdmJXVW9hMlY1SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUdacGJtUkpia0Z5Y21GNUtHeHBjM1JiYTJWNVhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkQzUyWVd4MVpUdGNibjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JuWlhSUWNtVjJTVzVrWlhnZ1BTQW9hVzVrWlhnc0lHeGxibWQwYUNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhCeVpYWmZhVzVrWlhnZ1BTQW9hVzVrWlhnZ0xTQXhLU0E4SURBZ1B5QW9iR1Z1WjNSb0lDMGdNU2tnT2lCcGJtUmxlQ0F0SURFN1hHNGdJQ0FnY21WMGRYSnVJSEJ5WlhaZmFXNWtaWGc3WEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1oyVjBUbVY0ZEVsdVpHVjRJRDBnS0dsdVpHVjRMQ0JzWlc1bmRHZ3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQnVaWGgwWDJsdVpHVjRJRDBnS0dsdVpHVjRJQ3NnTVNrZ1BUMDlJR3hsYm1kMGFDQS9JREFnT2lCcGJtUmxlQ0FySURFN1hHNGdJQ0FnY21WMGRYSnVJRzVsZUhSZmFXNWtaWGc3WEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ2JHbHpkRkJ5YjNCVWVYQmxJRDBnS0NrZ1BUNGdVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiWEc0Z0lDQWdVSEp2Y0ZSNWNHVnpMbUZ5Y21GNVQyWW9VSEp2Y0ZSNWNHVnpMbk5vWVhCbEtIdGNiaUFnSUNBZ0lDQWdaR2x6WVdKc1pXUWdJQ0E2SUZCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lDQWdJQ0JvWVhOZmRHOXZiSFJwY0RvZ1VISnZjRlI1Y0dWekxtSnZiMndzWEc0Z0lDQWdJQ0FnSUhSbGVIUWdJQ0FnSUNBZ09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQjBiMjlzZEdsd0lDQWdJRG9nVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQWdJQ0FnZG1Gc2RXVWdJQ0FnSUNBNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMXh1SUNBZ0lDQWdJQ0FnSUNBZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRkJ5YjNCVWVYQmxjeTV1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJRjBwTEZ4dUlDQWdJSDBwS1N4Y2JpQWdJQ0JRY205d1ZIbHdaWE11YjJKcVpXTjBMRnh1WFNrN1hHNGlMQ0pwYlhCdmNuUWdZMnhoYzNOT1lXMWxjeUFnSUNBZ0lDQWdJQ0JtY205dElDZGpiR0Z6YzI1aGJXVnpKenRjYm1sdGNHOXlkQ0JRY205d1ZIbHdaWE1nSUNBZ0lDQWdJQ0FnSUdaeWIyMGdKM0J5YjNBdGRIbHdaWE1uTzF4dWFXMXdiM0owSUZKbFlXTjBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJRkJ2Y0c5MlpYSWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJTQW5RMjl0Y0c5dVpXNTBjeTl3YjNCdmRtVnlKenRjYmx4dVkyOXVjM1FnU1hSbGJYTWdQU0FvZTF4dUlDQWdJR05zWVhOelRtRnRaU3hjYmlBZ0lDQnBibVJsZUN4Y2JpQWdJQ0JvWVc1a2JHVlRaV3hsWTNRc1hHNGdJQ0FnYUdGelgzTjViV0p2YkN4Y2JpQWdJQ0JwZEdWdGN5eGNiaUFnSUNCdVlXMWxMRnh1SUNBZ0lHbHpYMkZzYVdkdVgzUmxlSFJmYkdWbWRDeGNiaUFnSUNCMllXeDFaU3hjYm4wcElEMCtJQ0JwZEdWdGN5NXRZWEFvS0dsMFpXMHNJR2xrZUNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUhONWJXSnZiRjkwZVhCbFgyTnNZWE56WDI1aGJXVWdQU0JwZEdWdExuUmxlSFFnSmlZZ2RIbHdaVzltSUdsMFpXMHVkR1Y0ZENBOVBUMGdKM04wY21sdVp5Y2dQeUJnYzNsdFltOXNjeTB0Skhzb2FYUmxiUzUwWlhoMEtTNTBiMHh2ZDJWeVEyRnpaU2dwZldBZ09pQnVkV3hzTzF4dVhHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJQ0FnUEdScGRseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0amJHRnpjMDVoYldWektGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGtZeTFzYVhOMFgxOXBkR1Z0Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lDZGtZeTFzYVhOMFgxOXBkR1Z0TFMxb2FXZG9iR2xuYUhSbFpDYzZJR2xrZUNBOVBUMGdhVzVrWlhnZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJQ2RrWXkxc2FYTjBYMTlwZEdWdExTMXpaV3hsWTNSbFpDYzZJSFpoYkhWbElEMDlQU0JwZEdWdExuWmhiSFZsSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5QW5aR010YkdsemRGOWZhWFJsYlMwdFpHbHpZV0pzWldRbk9pQnBkR1Z0TG1ScGMyRmliR1ZrSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnVZVzFsUFh0dVlXMWxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U5ZTJsMFpXMHVkbUZzZFdWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtOc2FXTnJQWHRwZEdWdExtUnBjMkZpYkdWa0lEOGdiblZzYkNBNklHaGhibVJzWlZObGJHVmpkQzVpYVc1a0tHNTFiR3dzSUdsMFpXMHBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVQWHRwWkhoOVhHNGdJQ0FnSUNBZ0lENWNiaUFnSUNBZ0lDQWdJQ0FnSUhzaElXaGhjMTl6ZVcxaWIyd2dKaVlnYVhSbGJTNW9ZWE5mZEc5dmJIUnBjQ0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4UWIzQnZkbVZ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnNhV2R1YldWdWREMG5iR1ZtZENkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpUMTdhWFJsYlM1MFpYaDBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BITndZVzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3WTJ4aGMzTk9ZVzFsY3loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5jM2x0WW05c2N5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJSakxXeHBjM1JmWDJsMFpXMHRjM2x0WW05c0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZVcxaWIyeGZkSGx3WlY5amJHRnpjMTl1WVcxbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dlVHOXdiM1psY2o1Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdleUVoYUdGelgzTjViV0p2YkNBbUppQWhhWFJsYlM1b1lYTmZkRzl2YkhScGNDQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh6Y0dGdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3WTJ4aGMzTk9ZVzFsY3loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkemVXMWliMnh6Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNka1l5MXNhWE4wWDE5cGRHVnRMWFJsZUhRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzbHRZbTlzWDNSNWNHVmZZMnhoYzNOZmJtRnRaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCN0lXaGhjMTl6ZVcxaWIyd2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNCaGJpQmpiR0Z6YzA1aGJXVTllMk5zWVhOelRtRnRaWE1vSjJSakxXeHBjM1JmWDJsMFpXMHRkR1Y0ZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnSjJSakxXeHBjM1JmWDJsMFpXMHRkR1Y0ZEMwdGJHVm1kQ2M2SUdselgyRnNhV2R1WDNSbGVIUmZiR1ZtZENCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRwZEdWdExuUmxlSFI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5emNHRnVQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FwTzF4dWZTazdYRzVjYmtsMFpXMXpMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JqYkdGemMwNWhiV1VnSUNBNklGQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnYUdGdVpHeGxVMlZzWldOME9pQlFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0JvWVhOZmMzbHRZbTlzSUNBNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJRzVoYldVZ0lDQWdJQ0FnSURvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0IyWVd4MVpTQWdJQ0FnSUNBNklGQnliM0JVZVhCbGN5NXZibVZQWmxSNWNHVW9XMXh1SUNBZ0lDQWdJQ0JRY205d1ZIbHdaWE11Ym5WdFltVnlMRnh1SUNBZ0lDQWdJQ0JRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lGMHBMRnh1ZlR0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1NYUmxiWE03WEc0aUxDSnBiWEJ2Y25RZ1VISnZjRlI1Y0dWeklHWnliMjBnSjNCeWIzQXRkSGx3WlhNbk8xeHVhVzF3YjNKMElGSmxZV04wSUNBZ0lDQm1jbTl0SUNkeVpXRmpkQ2M3WEc1Y2JtTnZibk4wSUU1aGRHbDJaVk5sYkdWamRDQTlJQ2g3WEc0Z0lDQWdibUZ0WlN4Y2JpQWdJQ0JzYVhOMExGeHVJQ0FnSUhaaGJIVmxMRnh1SUNBZ0lHOXVRMmhoYm1kbExGeHVmU2tnUFQ0Z0tGeHVJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQU2R1WVhScGRtVXRjMlZzWldOMElHNWhkR2wyWlMxelpXeGxZM1JmWDNkeVlYQndaWEluUGx4dUlDQWdJQ0FnSUNBOGMyVnNaV04wSUdOc1lYTnpUbUZ0WlQwbmMyVnNaV04wSUc1aGRHbDJaUzF6Wld4bFkzUmZYM05sYkdWamRDY2dibUZ0WlQxN2JtRnRaWDBnZG1Gc2RXVTllM1poYkhWbGZTQnZia05vWVc1blpUMTdiMjVEYUdGdVoyVjlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2UwRnljbUY1TG1selFYSnlZWGtvYkdsemRDa2dQMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hwYzNRdWJXRndLQ2hwZEdWdExDQnBaSGdwSUQwK0lDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEc5d2RHbHZiaUJyWlhrOWUybGtlSDBnZG1Gc2RXVTllMmwwWlcwdWRtRnNkV1Y5UG50cGRHVnRMblJsZUhSOVBDOXZjSFJwYjI0K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUMkpxWldOMExtdGxlWE1vYkdsemRDa3ViV0Z3S0d0bGVTQTlQaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeFNaV0ZqZEM1R2NtRm5iV1Z1ZENCclpYazllMnRsZVgwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGIzQjBaM0p2ZFhBZ2JHRmlaV3c5ZTJ0bGVYMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTJ4cGMzUmJhMlY1WFM1dFlYQW9LR2wwWlcwc0lHbGtlQ2tnUFQ0Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGIzQjBhVzl1SUd0bGVUMTdhV1I0ZlNCMllXeDFaVDE3YVhSbGJTNTJZV3gxWlgwK2UybDBaVzB1ZEdWNGRIMDhMMjl3ZEdsdmJqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwS1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmIzQjBaM0p2ZFhBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHd2VW1WaFkzUXVSbkpoWjIxbGJuUStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLU2w5WEc0Z0lDQWdJQ0FnSUR3dmMyVnNaV04wUGx4dUlDQWdJRHd2WkdsMlBseHVLVHRjYmx4dVRtRjBhWFpsVTJWc1pXTjBMbkJ5YjNCVWVYQmxjeUE5SUh0Y2JpQWdJQ0JzYVhOME9pQlFjbTl3Vkhsd1pYTXViMjVsVDJaVWVYQmxLRnRjYmlBZ0lDQWdJQ0FnVUhKdmNGUjVjR1Z6TG05aWFtVmpkQ3hjYmlBZ0lDQWdJQ0FnVUhKdmNGUjVjR1Z6TG1GeWNtRjVMRnh1SUNBZ0lGMHBMRnh1SUNBZ0lHNWhiV1VnSUNBZ09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUc5dVEyaGhibWRsT2lCUWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQjJZV3gxWlNBZ0lEb2dVSEp2Y0ZSNWNHVnpMbTl1WlU5bVZIbHdaU2hiWEc0Z0lDQWdJQ0FnSUZCeWIzQlVlWEJsY3k1dWRXMWlaWElzWEc0Z0lDQWdJQ0FnSUZCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdYU2tzWEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQk9ZWFJwZG1WVFpXeGxZM1E3WEc0aUxDSnBiWEJ2Y25RZ1kyeGhjM05PWVcxbGN5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJTQW5ZMnhoYzNOdVlXMWxjeWM3WEc1cGJYQnZjblFnVUhKdmNGUjVjR1Z6SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlNBbmNISnZjQzEwZVhCbGN5YzdYRzVwYlhCdmNuUWdVbVZoWTNRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1puSnZiU0FuY21WaFkzUW5PMXh1YVcxd2IzSjBJSHNnWjJWMFJHbHpjR3hoZVZSbGVIUXNJR3hwYzNSUWNtOXdWSGx3WlNCOUlHWnliMjBnSnk0dlpISnZjR1J2ZDI0bk8xeHVYRzVqYjI1emRDQkVhWE53YkdGNVZHVjRkQ0E5SUNoN1hHNGdJQ0FnWTJ4aGMzTk9ZVzFsTEZ4dUlDQWdJR2hoYzE5emVXMWliMndzWEc0Z0lDQWdiR2x6ZEN4Y2JpQWdJQ0JwYzE5aGJHbG5ibDkwWlhoMFgyeGxablFzWEc0Z0lDQWdjR3hoWTJWb2IyeGtaWElzWEc0Z0lDQWdibUZ0WlN4Y2JpQWdJQ0IyWVd4MVpTeGNibjBwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0J6ZVcxaWIyeGZkbUZzZFdWZlkyeGhjM01nUFNCb1lYTmZjM2x0WW05c0lEOGdZSE41YldKdmJITXRMU1I3ZG1Gc2RXVXVkRzlNYjNkbGNrTmhjMlVvS1gxZ0lEb2diblZzYkR0Y2JpQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0E4VW1WaFkzUXVSbkpoWjIxbGJuUStYRzRnSUNBZ0lDQWdJQ0FnSUNCN2FHRnpYM041YldKdmJDQS9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE53WVc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1Z6S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNONWJXSnZiSE1nWkdNdFpISnZjR1J2ZDI1ZlgyUnBjM0JzWVhrdGMzbHRZbTlzSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhONWJXSnZiRjkyWVd4MVpWOWpiR0Z6Y3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVDE3Ym1GdFpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTllM1poYkhWbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh6Y0dGdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3WTJ4aGMzTk9ZVzFsY3lnblpHTXRaSEp2Y0dSdmQyNWZYMlJwYzNCc1lYa3RkR1Y0ZENjc0lHTnNZWE56VG1GdFpTbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1aGJXVTllMjVoYldWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbFBYdDJZV3gxWlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRuWlhSRWFYTndiR0Y1VkdWNGRDaHNhWE4wTENCMllXeDFaU2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5emNHRnVQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZTNCc1lXTmxhRzlzWkdWeUlDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk5zWVhOelRtRnRaWE1vSjJSakxXUnliM0JrYjNkdVgxOWthWE53YkdGNUxYQnNZV05sYUc5c1pHVnlKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJSakxXUnliM0JrYjNkdVgxOWthWE53YkdGNUxYQnNZV05sYUc5c1pHVnlMUzFwY3kxMGFYUnNaU2NnSUNBZ09pQjJZV3gxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNka1l5MWtjbTl3Wkc5M2JsOWZaR2x6Y0d4aGVTMXdiR0ZqWldodmJHUmxjaTB0YVhNdGJHVm1kQzEwWlhoMEp6b2dhWE5mWVd4cFoyNWZkR1Y0ZEY5c1pXWjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emNHRnVJR05zWVhOelRtRnRaVDBuWkdNdFpISnZjR1J2ZDI1ZlgyUnBjM0JzWVhrdGNHeGhZMlZvYjJ4a1pYSXRkR1Y0ZENjK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2NHeGhZMlZvYjJ4a1pYSjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmMzQmhiajVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1BDOVNaV0ZqZEM1R2NtRm5iV1Z1ZEQ1Y2JpQWdJQ0FwTzF4dWZUdGNibHh1UkdsemNHeGhlVlJsZUhRdWNISnZjRlI1Y0dWeklEMGdlMXh1SUNBZ0lHTnNZWE56VG1GdFpTQWdPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHaGhjMTl6ZVcxaWIyd2dPaUJRY205d1ZIbHdaWE11WW05dmJDeGNiaUFnSUNCcGMxOTBhWFJzWlNBZ0lEb2dVSEp2Y0ZSNWNHVnpMbUp2YjJ3c1hHNGdJQ0FnYkdsemRDQWdJQ0FnSUNBNklHeHBjM1JRY205d1ZIbHdaU2dwTEZ4dUlDQWdJRzVoYldVZ0lDQWdJQ0FnT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJSEJzWVdObGFHOXNaR1Z5T2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJSFpoYkhWbElDQWdJQ0FnT2lCUWNtOXdWSGx3WlhNdWIyNWxUMlpVZVhCbEtGdGNiaUFnSUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbk4wY21sdVp5eGNiaUFnSUNBZ0lDQWdVSEp2Y0ZSNWNHVnpMbTUxYldKbGNpeGNiaUFnSUNCZEtTeGNibjA3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVScGMzQnNZWGxVWlhoME8xeHVJaXdpYVcxd2IzSjBJR05zWVhOelRtRnRaWE1nSUNBZ0lDQWdJR1p5YjIwZ0oyTnNZWE56Ym1GdFpYTW5PMXh1YVcxd2IzSjBJRkJ5YjNCVWVYQmxjeUFnSUNBZ0lDQWdJR1p5YjIwZ0ozQnliM0F0ZEhsd1pYTW5PMXh1YVcxd2IzSjBJRkpsWVdOMElDQWdJQ0FnSUNBZ0lDQWdJR1p5YjIwZ0ozSmxZV04wSnp0Y2JtbHRjRzl5ZENCN0lFTlRVMVJ5WVc1emFYUnBiMjRnZlNCbWNtOXRJQ2R5WldGamRDMTBjbUZ1YzJsMGFXOXVMV2R5YjNWd0p6dGNibWx0Y0c5eWRDQjdJRk5qY205c2JHSmhjbk1nZlNBZ0lDQm1jbTl0SUNkMGRDMXlaV0ZqZEMxamRYTjBiMjB0YzJOeWIyeHNZbUZ5Y3ljN1hHNXBiWEJ2Y25RZ1NXTnZiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1puSnZiU0FuUTI5dGNHOXVaVzUwY3k5cFkyOXVMV0Z5Y205M0xtcHplQ2M3WEc1cGJYQnZjblFnZTF4dUlDQWdJR2RsZEVsMFpXMUdjbTl0Vm1Gc2RXVXNYRzRnSUNBZ1oyVjBWbUZzZFdWR2NtOXRTVzVrWlhnc1hHNGdJQ0FnWjJWMFVISmxka2x1WkdWNExGeHVJQ0FnSUdkbGRFNWxlSFJKYm1SbGVDeGNiaUFnSUNCc2FYTjBVSEp2Y0ZSNWNHVXNYRzU5SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlNBbkxpOWtjbTl3Wkc5M2JpYzdYRzVwYlhCdmNuUWdTWFJsYlhNZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlNBbkxpOXBkR1Z0Y3k1cWMzZ25PMXh1YVcxd2IzSjBJRTVoZEdsMlpWTmxiR1ZqZENBZ0lDQWdJR1p5YjIwZ0p5NHZibUYwYVhabExYTmxiR1ZqZEM1cWMzZ25PMXh1YVcxd2IzSjBJRVJwYzNCc1lYbFVaWGgwSUNBZ0lDQWdJR1p5YjIwZ0p5NHZaR2x6Y0d4aGVTMTBaWGgwTG1wemVDYzdYRzVjYm1Oc1lYTnpJRVJ5YjNCa2IzZHVJR1Y0ZEdWdVpITWdVbVZoWTNRdVVIVnlaVU52YlhCdmJtVnVkQ0I3WEc0Z0lDQWdiR2x6ZEY5eVpXWWdQU0JTWldGamRDNWpjbVZoZEdWU1pXWW9LVHRjYmx4dUlDQWdJSE4wWVhSbElEMGdlMXh1SUNBZ0lDQWdJQ0JqZFhKeVgybHVaR1Y0SUNBZ0lDQTZJR2RsZEVsMFpXMUdjbTl0Vm1Gc2RXVW9kR2hwY3k1d2NtOXdjeTVzYVhOMExDQjBhR2x6TG5CeWIzQnpMblpoYkhWbEtTNXVkVzFpWlhJc1hHNGdJQ0FnSUNBZ0lHbHpYMnhwYzNSZmRtbHphV0pzWlRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUd4cGMzUmZhR1ZwWjJoMElDQWdJRG9nTUN4Y2JpQWdJQ0FnSUNBZ2JHbHpkRjkzYVdSMGFDQWdJQ0FnT2lBd0xGeHVJQ0FnSUgwN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRZV3hqZFd4aGRHVWdkR2hsSUc5bVpuTmxkQ0JtYjNJZ2RHaGxJR1J5YjNCa2IzZHVJR3hwYzNRZ1ltRnpaV1FnYjI0Z2FYUnpJSGRwWkhSb1hHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0N2RISmhibk5tYjNKdE9pQnpkSEpwYm1kOWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRDQmpiMjF3ZFhSbFpGOXZabVp6WlhSZmJHVm1kQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1elptOXliVG9nWUhSeVlXNXpiR0YwWlROa0tHTmhiR01vTFNSN2RHaHBjeTV6ZEdGMFpTNXNhWE4wWDNkcFpIUm9mWEI0SUMwZ01USndlQ2tzSURBc0lEQndlQ2xnTEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTmhiR04xYkdGMFpTQjBhR1VnYjJabWMyVjBJR1p2Y2lCMGFHVWdaSEp2Y0dSdmQyNGdiR2x6ZENCaVlYTmxaQ0J2YmlCcGRITWdhR1ZwWjJoMFhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0N2RISmhibk5tYjNKdE9pQnpkSEpwYm1kOWZWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRDQmpiMjF3ZFhSbFpGOXZabVp6WlhSZmRHOXdLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5ObWIzSnRPaUJnZEhKaGJuTnNZWFJsTTJRb01Dd2dZMkZzWXlndEpIdDBhR2x6TG5OMFlYUmxMbXhwYzNSZmFHVnBaMmgwZlhCNElDMGdNVFp3ZUNrc0lEQndlQ2xnTEZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkbGRDQnBjMTl6YVc1bmJHVmZiM0IwYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdRWEp5WVhrdWFYTkJjbkpoZVNoMGFHbHpMbkJ5YjNCekxteHBjM1FwSUQ5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2gwYUdsekxuQnliM0J6TG14cGMzUXViR1Z1WjNSb0lEd2dNaWtnT2x4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYjJKcVpXTjBJR2hoY3lCc1pYTnpJSFJvWVc0Z2RIZHZJSEJ5YjNCeklHOXlJR2x1Ym1WeUlHOWlhbVZqZENCb1lYTWdiR1Z6Y3lCMGFHRnVJSFIzYnlCd2NtOXdjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tFOWlhbVZqZEM1clpYbHpLSFJvYVhNdWNISnZjSE11YkdsemRDa3ViR1Z1WjNSb0lDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUMkpxWldOMExtdGxlWE1vZEdocGN5NXdjbTl3Y3k1c2FYTjBLUzVzWlc1bmRHZ2dQQ0F5SUNZbUlIUm9hWE11Y0hKdmNITXViR2x6ZEZ0UFltcGxZM1F1YTJWNWN5aDBhR2x6TG5CeWIzQnpMbXhwYzNRcFd6QmRYUzVzWlc1bmRHZ2dQQ0F5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JuWlhRZ1kyOXVkR0ZwYm1WeVgyTnNZWE56WDI1aGJXVW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYkdGemMwNWhiV1Z6S0Nka1l5MWtjbTl3Wkc5M2JpMWpiMjUwWVdsdVpYSW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3Y205d2N5NWpiR0Z6YzA1aGJXVXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWkdNdFpISnZjR1J2ZDI0dExXaGhjeTF3YkdGalpXaHZiR1JsY2ljNklIUm9hWE11Y0hKdmNITXVjR3hoWTJWb2IyeGtaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJSakxXUnliM0JrYjNkdUxTMXNaV1owSnlBZ0lDQWdJQ0FnSUNBZ09pQjBhR2x6TG5CeWIzQnpMbWx6WDJGc2FXZHViV1Z1ZEY5c1pXWjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RrWXkxa2NtOXdaRzkzYmkwdGMyaHZkeWNnSUNBZ0lDQWdJQ0FnSURvZ2RHaHBjeTV6ZEdGMFpTNXBjMTlzYVhOMFgzWnBjMmxpYkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oyUmpMV1J5YjNCa2IzZHVMUzFrYVhOaFlteGxaQ2NnSUNBZ0lDQWdPaUIwYUdsekxtbHpYM05wYm1kc1pWOXZjSFJwYjI0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkbGRDQmtjbTl3Wkc5M2JsOWthWE53YkdGNVgyTnNZWE56WDI1aGJXVW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYkdGemMwNWhiV1Z6S0Nka1l5MWtjbTl3Wkc5M2JsOWZaR2x6Y0d4aGVTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5YjNCekxtTnNZWE56VG1GdFpVUnBjM0JzWVhrc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5aR010WkhKdmNHUnZkMjVmWDJScGMzQnNZWGt0TFdOc2FXTnJaV1FuSUNBZ0lDQTZJSFJvYVhNdWMzUmhkR1V1YVhOZmJHbHpkRjkyYVhOcFlteGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RrWXkxa2NtOXdaRzkzYmw5ZlpHbHpjR3hoZVMwdGFHRnpMWE41YldKdmJDY2dJRG9nZEdocGN5NXdjbTl3Y3k1b1lYTmZjM2x0WW05c0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGtZeTFrY205d1pHOTNibDlmWkdsemNHeGhlUzB0Ym04dFltOXlaR1Z5SnlBZ0lEb2dkR2hwY3k1d2NtOXdjeTV1YjE5aWIzSmtaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJSakxXUnliM0JrYjNkdVgxOWthWE53YkdGNUxTMXBjeTFzWldaMExYUmxlSFFuT2lCMGFHbHpMbkJ5YjNCekxtbHpYMkZzYVdkdVgzUmxlSFJmYkdWbWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1oyVjBJR1J5YjNCa2IzZHVYMnhwYzNSZlkyeGhjM05mYm1GdFpYTW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYkdGemMwNWhiV1Z6S0Nka1l5MWtjbTl3Wkc5M2JsOWZiR2x6ZENjc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNka1l5MWtjbTl3Wkc5M2JsOWZiR2x6ZEMwdGJHVm1kQ2M2SUhSb2FYTXVjSEp2Y0hNdWFYTmZZV3hwWjI1dFpXNTBYMnhsWm5Rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuWkdNdFpISnZjR1J2ZDI1ZlgyeHBjM1F0TFhSdmNDY2dPaUIwYUdsekxuQnliM0J6TG1selgyRnNhV2R1YldWdWRGOTBiM0FzWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkbGRDQnNhWE4wWDJOc1lYTnpYMjVoYldWektDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMnhoYzNOT1lXMWxjeWduWkdNdGJHbHpkQ2NzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RrWXkxc2FYTjBMUzFzWldaMEp6b2dkR2hwY3k1d2NtOXdjeTVwYzE5aGJHbG5ibTFsYm5SZmJHVm1kQ3hjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWjJWMElIUnlZVzV6YVhScGIyNWZZMnhoYzNOZmJtRnRaWE1vS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm5SbGNqb2dZR1JqTFdSeWIzQmtiM2R1WDE5c2FYTjBMUzFsYm5SbGNpUjdkR2hwY3k1d2NtOXdjeTVwYzE5aGJHbG5ibTFsYm5SZmJHVm1kRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDhnSnlCa1l5MWtjbTl3Wkc5M2JsOWZiR2x6ZEMwdGJHVm1kQzB0Wlc1MFpYSW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUFuSjMxZ0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1MFpYSkViMjVsT2lCZ1pHTXRaSEp2Y0dSdmQyNWZYMnhwYzNRdExXVnVkR1Z5TFdSdmJtVWtlM1JvYVhNdWNISnZjSE11YVhOZllXeHBaMjV0Wlc1MFgyeGxablJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUNjZ1pHTXRaSEp2Y0dSdmQyNWZYMnhwYzNRdExXeGxablF0TFdWdWRHVnlMV1J2Ym1VblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQW5KMzFnTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaWGhwZERvZ1lHUmpMV1J5YjNCa2IzZHVYMTlzYVhOMExTMWxlR2wwSkh0MGFHbHpMbkJ5YjNCekxtbHpYMkZzYVdkdWJXVnVkRjlzWldaMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QW5JR1JqTFdSeWIzQmtiM2R1WDE5c2FYTjBMUzFzWldaMExTMWxlR2wwSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ0p5ZDlZQ3hjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjIxd2IyNWxiblJFYVdSTmIzVnVkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ2R0YjNWelpXUnZkMjRuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1b1lXNWtiR1ZEYkdsamEwOTFkSE5wWkdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGemMybDJaVG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXRjRzl1Wlc1MFYybHNiRlZ1Ylc5MWJuUW9LU0I3WEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sWkc5M2JpY3NJSFJvYVhNdWFHRnVaR3hsUTJ4cFkydFBkWFJ6YVdSbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCb1lXNWtiR1ZUWld4bFkzUWdQU0FvYVhSbGJTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9hWFJsYlM1MllXeDFaU0FoUFQwZ2RHaHBjeTV3Y205d2N5NTJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbTl3Y3k1dmJrTm9ZVzVuWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN0lIUmhjbWRsZERvZ2V5QnVZVzFsT2lCMGFHbHpMbkJ5YjNCekxtNWhiV1VzSUhaaGJIVmxPaUJwZEdWdExuWmhiSFZsSUgwZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NW9ZVzVrYkdWV2FYTnBZbWxzYVhSNUtDazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lITmxkRmR5WVhCd1pYSlNaV1lnUFNBb2JtOWtaU2tnUFQ0Z2RHaHBjeTUzY21Gd2NHVnlYM0psWmlBOUlHNXZaR1U3WEc1Y2JpQWdJQ0JvWVc1a2JHVkRiR2xqYTA5MWRITnBaR1VnUFNBb1pYWmxiblFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M2NtRndjR1Z5WDNKbFppQW1KaUFoZEdocGN5NTNjbUZ3Y0dWeVgzSmxaaTVqYjI1MFlXbHVjeWhsZG1WdWRDNTBZWEpuWlhRcElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbExtbHpYMnhwYzNSZmRtbHphV0pzWlZ4dUlDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RHaHBjeTV3Y205d2N5NW9ZVzVrYkdWQ2JIVnlJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTVvWVc1a2JHVkNiSFZ5S0hzZ2RHRnlaMlYwT2lCN0lHNWhiV1U2SUhSb2FYTXVjSEp2Y0hNdWJtRnRaU0I5SUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUlRkR0YwWlNoN0lHbHpYMnhwYzNSZmRtbHphV0pzWlRvZ1ptRnNjMlVnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ2FHRnVaR3hsVm1semFXSnBiR2wwZVNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSVGRHRjBaU2dvYzNSaGRHVXBJRDArSUNoN0lHbHpYMnhwYzNSZmRtbHphV0pzWlRvZ0lYTjBZWFJsTG1selgyeHBjM1JmZG1semFXSnNaU0I5S1NrN1hHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdoaGJtUnNaVlJ2WjJkc1pTQTlJQ2gyWVd4MVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1emRHRjBaUzVwYzE5c2FYTjBYM1pwYzJsaWJHVWdKaVlnZEdocGN5NXdjbTl3Y3k1MllXeDFaU0FoUFQwZ2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNISnZjSE11YjI1RGFHRnVaMlVvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCMFlYSm5aWFE2SUhzZ2JtRnRaVG9nZEdocGN5NXdjbTl3Y3k1dVlXMWxMQ0IyWVd4MVpTQjlJSDBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11YUdGdVpHeGxWbWx6YVdKcGJHbDBlU2dwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0J2Ymt0bGVWQnlaWE56WldRZ1BTQW9aWFpsYm5RcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YVhOZmMybHVaMnhsWDI5d2RHbHZiaWtnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pYWmxiblF1YTJWNVEyOWtaU0E5UFQwZ09Ta2dleUF2THlCVVlXSWdhWE1nY0hKbGMzTmxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWMzUmhkR1V1YVhOZmJHbHpkRjkyYVhOcFlteGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9ZVzVrYkdWV2FYTnBZbWxzYVhSNUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FXNWtaWGdnUFNCMGFHbHpMbkJ5YjNCekxuWmhiSFZsSUQ4Z1oyVjBTWFJsYlVaeWIyMVdZV3gxWlNoMGFHbHpMbkJ5YjNCekxteHBjM1FzSUhSb2FYTXVjSEp2Y0hNdWRtRnNkV1VwSURvZ01EdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtRnNkV1VnUFNCMGFHbHpMbkJ5YjNCekxuWmhiSFZsSUQ4Z1oyVjBWbUZzZFdWR2NtOXRTVzVrWlhnb2RHaHBjeTV3Y205d2N5NXNhWE4wTENCMGFHbHpMbk4wWVhSbExtTjFjbkpmYVc1a1pYZ3BJRG9nYm5Wc2JEdGNibHh1SUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR1YyWlc1MExtdGxlVU52WkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNVE02SUM4dklFVnVkR1Z5SUdseklIQnlaWE56WldSY2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ016STZJQzh2SUZOd1lXTmxJR2x6SUhCeVpYTnpaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VwSUhSb2FYTXVhR0Z1Wkd4bFZHOW5aMnhsS0haaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNemc2SUM4dklGVndJRUZ5Y205M0lHbHpJSEJ5WlhOelpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXpkR0YwWlM1cGMxOXNhWE4wWDNacGMybGliR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NISmxkbDlwYm1SbGVDQTlJR2RsZEZCeVpYWkpibVJsZUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1JoZEdVdVkzVnljbDlwYm1SbGVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0TG14bGJtZDBhQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdJR04xY25KZmFXNWtaWGc2SUhCeVpYWmZhVzVrWlhnZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQTBNRG9nTHk4Z1JHOTNiaUJCY25KdmR5QnBjeUJ3Y21WemMyVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjM1JoZEdVdWFYTmZiR2x6ZEY5MmFYTnBZbXhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHNWxlSFJmYVc1a1pYZ2dQU0JuWlhST1pYaDBTVzVrWlhnb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wWVhSbExtTjFjbkpmYVc1a1pYZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibVJsZUM1c1pXNW5kR2dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVTNSaGRHVW9leUJqZFhKeVgybHVaR1Y0T2lCdVpYaDBYMmx1WkdWNElIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvSVhSb2FYTXVjSEp2Y0hNdWFYTmZZV3hwWjI1dFpXNTBYMnhsWm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9ZVzVrYkdWV2FYTnBZbWxzYVhSNUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXpOem9nTHk4Z1RHVm1kQ0JoY25KdmR5QnBjeUJ3Y21WemMyVmtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbk4wWVhSbExtbHpYMnhwYzNSZmRtbHphV0pzWlNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnliM0J6TG1selgyRnNhV2R1YldWdWRGOXNaV1owS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHRnVaR3hsVm1semFXSnBiR2wwZVNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ016azZJQzh2SUZKcFoyaDBJRUZ5Y205M0lHbHpJSEJ5WlhOelpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXpkR0YwWlM1cGMxOXNhWE4wWDNacGMybGliR1VnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtOXdjeTVwYzE5aGJHbG5ibTFsYm5SZmJHVm1kQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVlpwYzJsaWFXeHBkSGtvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1JtOXlJR05vWVhJZ2NISmxjM05sY3l3Z2QyVWdaRzhnWVNCelpXRnlZMmdnWm05eUlIUm9aU0JwZEdWdE9seHVJQ0FnSUNBZ0lDQnBaaUFvWlhabGJuUXVhMlY1TG14bGJtZDBhQ0E5UFQwZ01TQW1KaUIwYUdsekxuQnliM0J6TG14cGMzUXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JqYUdGeUlDQWdJQ0FnSUQwZ1pYWmxiblF1YTJWNUxuUnZURzkzWlhKRFlYTmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbWFYSnpkRU5vWVhKeklEMGdkR2hwY3k1d2NtOXdjeTVzYVhOMExtMWhjQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I0SUQwK0lIUjVjR1Z2WmlCNElEMDlQU0FuYzNSeWFXNW5KeUFtSmlCNExuUmxlSFJiTUYwdWRHOU1iM2RsY2tOaGMyVW9LU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVdSNE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHRndjR2x1WnlCMGFHVWdjMkZ0WlNCamFHRnlZV04wWlhJZ1lXZGhhVzRnYW5WdGNITWdkRzhnZEdobElHNWxlSFFnYldGMFkyZzZYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1emRHRjBaUzVqZFhKeVgybHVaR1Y0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUjRJRDBnWm1seWMzUkRhR0Z5Y3k1cGJtUmxlRTltS0dOb1lYSXNJSFJvYVhNdWMzUmhkR1V1WTNWeWNsOXBibVJsZUNBcklERXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbGtlQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lIeDhJR2xrZUNBOVBUMGdMVEVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpIZ2dQU0JtYVhKemRFTm9ZWEp6TG1sdVpHVjRUMllvWTJoaGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FXUjRJRDQ5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGTjBZWFJsS0hzZ1kzVnljbDlwYm1SbGVEb2dhV1I0SUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUM4dklGVndiMjRnY21WdVpHVnlJSFpwWVNCamMzTWdkSEpoYm5OcGRHbHZiaUJuY205MWNDd2dkMlVnZFhObElIUm9hWE1nWVhNZ1lTQmpZV3hzWW1GamF5QjBieUJ6WlhRZ2RHaGxJSGRwWkhSb0wyaGxhV2RvZENCdlppQjBhR1VnWkhKdmNHUnZkMjRnYkdsemRDQnBiaUIwYUdVZ2MzUmhkR1ZjYmlBZ0lDQnpaWFJNYVhOMFJHbHRaVzV6YVc5dUlEMGdLQ2tnUFQ0Z2RHaHBjeTV6WlhSVGRHRjBaU2g3WEc0Z0lDQWdJQ0FnSUd4cGMzUmZkMmxrZEdnZ09pQjBhR2x6TG14cGMzUmZjbVZtTG1OMWNuSmxiblF1YjJabWMyVjBWMmxrZEdnc1hHNGdJQ0FnSUNBZ0lHeHBjM1JmYUdWcFoyaDBPaUIwYUdsekxteHBjM1JmY21WbUxtTjFjbkpsYm5RdWIyWm1jMlYwU0dWcFoyaDBMRnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdjbVZ1WkdWeUtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3Y205d2N5NXBjMTl1WVhScGRtVndhV05yWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEU1aGRHbDJaVk5sYkdWamRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbFBYdDBhR2x6TG5CeWIzQnpMbTVoYldWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbFBYdDBhR2x6TG5CeWIzQnpMblpoYkhWbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYVhOMFBYdDBhR2x6TG5CeWIzQnpMbXhwYzNSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1UTJoaGJtZGxQWHQwYUdsekxuQnliM0J6TG05dVEyaGhibWRsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdkbGRFUnliM0JFYjNkdVFXeHBaMjV0Wlc1MElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKdmNITXVhWE5mWVd4cFoyNXRaVzUwWDJ4bFpuUXBJSEpsZEhWeWJpQjBhR2x6TG1OdmJYQjFkR1ZrWDI5bVpuTmxkRjlzWldaME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvZEdocGN5NXdjbTl3Y3k1cGMxOWhiR2xuYm0xbGJuUmZkRzl3S1NCeVpYUjFjbTRnZEdocGN5NWpiMjF3ZFhSbFpGOXZabVp6WlhSZmRHOXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQThVbVZoWTNRdVJuSmhaMjFsYm5RK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BHbHVjSFYwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMG5aR010WkhKdmNHUnZkMjVmWDJsdWJtVnlKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRYUnZRMjl0Y0d4bGRHVTlKMjltWmlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibUZ0WlQxN2RHaHBjeTV3Y205d2N5NXVZVzFsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV0ZrVDI1c2VUMG5jbVZoWkc5dWJIa25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTlKMmhwWkdSbGJpZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTllM1JvYVhNdWNISnZjSE11ZG1Gc2RXVWdmSHdnTUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeGthWFpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVm1QWHQwYUdsekxuTmxkRmR5WVhCd1pYSlNaV1o5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdkR2hwY3k1amIyNTBZV2x1WlhKZlkyeGhjM05mYm1GdFpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4a2FYWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnNZWE56VG1GdFpUMTdkR2hwY3k1a2NtOXdaRzkzYmw5a2FYTndiR0Y1WDJOc1lYTnpYMjVoYldWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFlXSkpibVJsZUQxN2RHaHBjeTVwYzE5emFXNW5iR1ZmYjNCMGFXOXVJRDhnSnkweEp5QTZJQ2N3SjMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVEyeHBZMnM5ZTNSb2FYTXVhR0Z1Wkd4bFZtbHphV0pwYkdsMGVYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVTMlY1Ukc5M2JqMTdkR2hwY3k1dmJrdGxlVkJ5WlhOelpXUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4RWFYTndiR0Y1VkdWNGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYzE5emVXMWliMnc5ZTNSb2FYTXVjSEp2Y0hNdWFHRnpYM041YldKdmJIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbFBYdDBhR2x6TG5CeWIzQnpMbTVoYldWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWE5mZEdsMGJHVTllM1JvYVhNdWMzUmhkR1V1YVhOZmJHbHpkRjkyYVhOcFlteGxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCc1lXTmxhRzlzWkdWeVBYdDBhR2x6TG5CeWIzQnpMbkJzWVdObGFHOXNaR1Z5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsUFh0MGFHbHpMbkJ5YjNCekxuWmhiSFZsSUh4OElEQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdsemREMTdkR2hwY3k1d2NtOXdjeTVzYVhOMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x6WDJGc2FXZHVYM1JsZUhSZmJHVm1kRDE3ZEdocGN5NXdjbTl3Y3k1cGMxOWhiR2xuYmw5MFpYaDBYMnhsWm5SOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSVhSb2FYTXVhWE5mYzJsdVoyeGxYMjl3ZEdsdmJpQW1KaUE4U1dOdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xqYjI0OUowbGpiMjVCY25KdmR5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5ZTJOc1lYTnpUbUZ0WlhNb0oyUmpMV1J5YjNCa2IzZHVYMTl6Wld4bFkzUXRZWEp5YjNjbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGtZeTFrY205d1pHOTNibDlmYzJWc1pXTjBMV0Z5Y205M0xTMXNaV1owSnpvZ2RHaHBjeTV3Y205d2N5NXBjMTloYkdsbmJtMWxiblJmYkdWbWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1gxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UzUm9hWE11Y0hKdmNITXVaWEp5YjNJZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHdJR05zWVhOelRtRnRaVDBuWkdNdFptbGxiR1F0WlhKeWIzSW5QbnQwYUdsekxuQnliM0J6TG1WeWNtOXlmVHd2Y0Q1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFExTlRWSEpoYm5OcGRHbHZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzQ5ZTNSb2FYTXVjM1JoZEdVdWFYTmZiR2x6ZEY5MmFYTnBZbXhsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdsdFpXOTFkRDE3TVRBd2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbGN6MTdkR2hwY3k1MGNtRnVjMmwwYVc5dVgyTnNZWE56WDI1aGJXVnpmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVGYm5SbGNtVmtQWHQwYUdsekxuTmxkRXhwYzNSRWFXMWxibk5wYjI1OVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWJtMXZkVzUwVDI1RmVHbDBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4a2FYWWdZMnhoYzNOT1lXMWxQWHQwYUdsekxtUnliM0JrYjNkdVgyeHBjM1JmWTJ4aGMzTmZibUZ0WlhOOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhrYVhaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsUFh0MGFHbHpMbXhwYzNSZlkyeGhjM05mYm1GdFpYTjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxaajE3ZEdocGN5NXNhWE4wWDNKbFpuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U5ZTJkbGRFUnliM0JFYjNkdVFXeHBaMjV0Wlc1MEtDbDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4VTJOeWIyeHNZbUZ5YzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYVjBiMGhsYVdkb2RGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWFYwYjBocFpHVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0YxZEc5SVpXbG5hSFJOWVhnOWV6SXdNSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGJtUmxjbFJ5WVdOclNHOXlhWHB2Ym5SaGJEMTdjSEp2Y0hNZ1BUNGdQR1JwZGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHN1TGk1d2NtOXdjMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlKM1J5WVdOckxXaHZjbWw2YjI1MFlXd25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U5ZTNzZ1pHbHpjR3hoZVRvZ0oyNXZibVVuSUgxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZQbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGJtUmxjbFJvZFcxaVNHOXlhWHB2Ym5SaGJEMTdjSEp2Y0hNZ1BUNGdQR1JwZGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHN1TGk1d2NtOXdjMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTlKM1JvZFcxaUxXaHZjbWw2YjI1MFlXd25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U5ZTNzZ1pHbHpjR3hoZVRvZ0oyNXZibVVuSUgxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZQbjFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTBGeWNtRjVMbWx6UVhKeVlYa29kR2hwY3k1d2NtOXdjeTVzYVhOMEtTQS9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BFbDBaVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOc1lYTnpUbUZ0WlQxN2RHaHBjeTV3Y205d2N5NWpiR0Z6YzA1aGJXVkpkR1Z0YzMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGc5ZTNSb2FYTXVjM1JoZEdVdVkzVnljbDlwYm1SbGVIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bFUyVnNaV04wUFh0MGFHbHpMbWhoYm1Sc1pWTmxiR1ZqZEgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnpYM041YldKdmJEMTdkR2hwY3k1d2NtOXdjeTVvWVhOZmMzbHRZbTlzZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRjejE3ZEdocGN5NXdjbTl3Y3k1c2FYTjBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbFBYdDBhR2x6TG5CeWIzQnpMbTVoYldWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHpYMkZzYVdkdVgzUmxlSFJmYkdWbWREMTdkR2hwY3k1d2NtOXdjeTVwYzE5aGJHbG5ibDkwWlhoMFgyeGxablI5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxQWHQwYUdsekxuQnliM0J6TG5aaGJIVmxmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOCtJRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlBZbXBsWTNRdWEyVjVjeWgwYUdsekxuQnliM0J6TG14cGMzUXBMbTFoY0NoclpYa2dQVDRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOFVtVmhZM1F1Um5KaFoyMWxiblFnYTJWNVBYdHJaWGw5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQR1JwZGlCamJHRnpjMDVoYldVOWUyTnNZWE56VG1GdFpYTW9KMlJqTFd4cGMzUmZYMnhoWW1Wc0p5d2dkR2hwY3k1d2NtOXdjeTVqYkdGemMwNWhiV1ZNWVdKbGJDbDlQbnRyWlhsOVBDOWthWFkrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThTWFJsYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVOWUzUm9hWE11Y0hKdmNITXVZMnhoYzNOT1lXMWxTWFJsYlhOOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHRnVaR3hsVTJWc1pXTjBQWHQwYUdsekxtaGhibVJzWlZObGJHVmpkSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVhOZmMzbHRZbTlzUFh0MGFHbHpMbkJ5YjNCekxtaGhjMTl6ZVcxaWIyeDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWFJsYlhNOWUzUm9hWE11Y0hKdmNITXViR2x6ZEZ0clpYbGRmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVoYldVOWUzUm9hWE11Y0hKdmNITXVibUZ0WlgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGMxOWhiR2xuYmw5MFpYaDBYMnhsWm5ROWUzUm9hWE11Y0hKdmNITXVhWE5mWVd4cFoyNWZkR1Y0ZEY5c1pXWjBmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbFBYdDBhR2x6TG5CeWIzQnpMblpoYkhWbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BDOVNaV0ZqZEM1R2NtRm5iV1Z1ZEQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOEwxTmpjbTlzYkdKaGNuTStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5a2FYWStYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMMlJwZGo1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlEVTFOVWNtRnVjMmwwYVc5dVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlTWldGamRDNUdjbUZuYldWdWRENWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYm4xY2JseHVSSEp2Y0dSdmQyNHVjSEp2Y0ZSNWNHVnpJRDBnZTF4dUlDQWdJR05zWVhOelRtRnRaU0FnSUNBZ0lDQWdPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHTnNZWE56VG1GdFpVUnBjM0JzWVhrZ09pQlFjbTl3Vkhsd1pYTXVjM1J5YVc1bkxGeHVJQ0FnSUdOc1lYTnpUbUZ0WlVsMFpXMXpJQ0FnT2lCUWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJR05zWVhOelRtRnRaVXhoWW1Wc0lDQWdPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lHaGhjMTl6ZVcxaWIyd2dJQ0FnSUNBZ09pQlFjbTl3Vkhsd1pYTXVZbTl2YkN4Y2JpQWdJQ0JwYzE5aGJHbG5ibTFsYm5SZmJHVm1kRG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2FYTmZibUYwYVhabGNHbGphMlZ5SUNBNklGQnliM0JVZVhCbGN5NWliMjlzTEZ4dUlDQWdJR3hwYzNRZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJzYVhOMFVISnZjRlI1Y0dVb0tTeGNiaUFnSUNCdVlXMWxJQ0FnSUNBZ0lDQWdJQ0FnSURvZ1VISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0J1YjE5aWIzSmtaWElnSUNBZ0lDQWdJRG9nVUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ2IyNURhR0Z1WjJVZ0lDQWdJQ0FnSUNBNklGQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJSEJzWVdObGFHOXNaR1Z5SUNBZ0lDQWdPaUJRY205d1ZIbHdaWE11YzNSeWFXNW5MRnh1SUNBZ0lIWmhiSFZsSUNBZ0lDQWdJQ0FnSUNBZ09pQlFjbTl3Vkhsd1pYTXViMjVsVDJaVWVYQmxLRnRjYmlBZ0lDQWdJQ0FnVUhKdmNGUjVjR1Z6TG01MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnVUhKdmNGUjVjR1Z6TG5OMGNtbHVaeXhjYmlBZ0lDQmRLU3hjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFUnliM0JrYjNkdU8xeHVJaXdpYVcxd2IzSjBJQ2N1TDJSeWIzQmtiM2R1TG5OamMzTW5PMXh1YVcxd2IzSjBJQ2N1TDJ4cGMzUXVjMk56Y3ljN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWnliMjBnSnk0dlpISnZjR1J2ZDI0dWFuTjRKenRjYmlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZLUVR0QlFVWkJPMEZCUTBFN1FVRlZRVHRCUVVOQk8wRkJRMEU3UVVGR1FUdEJRVXRCT3p0QlEzSkNRVHRCUVVWQk8wRkJRMEU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWQk8wRkJRVUU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCVEVFN1FVRkVRVHM3T3pzN1FVTjBSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCVlVFN1FVRkZRVHRCUVVWQk8wRkJSVUU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVRkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGV1FUdEJRV05CTzBGQlEwRTdRVUZHUVR0QlFVdEJPMEZCUkVFN1FVRlpRVHRCUVVSQk8wRkJWVUU3UVVGRFFUdEJRVUZCTzBGQlJFRTdRVUZWUVR0QlFUZEVRVHRCUVVOQk8wRkJPRVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVV4Qk8wRkJWMEU3TzBGREwwVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVMUJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlJVRTdRVUZEUVR0QlFVRkJPMEZCUVVFN1FVRkVRVHRCUVVsQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVSQk8wRkJTRUU3UVVGaVFUdEJRVU5CTzBGQmVVSkJPMEZCUTBFN1FVRkpRVHRCUVVOQk8wRkJRMEU3UVVGUVFUdEJRV0ZCT3p0QlF6RkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZSUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZKUVR0QlFVdEJPMEZCUTBFN1FVRlFRVHRCUVZkQk8wRkJRMEU3UVVGRFFUdEJRVWhCTzBGQlZVRTdRVUZEUVR0QlFVTkJPMEZCUmtFN1FVRkVRVHRCUVUxQk8wRkJRVUU3UVVGUFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVkJCTzBGQllVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOcVJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGUFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN096czdPenM3T3pzN096dEJRVU5CTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVwQk8wRkJRMEU3UVVGdFIwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZKUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVZEJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVkQk8wRkJRVUU3UVVGQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUVVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJRMEU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRnlRMEU3UVVGRFFUdEJRVU5CTzBGQmRVTkJPMEZCUTBFN1FVRkRRVHRCUVVGQk8wRkJRMEU3UVVGQlFUdEJRVU5CTzBGQlFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZCUVR0QlFVTkJPMEZCUVVFN1FVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRTdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkdRVHRCUVVGQk8wRkJRMEU3T3pzN096dEJRWHBJUVR0QlFVTkJPMEZCU1VFN1FVRkVRVHRCUVVsQk96czdRVUZGUVR0QlFVTkJPMEZCUTBFN096dEJRV2xJUVR0QlFVRkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZLUVR0QlFVOUJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlFVRTdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGT1FUdEJRVk5CTzBGQlEwRTdRVUZHUVR0QlFVdEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJTa0U3UVVGUFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVZCQk8wRkJXVUU3UVVGRFFUdEJRVU5CTzBGQlJFRTdRVUZHUVR0QlFWRkJPMEZCUVVFN1FVRkhRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlRFRTdRVUZQUVR0QlFVRkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJTRUU3UVVGTlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVRkJPMEZCUlVFN1FVRkRRVHRCUVVGQk8wRkJRVUU3UVVGSVFUdEJRVUZCTzBGQlMwRTdRVUZCUVR0QlFVVkJPMEZCUTBFN1FVRkJRVHRCUVVGQk8wRkJTRUU3UVVGQlFUdEJRVlJCTzBGQmFVSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZTUVR0QlFWVkJPMEZCUTBFN1FVRkJRVHRCUVVOQk8wRkJRVUU3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVZCQk8wRkJTRUU3UVVGelFrRTdPenM3UVVGc1ZVRTdPenM3TzBGQlMwRTdRVUZEUVR0QlFVTkJPMEZCUkVFN1FVRkhRVHRCUVVWQk96czdPenM3T3p0QlFVdEJPMEZCUTBFN1FVRkRRVHRCUVVSQk8wRkJSMEU3T3p0QlFVVkJPMEZCUTBFN1FVRkhRVHRCUVVWQk96czdRVUZGUVR0QlFVTkJPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGS1FUdEJRVTlCT3pzN1FVRkZRVHRCUVVOQk8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZLUVR0QlFVOUJPenM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVWkJPMEZCU1VFN096dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVUkJPMEZCUjBFN096dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVZEJPMEZCUjBFN1FVRlFRVHRCUVZkQk96czdPMEZCZGtaQk8wRkJRMEU3UVVFclZVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVdKQk8wRkJiVUpCT3p0QlEzQllRVHRCUVVGQk8wRkJRMEU3UVVGRlFUc2lMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cXG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMjhcXG4nKX1dKS5kZWZhdWx0fSk7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../components/lib/dropdown.js\n");

/***/ }),

/***/ "./App/Containers/CashierModal/error.jsx":
/*!***********************************************!*\
  !*** ./App/Containers/CashierModal/error.jsx ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prop-types */ \"../node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! deriv-components/lib/button */ \"../../components/lib/button.js\");\n/* harmony import */ var deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _common_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! _common/url */ \"./_common/url.js\");\n/* harmony import */ var _common_url__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_common_url__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var Assets_icon_jsx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Assets/icon.jsx */ \"./Assets/icon.jsx\");\n/* harmony import */ var Stores_connect__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! Stores/connect */ \"./Stores/connect.js\");\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\n\n\n\n\n\n\nvar Error =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Error, _React$Component);\n\n  function Error() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Error);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Error)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onClickButton = function () {\n      if (_this.props.error.link) {\n        window.open(Object(_common_url__WEBPACK_IMPORTED_MODULE_3__[\"urlFor\"])(_this.props.error.link, undefined, undefined, true));\n      } else if (typeof _this.props.error.onClickButton === 'function') {\n        _this.props.error.onClickButton();\n      }\n\n      _this.props.setErrorMessage('');\n    };\n\n    return _this;\n  }\n\n  _createClass(Error, [{\n    key: \"render\",\n    value: function render() {\n      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\"div\", {\n        className: \"cashier__wrapper\"\n      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Assets_icon_jsx__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n        icon: \"IconCashierError\",\n        className: \"cashier-error__icon\"\n      }), Array.isArray(this.props.error.message) ? this.props.error.message.map(function (message, idx) {\n        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\"p\", {\n          className: \"cashier-error__text\",\n          key: idx\n        }, message);\n      }) : react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\"p\", {\n        className: \"cashier-error__text\"\n      }, this.props.error.message), this.props.error.button_text && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(deriv_components_lib_button__WEBPACK_IMPORTED_MODULE_2___default.a, {\n        className: \"btn--secondary--default cashier-error__button\",\n        has_effect: true,\n        text: this.props.error.button_text,\n        onClick: this.onClickButton\n      }));\n    }\n  }]);\n\n  return Error;\n}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);\n\nError.propTypes = {\n  error: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.object,\n  setErrorMessage: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (Object(Stores_connect__WEBPACK_IMPORTED_MODULE_5__[\"connect\"])(function (_ref) {\n  var modules = _ref.modules;\n  return {\n    setErrorMessage: modules.cashier.setErrorMessage\n  };\n})(Error));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9BcHAvQ29udGFpbmVycy9DYXNoaWVyTW9kYWwvZXJyb3IuanN4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vQXBwL0NvbnRhaW5lcnMvQ2FzaGllck1vZGFsL2Vycm9yLmpzeD9hYTU3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgICAgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgICAgICAgIGZyb20gJ3JlYWN0JztcbmltcG9ydCBCdXR0b24gICAgICAgZnJvbSAnZGVyaXYtY29tcG9uZW50cy9saWIvYnV0dG9uJztcbmltcG9ydCB7IHVybEZvciB9ICAgZnJvbSAnX2NvbW1vbi91cmwnO1xuaW1wb3J0IEljb24gICAgICAgICBmcm9tICdBc3NldHMvaWNvbi5qc3gnO1xuaW1wb3J0IHsgY29ubmVjdCB9ICBmcm9tICdTdG9yZXMvY29ubmVjdCc7XG5cbmNsYXNzIEVycm9yIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBvbkNsaWNrQnV0dG9uID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5lcnJvci5saW5rKSB7XG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmxGb3IodGhpcy5wcm9wcy5lcnJvci5saW5rLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdHJ1ZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmVycm9yLm9uQ2xpY2tCdXR0b24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuZXJyb3Iub25DbGlja0J1dHRvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJvcHMuc2V0RXJyb3JNZXNzYWdlKCcnKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Nhc2hpZXJfX3dyYXBwZXInPlxuICAgICAgICAgICAgICAgIDxJY29uIGljb249J0ljb25DYXNoaWVyRXJyb3InIGNsYXNzTmFtZT0nY2FzaGllci1lcnJvcl9faWNvbicgLz5cbiAgICAgICAgICAgICAgICB7QXJyYXkuaXNBcnJheSh0aGlzLnByb3BzLmVycm9yLm1lc3NhZ2UpID9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5lcnJvci5tZXNzYWdlLm1hcCgobWVzc2FnZSwgaWR4KSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSdjYXNoaWVyLWVycm9yX190ZXh0JyBrZXk9e2lkeH0+e21lc3NhZ2V9PC9wPlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPSdjYXNoaWVyLWVycm9yX190ZXh0Jz57dGhpcy5wcm9wcy5lcnJvci5tZXNzYWdlfTwvcD5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAge3RoaXMucHJvcHMuZXJyb3IuYnV0dG9uX3RleHQgJiZcbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nYnRuLS1zZWNvbmRhcnktLWRlZmF1bHQgY2FzaGllci1lcnJvcl9fYnV0dG9uJ1xuICAgICAgICAgICAgICAgICAgICBoYXNfZWZmZWN0XG4gICAgICAgICAgICAgICAgICAgIHRleHQ9e3RoaXMucHJvcHMuZXJyb3IuYnV0dG9uX3RleHR9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMub25DbGlja0J1dHRvbn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuRXJyb3IucHJvcFR5cGVzID0ge1xuICAgIGVycm9yICAgICAgICAgIDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZXRFcnJvck1lc3NhZ2U6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgICAoeyBtb2R1bGVzIH0pID0+ICh7XG4gICAgICAgIHNldEVycm9yTWVzc2FnZTogbW9kdWxlcy5jYXNoaWVyLnNldEVycm9yTWVzc2FnZSxcbiAgICB9KVxuKShFcnJvcik7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFEQTtBQUlBO0FBQUE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBU0E7Ozs7QUEvQkE7QUFDQTtBQWlDQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./App/Containers/CashierModal/error.jsx\n");

/***/ }),

/***/ "./templates/_common/components/loading.jsx":
/*!**************************************************!*\
  !*** ./templates/_common/components/loading.jsx ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! classnames */ \"../node_modules/classnames/index.js\");\n/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nvar Loading = function Loading(_ref) {\n  var className = _ref.className,\n      is_invisible = _ref.is_invisible,\n      theme = _ref.theme,\n      id = _ref.id;\n  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\"div\", {\n    id: id,\n    className: classnames__WEBPACK_IMPORTED_MODULE_0___default()('barspinner', \"barspinner--\".concat(theme || 'dark'), {\n      invisible: is_invisible\n    }, className)\n  }, Array.from(new Array(5)).map(function (x, inx) {\n    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(\"div\", {\n      key: inx,\n      className: \"barspinner__rect barspinner__rect--\".concat(inx + 1, \" rect\").concat(inx + 1)\n    });\n  }));\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Loading);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi90ZW1wbGF0ZXMvX2NvbW1vbi9jb21wb25lbnRzL2xvYWRpbmcuanN4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vdGVtcGxhdGVzL19jb21tb24vY29tcG9uZW50cy9sb2FkaW5nLmpzeD9jZjg3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0ICAgICAgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBMb2FkaW5nID0gKHsgY2xhc3NOYW1lLCBpc19pbnZpc2libGUsIHRoZW1lLCBpZCB9KSA9PiAoXG4gICAgPGRpdlxuICAgICAgICBpZD17aWR9XG4gICAgICAgIGNsYXNzTmFtZT17XG4gICAgICAgICAgICBjbGFzc05hbWVzKFxuICAgICAgICAgICAgICAgICdiYXJzcGlubmVyJyxcbiAgICAgICAgICAgICAgICBgYmFyc3Bpbm5lci0tJHsgdGhlbWUgfHwgJ2RhcmsnfWAsXG4gICAgICAgICAgICAgICAgeyBpbnZpc2libGU6IGlzX2ludmlzaWJsZSB9LFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgID5cbiAgICAgICAgeyBBcnJheS5mcm9tKG5ldyBBcnJheSg1KSkubWFwKCh4LCBpbngpID0+IChcbiAgICAgICAgICAgIDxkaXYga2V5PXtpbnh9IGNsYXNzTmFtZT17YGJhcnNwaW5uZXJfX3JlY3QgYmFyc3Bpbm5lcl9fcmVjdC0tJHtpbnggKyAxfSByZWN0JHtpbnggKyAxfWB9IC8+XG4gICAgICAgICkpfVxuICAgIDwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgTG9hZGluZztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFJQTtBQUFBO0FBTkE7QUFXQTtBQUNBO0FBQUE7QUFBQTtBQURBO0FBWkE7QUFDQTtBQWlCQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./templates/_common/components/loading.jsx\n");

/***/ })

}]);